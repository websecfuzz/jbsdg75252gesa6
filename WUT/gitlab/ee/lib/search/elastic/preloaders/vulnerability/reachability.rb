# frozen_string_literal: true

module Search
  module Elastic
    module Preloaders
      module Vulnerability
        # Preloads reachability information for vulnerability records
        # by querying SBOM occurrences and determining reachability status.
        #
        # This preloader:
        # 1. Fetches SBOM occurrences for vulnerability IDs
        # 2. Filters by reachability types (in_use, not_found, unknown)
        # 3. Calculates the appropriate reachability status for each vulnerability
        class Reachability < Base
          # Preload reachability data for all records
          #
          # @return [Hash] Hash mapping vulnerability_id to reachability status
          def perform_preload
            vulnerability_ids = record_identifiers
            return {} if vulnerability_ids.empty?

            reachability_data = fetch_reachability_data(vulnerability_ids)
            calculate_reachability_for_records(reachability_data)
          end

          private

          # Fetch reachability data from SBOM occurrences
          def fetch_reachability_data(vulnerability_ids)
            ::Sbom::Occurrence
              .filter_by_vulnerability_id(vulnerability_ids)
              .select(:reachability, 'occurrences_vulnerabilities.vulnerability_id')
              .group_by(&:vulnerability_id)
          end

          # Calculate reachability status for each vulnerability
          def calculate_reachability_for_records(reachability_data)
            record_identifiers.each_with_object({}) do |vulnerability_id, result|
              occurrences = reachability_data[vulnerability_id]
              result[vulnerability_id] = calculate_reachability_value(occurrences)
            end
          end

          # Determine the reachability value based on occurrences
          def calculate_reachability_value(occurrences)
            if occurrences&.any?(&:in_use_reachability?)
              ::Enums::Sbom::REACHABILITY_TYPES[::Enums::Sbom::IN_USE]
            elsif occurrences&.any?(&:not_found_reachability?)
              ::Enums::Sbom::REACHABILITY_TYPES[::Enums::Sbom::NOT_FOUND]
            else
              ::Enums::Sbom::REACHABILITY_TYPES[::Enums::Sbom::UNKNOWN]
            end
          end
        end
      end
    end
  end
end
