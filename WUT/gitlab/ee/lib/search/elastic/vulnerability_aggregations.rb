# frozen_string_literal: true

module Search
  module Elastic
    module VulnerabilityAggregations
      class << self
        include ::Elastic::Latest::QueryContext::Aware

        def by_severity_counts(query_hash:, options:)
          count_by_severity = options[:count_by_severity]
          return query_hash unless count_by_severity

          context.name(:aggregations) do
            query_hash.merge(
              size: 0,
              aggs: {
                severity_counts: {
                  terms: {
                    field: "severity"
                  }
                }
              }
            )
          end
        end

        def by_vulnerabilities_over_time(query_hash:, options:)
          vulnerabilities_over_time = options[:vulnerabilities_over_time]
          return query_hash unless vulnerabilities_over_time

          group_by = options[:group_by]
          raise ArgumentError, "group_by is required" unless group_by.in?(%w[severity report_type])

          context.name(:aggregations) do
            query_hash.merge(
              size: 0,
              aggs: {
                vulnerabilities_over_time: {
                  date_histogram: {
                    field: "created_at",
                    calendar_interval: "day",
                    min_doc_count: 0
                  },
                  aggs: {
                    "by_#{group_by}": {
                      terms: {
                        field: group_by
                      }
                    }
                  }
                }
              }
            )
          end
        end

        def by_identifiers_search(query_hash:, options:)
          partial_identifier_name = options[:partial_identifier_name]
          return query_hash if partial_identifier_name.blank?

          regexp =
            ".*(#{partial_identifier_name.downcase}|#{partial_identifier_name.upcase}|#{partial_identifier_name}).*"

          query_hash.merge(
            size: 0,
            aggs: {
              unique_identifiers: {
                terms: {
                  field: "identifier_names.original",
                  size: ::Vulnerabilities::Identifier::SEARCH_RESULTS_LIMIT,
                  include: regexp
                }
              }
            }
          )
        end
      end
    end
  end
end
