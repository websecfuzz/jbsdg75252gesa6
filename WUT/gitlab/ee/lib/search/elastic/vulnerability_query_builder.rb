# frozen_string_literal: true

module Search
  module Elastic
    class VulnerabilityQueryBuilder < QueryBuilder
      extend ::Gitlab::Utils::Override

      DOC_TYPE = 'Vulnerability'

      def build # rubocop:disable Metrics/AbcSize -- need all the filters in one place for now
        query_hash = { query: { bool: ::Search::Elastic::BoolExpr.new } }

        query_hash = ::Search::Elastic::Filters.by_traversal_ids(query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityFilters.by_created_at(
          query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityFilters.by_archived_projects(
          query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityFilters.by_cluster_agent_id(
          query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityFilters.by_state_and_dismissal_reason(
          query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityFilters.by_has_ai_resolution(
          query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityFilters.by_has_issues(query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityFilters.by_has_merge_request(
          query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityFilters.by_has_remediations(
          query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityFilters.by_has_resolution(query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityFilters.by_identifier_names(
          query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityFilters.by_partial_identifier_name(
          query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityFilters.by_owasp_top_10_2017(
          query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityFilters.by_owasp_top_10_2021(
          query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityFilters.by_image(query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityFilters.by_projects(query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityFilters.by_report_type(query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityFilters.by_scanner_external_ids(
          query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityFilters.by_scanner_ids(query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityFilters.by_severities(query_hash: query_hash, options: options)

        if ::Elastic::DataMigrationService.migration_has_finished?(:add_rechability_field_to_vulnerability)
          query_hash = ::Search::Elastic::VulnerabilityFilters.by_reachability(
            query_hash: query_hash, options: options)
        end

        query_hash = ::Search::Elastic::VulnerabilityAggregations.by_severity_counts(
          query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityAggregations.by_vulnerabilities_over_time(
          query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::VulnerabilityAggregations.by_identifiers_search(
          query_hash: query_hash, options: options)

        query_hash = ::Search::Elastic::Formats.source_fields(query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::Formats.page(query_hash: query_hash, options: options)
        query_hash = ::Search::Elastic::Formats.size(query_hash: query_hash, options: options)

        ::Search::Elastic::VulnerabilitySorts.sort_by(query_hash: query_hash, options: options)
      end

      private

      override :base_options
      def base_options
        {
          # vulnerability_id is REQUIRED in source_fields to map the ES records to postgres records
          source_fields: ::Search::Elastic::References::Vulnerability::DEFAULT_SOURCE_FIELDS
        }
      end

      override :extra_options
      def extra_options
        {
          doc_type: DOC_TYPE,
          traversal_ids_prefix: :traversal_ids
        }
      end
    end
  end
end
