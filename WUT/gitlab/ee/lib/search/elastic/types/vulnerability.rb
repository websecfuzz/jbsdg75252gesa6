# frozen_string_literal: true

module Search
  module Elastic
    module Types
      class Vulnerability
        class << self
          def index_name
            Search::Elastic::References::Vulnerability.index
          end

          def mappings
            mappings = base_mappings

            {
              dynamic: 'strict',
              properties: mappings
            }
          end

          def settings
            base_settings
          end

          private

          def base_mappings
            {
              type: { type: 'keyword' },
              vulnerability_id: { type: 'long' },
              created_at: { type: 'date' },
              updated_at: { type: 'date' },
              project_id: { type: 'long' },
              scanner_id: { type: 'long' },
              scanner_external_id: { type: 'keyword' },
              report_type: { type: 'short' }, # enum
              severity: { type: 'short' }, # enum
              state: { type: 'short' }, # enum
              has_issues: { type: 'boolean' },
              resolved_on_default_branch: { type: 'boolean' },
              uuid: { type: 'binary' },
              location_image: { type: 'keyword' },
              cluster_agent_id: { type: 'keyword' },
              casted_cluster_agent_id: { type: 'long' },
              dismissal_reason: { type: 'short' }, # enum
              has_merge_request: { type: 'boolean' },
              has_remediations: { type: 'boolean' },
              traversal_ids: { type: 'keyword' },
              archived: { type: 'boolean' },
              has_vulnerability_resolution: { type: 'boolean' },
              auto_resolved: { type: 'boolean' },
              identifier_names: {
                type: 'text',
                analyzer: 'identifier_pattern_analyzer',
                fields: {
                  keyword: {
                    type: 'keyword',
                    normalizer: 'lower_case_normalizer'
                  },
                  ngram: {
                    type: 'text',
                    analyzer: 'identifier_ngram_analyzer',
                    search_analyzer: 'standard'
                  },
                  original: {
                    type: 'keyword'
                  }
                }
              },
              epss_scores: { type: 'float' },
              reachability: { type: 'short' }, # enum
              schema_version: { type: 'short' }
            }
          end

          def base_settings
            base = ::Elastic::Latest::Config.settings.to_hash.deep_merge(
              index: ::Elastic::Latest::Config.separate_index_specific_settings(index_name)
            )

            # Add vulnerability-specific settings
            base.deep_merge(
              index: {
                # Set max_ngram_diff for this specific index only
                max_ngram_diff: 10
              },
              analysis: {
                analyzer: {
                  identifier_pattern_analyzer: {
                    type: 'pattern',
                    pattern: '[-_:.,\\s/()\\[\\]{}]+',
                    lowercase: true
                  },
                  identifier_ngram_analyzer: {
                    type: 'custom',
                    tokenizer: 'standard',
                    filter: %w[lowercase identifier_ngram_filter]
                  }
                },
                filter: {
                  identifier_ngram_filter: {
                    type: 'ngram',
                    min_gram: 3,
                    max_gram: 10
                  }
                }
              }
            )
          end
        end
      end
    end
  end
end
