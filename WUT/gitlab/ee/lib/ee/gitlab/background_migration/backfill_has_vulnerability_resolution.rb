# frozen_string_literal: true

module EE
  module Gitlab
    module BackgroundMigration
      module BackfillHasVulnerabilityResolution
        extend ActiveSupport::Concern
        extend ::Gitlab::Utils::Override

        prepended do
          operation_name :backfill_has_vulnerability_resolution
        end

        # This list comes from
        # Vulnerabilities::Finding::HIGH_CONFIDENCE_AI_RESOLUTION_CWES
        # rubocop:disable Lint/PercentStringArray -- quotes are intentional
        SUPPORTED_CWES = %w['CWE-23' 'CWE-73' 'CWE-80' 'CWE-116' 'CWE-118'
          'CWE-119' 'CWE-120' 'CWE-126' 'CWE-190' 'CWE-200' 'CWE-208' 'CWE-209' 'CWE-272'
          'CWE-287' 'CWE-295' 'CWE-297' 'CWE-305' 'CWE-310' 'CWE-311' 'CWE-323' 'CWE-327'
          'CWE-328' 'CWE-330' 'CWE-338' 'CWE-345' 'CWE-346' 'CWE-352' 'CWE-362' 'CWE-369'
          'CWE-377' 'CWE-378' 'CWE-400' 'CWE-489' 'CWE-521' 'CWE-539' 'CWE-599' 'CWE-611'
          'CWE-676' 'CWE-704' 'CWE-754' 'CWE-770' 'CWE-1004' 'CWE-1275'].join(',')
        # rubocop:enable Lint/PercentStringArray

        CASE_CONDITION = <<~SQL.freeze
          (
              CASE WHEN EXISTS (
                  SELECT
                      1
                  FROM
                      vulnerability_occurrences vo
                      JOIN vulnerability_occurrence_identifiers voi ON vo.id = voi.occurrence_id
                      JOIN vulnerability_identifiers vi ON voi.identifier_id = vi.id
                  WHERE
                      vulnerability_reads.vulnerability_id = vo.vulnerability_id
                      AND vulnerability_reads.report_type = 0
                      AND LOWER(vi.external_type) = 'cwe'
                      AND vi.name IN (#{SUPPORTED_CWES})) THEN
                  TRUE
              ELSE
                  FALSE
              END
          )
        SQL

        override :perform
        def perform
          each_sub_batch do |sub_batch|
            connection.exec_update(update_sql(sub_batch))
          end
        end

        private

        def update_sql(sub_batch)
          <<~SQL
          UPDATE
              vulnerability_reads
          SET
              has_vulnerability_resolution = #{CASE_CONDITION}
          WHERE
            (has_vulnerability_resolution <> (#{CASE_CONDITION}) OR has_vulnerability_resolution IS NULL)
            AND id IN (#{sub_batch.select(:id).to_sql});
          SQL
        end
      end
    end
  end
end
