# frozen_string_literal: true

module EE
  module Gitlab
    module BackgroundMigration
      module DeleteExpiredVulnerabilityExports
        extend ActiveSupport::Concern
        extend ::Gitlab::Utils::Override

        prepended do
          operation_name :delete_expired_vulnerability_exports
          feature_category :vulnerability_management
        end

        MAX_EXPORT_DURATION = ::Vulnerabilities::Export::MAX_EXPORT_DURATION
        IN_PROGRESS_STATUSES = %w[created running].freeze
        EXPORTS_TABLE = 'vulnerability_exports'

        override :perform
        def perform
          each_sub_batch do |sub_batch|
            connection.execute(build_delete_sql(sub_batch))
          end
        end

        private

        def build_delete_sql(sub_batch)
          ids = sub_batch.pluck(:id).join(',')

          <<~SQL
            DELETE FROM #{EXPORTS_TABLE}
            WHERE id IN (#{ids})
              AND status IN (#{quoted_statuses})
              AND created_at < #{quoted_expiration_cutoff}
          SQL
        end

        def quoted_statuses
          IN_PROGRESS_STATUSES.map { |status| connection.quote(status) }.join(', ')
        end

        def quoted_expiration_cutoff
          connection.quote(MAX_EXPORT_DURATION.ago)
        end

        def connection
          ::SecApplicationRecord.connection
        end
      end
    end
  end
end
