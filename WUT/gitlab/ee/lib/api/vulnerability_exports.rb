# frozen_string_literal: true

module API
  class VulnerabilityExports < ::API::Base
    include ::API::Helpers::VulnerabilitiesHooks
    include ::Gitlab::Utils::StrongMemoize

    feature_category :vulnerability_management
    urgency :low

    helpers do
      def vulnerability_export
        strong_memoize(:vulnerability_export) do
          ::Vulnerabilities::Export.find(params[:id])
        end
      end

      def process_create_request_for(exportable)
        result = ::VulnerabilityExports::CreateService.new(
          exportable, current_user, declared(params)
        ).execute

        present_created_export(result)
      end

      def present_created_export(result)
        if result.success?
          status :created
          present result.payload[:vulnerability_export], with: EE::API::Entities::VulnerabilityExport
        else
          render_api_error!(result.message, result.reason)
        end
      end

      params :report_data do
        optional :report_data,
          type: Hash, desc: <<~'DESCRIPTION',
                     A hash of component_key: component_data

                     Some report formats support embedding UI components from the
                     UI. For example, a user could apply certain filters in the web UI, and
                     then export the component to a PDF. The SVG is provided from
                     the frontend in the report data field.

                     Unsupported keys are discarded. If the data
                     doesn't fit the component it is keyed to, the
                     component is ignored and an error is logged.
          DESCRIPTION
          default: {} do
          optional :project_vulnerabilities_history,
            type: JSON,
            description: 'This object should include an SVG asset to be rendered in PDF reports'
          optional :group_vulnerabilities_over_time,
            type: JSON,
            description: 'This object should include an SVG asset to be rendered in PDF reports'
          optional :project_security_status,
            type: JSON,
            description: 'Data for rendering the project grades summary in PDF reports'
          optional :dashboard_type,
            type: Symbol,
            values: [:project, :group, :instance], default: nil,
            description: 'The type of vulnerability grouping this report is being created for'
          optional :full_path,
            type: String,
            description: 'The full path of the vulnerable'
        end
      end
    end

    before do
      authenticate!
    end

    namespace :security do
      resource :projects, requirements: API::NAMESPACE_OR_PROJECT_REQUIREMENTS do
        params do
          requires :id, types: [String, Integer], desc: 'The ID or URL-encoded path of the project'
          optional :export_format,
            type: String, desc: 'The format of export to be generated',
            default: ::Vulnerabilities::Export.formats.each_key.first,
            values: ::Vulnerabilities::Export.formats.keys
          with(desc: 'Send an email when the export completes') do
            given(export_format: ->(fmt) { fmt == 'pdf' }) { optional(:send_email, type: Boolean, default: true) }
            given(export_format: ->(fmt) { fmt == 'csv' }) { optional(:send_email, type: Boolean, default: false) }
          end
          use :report_data
        end
        desc 'Generate a project-level export' do
          success EE::API::Entities::VulnerabilityExport
        end

        post ':id/vulnerability_exports' do
          authorize! :create_vulnerability_export, user_project

          process_create_request_for(user_project)
        end
      end

      resource :groups, requirements: API::NAMESPACE_OR_PROJECT_REQUIREMENTS do
        params do
          requires :id, type: String, desc: 'The ID of a group'
          optional :export_format,
            type: String, desc: 'The format of export to be generated',
            default: ::Vulnerabilities::Export.formats.each_key.first,
            values: ::Vulnerabilities::Export.formats.keys
          with(desc: 'Send an email when the export completes') do
            given(export_format: ->(fmt) { fmt == 'pdf' }) { optional(:send_email, type: Boolean, default: true) }
            given(export_format: ->(fmt) { fmt == 'csv' }) { optional(:send_email, type: Boolean, default: false) }
          end
          use :report_data
        end
        desc 'Generate a group-level export' do
          success EE::API::Entities::VulnerabilityExport
        end

        post ':id/vulnerability_exports' do
          authorize! :create_vulnerability_export, user_group

          process_create_request_for(user_group)
        end
      end

      namespace do
        params do
          optional :export_format,
            type: String, desc: 'The format of export to be generated',
            default: ::Vulnerabilities::Export.formats.each_key.first,
            values: ::Vulnerabilities::Export.formats.keys
          with(desc: 'Send an email when the export completes') do
            given(export_format: ->(fmt) { fmt == 'pdf' }) { optional(:send_email, type: Boolean, default: true) }
            given(export_format: ->(fmt) { fmt == 'csv' }) { optional(:send_email, type: Boolean, default: false) }
          end
        end
        desc 'Generate an instance-level export' do
          success EE::API::Entities::VulnerabilityExport
        end
        post 'vulnerability_exports' do
          authorize! :create_vulnerability_export, current_user.security_dashboard

          process_create_request_for(current_user.security_dashboard)
        end
      end

      desc 'Get a single vulnerability export' do
        success EE::API::Entities::VulnerabilityExport
      end
      get 'vulnerability_exports/:id' do
        authorize! :read_vulnerability_export, vulnerability_export

        unless vulnerability_export.completed?
          ::Gitlab::PollingInterval.set_api_header(self, interval: 5_000)
          status :accepted
        end

        present vulnerability_export, with: EE::API::Entities::VulnerabilityExport
      end

      desc 'Download a single vulnerability export'
      get 'vulnerability_exports/:id/download' do
        authorize! :read_vulnerability_export, vulnerability_export

        if vulnerability_export.finished?
          present_carrierwave_file!(vulnerability_export.file, content_disposition: :attachment)
        else
          not_found!('Vulnerability Export')
        end
      end
    end
  end
end
