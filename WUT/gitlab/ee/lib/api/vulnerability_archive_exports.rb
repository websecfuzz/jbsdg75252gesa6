# frozen_string_literal: true

module API
  class VulnerabilityArchiveExports < ::API::Base
    feature_category :vulnerability_management
    urgency :low

    helpers do
      def vulnerability_archive_export
        @vulnerability_archive_export ||= ::Vulnerabilities::ArchiveExport.find(params[:id])
      end
    end

    before do
      authenticate!
    end

    namespace :security do
      resource :projects, requirements: API::NAMESPACE_OR_PROJECT_REQUIREMENTS do
        params do
          requires :id, types: [String, Integer], desc: 'The ID or URL-encoded path of the project'
          requires :start_date, type: Date
          requires :end_date, type: Date
          optional :export_format,
            type: String, desc: 'The format of export to be generated',
            default: ::Vulnerabilities::ArchiveExport.formats.each_key.first,
            values: ::Vulnerabilities::ArchiveExport.formats.keys
        end
        desc 'Generate an export file for the archived vulnerabilities within the given date range' do
          success ::API::Entities::VulnerabilityArchiveExport
        end

        post ':id/vulnerability_archive_exports' do
          authorize! :create_vulnerability_archive_export, user_project

          service_object = ::Vulnerabilities::Archival::Export::CreateService.new(
            user_project,
            current_user,
            declared_params[:start_date],
            declared_params[:end_date],
            format: declared_params[:export_format])

          new_vulnerability_archive_export = service_object.execute

          if new_vulnerability_archive_export.persisted?
            status :created

            present new_vulnerability_archive_export, with: ::API::Entities::VulnerabilityArchiveExport
          else
            render_validation_error!(new_vulnerability_archive_export)
          end
        end
      end

      desc 'Get the vulnerability archive export entity' do
        success ::API::Entities::VulnerabilityArchiveExport
      end
      get 'vulnerability_archive_exports/:id' do
        authorize! :read_vulnerability_archive_export, vulnerability_archive_export

        unless vulnerability_archive_export.completed?
          ::Gitlab::PollingInterval.set_api_header(self, interval: 5_000)
          status :accepted
        end

        present vulnerability_archive_export, with: ::API::Entities::VulnerabilityArchiveExport
      end

      desc 'Download a single vulnerability export'
      get 'vulnerability_archive_exports/:id/download' do
        authorize! :read_vulnerability_archive_export, vulnerability_archive_export

        if vulnerability_archive_export.finished?
          present_carrierwave_file!(vulnerability_archive_export.file, content_disposition: :attachment)
        else
          not_found!('Archive Export')
        end
      end
    end
  end
end
