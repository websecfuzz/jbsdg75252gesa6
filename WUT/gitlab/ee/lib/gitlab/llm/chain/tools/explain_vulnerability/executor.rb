# frozen_string_literal: true

module Gitlab
  module Llm
    module Chain
      module Tools
        module ExplainVulnerability
          class Executor < SlashCommandTool
            extend ::Gitlab::Utils::Override

            NAME = 'ExplainVulnerability'
            HUMAN_NAME = 'Explain Vulnerability'
            RESOURCE_NAME = 'Vulnerability'
            ACTION = 'explain vulnerability'
            PROVIDER_PROMPT_CLASSES = {
              ai_gateway: ::Gitlab::Llm::Chain::Tools::ExplainVulnerability::Prompts::Anthropic
            }.freeze

            PROMPT_TEMPLATE = [
              Utils::Prompt.as_system(
                <<~PROMPT.chomp
                  You are a software vulnerability developer.
                  You can explain vulnerabilities in code.
                  %<language_info>s
                PROMPT
              ),
              Utils::Prompt.as_user(
                <<~PROMPT.chomp
                  First, carefully review the vulnerability report:

                  <vulnerability_report>
                  Name: %<title>s
                  Description: %<vulnerability_description>s
                  </vulnerability_report>

                  %<identifiers>s

                  Now, explain the vulnerability "%<title>s - (%<identifiers>s)".
                  %<vulnerability_info>s
                  Provide a code example with syntax highlighting on how an attacker can take advantage of the vulnerability.
                  Provide a code example with syntax highlighting on how to fix it.
                  Provide the response in markdown format with headers.
                PROMPT
              )
            ].freeze

            SLASH_COMMANDS = {
              '/vulnerability_explain' => {
                selected_code_without_input_instruction: 'Explain the current vulnerability.'
              }
            }.freeze

            def self.slash_commands
              SLASH_COMMANDS
            end

            override :perform
            def perform
              error_message = if resource.class.name != RESOURCE_NAME
                                _('This command is used for explaining vulnerabilities and can only be invoked from ' \
                                  'a vulnerability detail page.')
                              elsif !resource.sast?
                                _('Vulnerability Explanation currently only supports vulnerabilities reported by SAST.')
                              end

              return error_with_message(error_message, error_code: 'M4003', source: 'vuln_explain') if error_message

              super
            end

            private

            delegate :title, :file, :finding, to: :resource

            def allow_blank_message?
              true
            end

            def use_ai_gateway_agent_prompt?
              true
            end

            def unit_primitive
              'explain_vulnerability'
            end

            override :prompt_version
            def prompt_version
              return '1.0.1' if Feature.enabled?(:explain_vulnerability_slash_commands_claude_3_7,
                context.current_user)

              DEFAULT_PROMPT_VERSION
            end

            override :command_options
            def command_options
              {
                title: title,
                identifiers: finding.identifier_names.join(', '),
                vulnerability_info: vulnerability_info,
                vulnerability_description: vulnerability_description
              }
            end

            override :filename
            def filename
              File.basename(file.to_s)
            end

            def authorize
              Ability.allowed?(context.current_user, :explain_vulnerability_with_ai, resource)
            end

            def vulnerability_info
              return '' unless eligible_code?

              <<~VULNERABILITY_INFO
                The file "#{filename}" has this vulnerable code:

                ```
                #{finding.vulnerable_code.chomp}
                ```
              VULNERABILITY_INFO
            end

            def vulnerability_description
              finding.description
            end

            def eligible_code?
              return false unless file.present?
              return false unless finding.source_code?
              return false if finding.vulnerable_code.length > provider_prompt_class::MAX_CHARACTERS / 10

              true
            end

            def ai_request
              ::Gitlab::Llm::Chain::Requests::AiGateway.new(
                context.current_user,
                service_name: :explain_vulnerability,
                tracking_context: tracking_context,
                root_namespace: resource.project.root_ancestor
              )
            end

            def tracking_context
              {
                request_id: context.request_id,
                action: 'explain_vulnerability'
              }
            end
          end
        end
      end
    end
  end
end
