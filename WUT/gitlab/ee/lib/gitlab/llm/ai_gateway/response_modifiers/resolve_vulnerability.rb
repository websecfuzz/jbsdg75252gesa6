# frozen_string_literal: true

module Gitlab
  module Llm
    module AiGateway
      module ResponseModifiers
        class ResolveVulnerability < Base
          extend ::Gitlab::Utils::Override

          def initialize(ai_response)
            @ai_response = if ai_response.respond_to?(:keys)
                             ai_response
                           else
                             Gitlab::Json.parse(ai_response)
                           end&.with_indifferent_access
          end

          override :response_body
          def response_body
            ai_response&.dig(:merge_request_url).to_s
          end

          override :errors
          def errors
            @errors ||= [error_from_response, ai_response&.dig('error', 'message'),
              empty_response_error].compact.flatten
          end

          private

          def empty_response_error
            case ai_response
            when {}, nil
              "The response from the AI provider was empty."
            when { 'false_positive' => true }
              "The response from the AI provider was empty because it has determined this vulnerability to be a " \
                "false positive. Use this feature with caution and always verify AI's response."
            when { 'merge_request_url' => nil }
              "No resolution merge request url was provided"
            end
          end
        end
      end
    end
  end
end
