# frozen_string_literal: true

module Gitlab
  module Llm
    module Templates
      module Vulnerabilities
        # We use this exception class for errors where we want
        # the exception message to appear verbatim in the
        # errors property of the response.
        PromptError = Class.new(StandardError)
        CodeLengthError = Class.new(PromptError)

        class VulnerabilityTemplate
          include Gitlab::Llm::Chain::Concerns::AnthropicPrompt
          include Gitlab::Utils::StrongMemoize

          def initialize(vulnerability, params = {})
            @vulnerability = vulnerability
            @params = params
          end

          private

          attr_reader :vulnerability

          delegate :title, :file, :description, :secret_detection?, to: :vulnerability
          delegate :source_code, :source_code?, :identifier_names, :vulnerable_code, to: :finding

          def finding
            vulnerability.finding
          end
          strong_memoize_attr :finding

          def filename
            File.basename(file)
          end

          def formatted_identifiers
            identifiers = identifier_names

            return '' if identifiers.empty?

            names = identifiers.join("\n* ")
            "<report_identifiers>\n * #{names}\n</report_identifiers>"
          end

          def max_code_length
            MAX_CHARACTERS / 10
          end

          def ensure_eligible_code!
            raise PromptError, "Unable to locate source code for vulnerability" unless source_code?

            if vulnerable_code.length > max_code_length
              raise CodeLengthError, "Vulnerable code exceeds maximum length (#{max_code_length})"
            end

            raise PromptError, "Refusing to send possible secrets in AI prompt" if secret_detection?
          end
        end
      end
    end
  end
end
