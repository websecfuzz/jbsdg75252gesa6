# frozen_string_literal: true

module Gitlab
  module Llm
    module Templates
      module Vulnerabilities
        class ResolveVulnerability < VulnerabilityTemplate
          MAX_TOKENS = 4096

          SYSTEM_MESSAGE = Gitlab::Llm::Chain::Utils::Prompt.as_system(
            <<~PROMPT.chomp
              You are a skilled security analyst and programmer tasked with resolving code security vulnerabilities.
              You will be given a vulnerability report and the corresponding source code. Your job is to analyze the report, determine if it's a false positive, and if not, provide a fix for the vulnerability.
            PROMPT
          )
          USER_MESSAGE = Gitlab::Llm::Chain::Utils::Prompt.as_user(
            <<~PROMPT.chomp
              First, carefully review the vulnerability report:

              <vulnerability_report>
              Name: %<name>s
              Description: %<vulnerability_description>s
              </vulnerability_report>

              %<identifiers>s

              Now, examine the source code from the file %<filename>s in question:

              <source_code>
              %<source_code>s
              </source_code>

              <vulnerable_code>
              %<vulnerable_code>s
              </vulnerable_code>

              Analyze the vulnerability report and the source code. Consider the following:
              1. The type of vulnerability reported (e.g., CWE, OWASP, linting rule)
              2. The specific part of the code that is flagged as vulnerable in the vulnerable_code section
              3. The potential security implications of the reported issue

              Consider the context of the code and whether the reported issue truly represents a security concern.

              <analysis>
              Provide your analysis here, explaining your reasoning. Ensure that it is markdown formatted with all the code highlighting if needed.
              </analysis>

              Present your solution in the following format:

              <fixed_code>
              <old_code>
              [Include the vulnerable code snippet, plus 2 lines above and 2 lines below for context]
              </old_code>
              <new_code>
              [Include the fixed code snippet, plus 2 lines above and 2 lines below for context - that needs to be same lines as for <old_code>]
              </new_code>
              </fixed_code>

              1. If there are multiple code locations that need to be addressed, repeat the <old_code>...</old_code> and <new_code>...</new_code> structure for each fix.

              2. Ensure that your fixes address the security vulnerability without changing the overall functionality of the code.

              3. Include all changes that are necessary to make the <new_code> parts work

              4. If you need to add new lines of code as part of your fix, include them in the <new_code> section and adjust the context lines accordingly.

              5. If you need to remove lines of code as part of your fix, omit them from the <new_code> section and adjust the context lines accordingly.

              Remember to maintain the structure and formatting of the original code as much as possible, only making changes necessary to address the security vulnerability.

              Provide your complete response, including all fixes, within a single set of <fixed_code> tags.

              <is_false_positive>
              [true if the vulnerability is a false positive, false otherwise]
              </is_false_positive>

              Finally, provide a summary of your findings and actions:

              <summary>
              1. Briefly restate the reported vulnerability
              2. Summarize the fix you provided and explain how it addresses the security concern
              3. Ensure that it is markdown formatted with all the code highlighting if needed.
              </summary>

              Remember to be thorough in your analysis and clear in your explanations. Your goal is to ensure the
              security of the code while avoiding unnecessary changes. If you believe the vulnerability cannot be fixed
              without additional information, explain why in your analysis.
            PROMPT
          )

          def to_prompt
            ensure_eligible_code!
            prompt
          end

          private

          def prompt
            {
              messages: Gitlab::Llm::Chain::Utils::Prompt.role_conversation(
                Gitlab::Llm::Chain::Utils::Prompt.format_conversation([USER_MESSAGE], variables)
              ),
              system: Gitlab::Llm::Chain::Utils::Prompt.no_role_text([SYSTEM_MESSAGE], variables),
              model: ::Gitlab::Llm::Anthropic::Client::CLAUDE_3_5_SONNET,
              max_tokens: MAX_TOKENS
            }
          end

          def variables
            {
              name: title,
              filename: filename,
              identifiers: formatted_identifiers,
              vulnerable_code: vulnerable_code.chomp,
              source_code: source_code,
              vulnerability_description: description
            }
          end
        end
      end
    end
  end
end
