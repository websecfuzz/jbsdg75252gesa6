# frozen_string_literal: true

module Gitlab
  module VulnerabilityScanning
    module DependencyScanning
      class AffectedVersionRangeMatcher
        include Gitlab::Utils::StrongMemoize

        attr_reader :package_type, :range, :interval_set

        def initialize(purl_type:, range:)
          @package_type =
            case purl_type
            when 'golang'
              'go'
            when 'composer'
              'packagist'
            else
              purl_type
            end
          @range = range

          @interval_set = SemverDialects::IntervalSetParser.parse(package_type, range)
        end

        def affected?(version)
          version_interval_set = version_from_string(version)
          interval_set.overlaps_with?(version_interval_set)
        end

        private

        def version_from_string(version_string)
          strong_memoize_with(:version_from_string, version_string) do
            version = SemverDialects.parse_version(package_type, version_string)
            SemverDialects::Interval.from_version(version)
          end
        end
      end
    end
  end
end
