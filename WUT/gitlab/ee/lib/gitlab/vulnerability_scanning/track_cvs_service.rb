# frozen_string_literal: true

# This service track executions of a CVS using Snowplow.
#
# @param advisory [PackageMetadata::Advisory] the advisory that ran the scan.
# @param start_time [String] time when the scan started.
# @param end_time [String] time when the scan ended.
# @param count [Hash] Counts of models impacted by the scan.
module Gitlab
  module VulnerabilityScanning
    class TrackCvsService
      CVS_SCAN_SCHEMA_URL = 'iglu:com.gitlab/secure_cvs/jsonschema/1-0-1'
      EVENT_CATEGORY = 'VulnerabilityScanning::AdvisoryScanner'
      EVENT_ACTION = 'global_scan'
      EVENT_LABEL = 'secure_cvs'

      def initialize(advisory:, start_time:, end_time:, counts:)
        @advisory = advisory
        @start_time = start_time
        @end_time = end_time
        @counts = counts
      end

      def execute
        context = SnowplowTracker::SelfDescribingJson.new(CVS_SCAN_SCHEMA_URL, data_to_track)
        ::Gitlab::Tracking.event(
          EVENT_CATEGORY,
          EVENT_ACTION,
          context: [context],
          label: EVENT_LABEL
        )
      end

      private

      attr_reader :advisory, :counts, :start_time, :end_time

      def data_to_track
        {
          advisory_id: advisory.id,
          advisory_xid: advisory.advisory_xid,
          source_xid: advisory.source_xid,
          start_time: start_time,
          end_time: end_time,
          counts: {
            possibly_affected_projects: counts[:possibly_affected_projects],
            known_affected_projects: counts[:known_affected_projects],
            possibly_affected_sbom_occurrences: counts[:possibly_affected_sbom_occurrences],
            known_affected_sbom_occurrences: counts[:known_affected_sbom_occurrences],
            sbom_occurrences_semver_dialects_errors_count: counts[:sbom_occurrences_semver_dialects_errors_count]
          }
        }
      end
    end
  end
end
