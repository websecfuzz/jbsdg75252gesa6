# frozen_string_literal: true

module Gitlab
  module Graphql
    module Aggregations
      module VulnerabilityStatistics
        class LazyAggregate < BaseLazyAggregate
          attr_reader :vulnerable

          def initialize(query_ctx, vulnerable, filter: nil, include_subgroups: false)
            @vulnerable = vulnerable.respond_to?(:sync) ? vulnerable.sync : vulnerable
            @include_subgroups = include_subgroups
            @filter = filter

            super(query_ctx, vulnerable)
          end

          private

          def initial_state
            {
              pending_vulnerables: Hash.new { |h, k| h[k] = Set.new },
              loaded_objects: Hash.new { |h, k| h[k] = {} }
            }
          end

          def result
            @lazy_state[:loaded_objects][key][@vulnerable]
          end

          def queued_objects
            @lazy_state[:pending_vulnerables][key]
          end

          def load_queued_records
            @lazy_state[:pending_vulnerables].each do |(include_subgroups, filter), pending_vulnerables|
              next if pending_vulnerables.blank?

              key = [include_subgroups, filter]
              grades = ::Vulnerabilities::ProjectsGrade.grades_for(pending_vulnerables, filter: filter, include_subgroups: include_subgroups)

              pending_vulnerables.each do |vulnerable|
                @lazy_state[:loaded_objects][key][vulnerable] = grades[vulnerable]
              end

              @lazy_state[:pending_vulnerables][key].clear
            end
          end

          def key
            [@include_subgroups, @filter]
          end
        end
      end
    end
  end
end
