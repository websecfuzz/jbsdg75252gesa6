# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Vulnerabilities::AdvancedVulnerabilityManagementPolicy, :elastic_helpers, feature_category: :vulnerability_management do
  describe 'access_advanced_vulnerability_management' do
    let_it_be(:developer) { create(:user) }
    let_it_be(:guest) { create(:user) }
    let_it_be(:project) { create(:project) }
    let_it_be(:group) { create(:group) }

    before_all do
      project.add_developer(developer)
      project.add_guest(guest)
      group.add_developer(developer)
      group.add_guest(guest)
    end

    shared_examples 'vulnerability management permissions' do |expected_result|
      before do
        stub_licensed_features(security_dashboard: true)
      end

      context 'when all conditions are met' do
        before do
          allow(::Search::Elastic::VulnerabilityIndexingHelper).to receive(
            :vulnerability_indexing_allowed?).and_return(true)

          set_elasticsearch_migration_to(:re_introduce_backfill_vulnerabilities, including: true)
        end

        if expected_result
          it { is_expected.to be_allowed(:access_advanced_vulnerability_management) }
        else
          it { is_expected.to be_disallowed(:access_advanced_vulnerability_management) }
        end

        context "when advanced vulnerability management feature flag is disabled" do
          before do
            stub_feature_flags(advanced_vulnerability_management: false)
          end

          it { is_expected.to be_disallowed(:access_advanced_vulnerability_management) }
        end
      end

      context 'when vulnerability indexing is not allowed' do
        before do
          allow(::Search::Elastic::VulnerabilityIndexingHelper).to receive(
            :vulnerability_indexing_allowed?).and_return(false)
          set_elasticsearch_migration_to(:re_introduce_backfill_vulnerabilities, including: true)
        end

        it { is_expected.to be_disallowed(:access_advanced_vulnerability_management) }
      end

      context 'when vulnerability backfill migration is not completed' do
        before do
          allow(::Search::Elastic::VulnerabilityIndexingHelper).to receive(
            :vulnerability_indexing_allowed?).and_return(true)
          set_elasticsearch_migration_to(:re_introduce_backfill_vulnerabilities, including: false)
        end

        it { is_expected.to be_disallowed(:access_advanced_vulnerability_management) }
      end

      context 'when both vulnerability indexing and migration are disabled' do
        before do
          allow(::Search::Elastic::VulnerabilityIndexingHelper).to receive(
            :vulnerability_indexing_allowed?).and_return(false)
          set_elasticsearch_migration_to(:re_introduce_backfill_vulnerabilities, including: false)
        end

        it { is_expected.to be_disallowed(:access_advanced_vulnerability_management) }
      end
    end

    context 'when the subject is a project' do
      subject(:project_policy) { ProjectPolicy.new(user, project) }

      context 'when the user is guest' do
        let(:user) { guest }

        include_examples 'vulnerability management permissions', false
      end

      context 'when the user is developer' do
        let(:user) { developer }

        include_examples 'vulnerability management permissions', true
      end
    end

    context 'when the subject is a group' do
      subject(:group_policy) { GroupPolicy.new(user, group) }

      context 'when the user is guest' do
        let(:user) { guest }

        include_examples 'vulnerability management permissions', false
      end

      context 'when the user is developer' do
        let(:user) { developer }

        include_examples 'vulnerability management permissions', true
      end
    end
  end
end
