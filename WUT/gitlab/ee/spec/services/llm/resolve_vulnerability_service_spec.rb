# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Llm::ResolveVulnerabilityService, :saas, feature_category: :vulnerability_management do
  describe '#execute' do
    include_context 'in llm vulnerability service execute' do
      let(:ability_name) { :resolve_vulnerability_with_ai }
    end

    before do
      allow(Llm::CompletionWorker).to receive(:perform_async)
      allow(user).to receive(:allowed_to_use?).with(:resolve_vulnerability).and_return(true)
    end

    context 'when the user is permitted to resolve the vulnerability' do
      before_all do
        # Llm::BaseService checks for membership to parent group
        project.add_maintainer(user)
      end

      let(:resource) { vulnerability }
      let(:action_name) { :resolve_vulnerability }
      let(:content) { 'Resolve vulnerability' }
      let(:allowed) { true }

      it_behaves_like 'schedules completion worker'
    end

    context 'when the user is not permitted to resolve the vulnerability' do
      let(:allowed) { false }

      it 'returns an error' do
        expect(subject.execute).to be_error

        expect(Llm::CompletionWorker).not_to have_received(:perform_async)
      end
    end
  end
end
