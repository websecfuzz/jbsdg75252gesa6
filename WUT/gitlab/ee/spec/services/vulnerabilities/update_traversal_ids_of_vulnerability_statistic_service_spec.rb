# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Vulnerabilities::UpdateTraversalIdsOfVulnerabilityStatisticService, feature_category: :vulnerability_management do
  describe '#execute' do
    let(:service_object) { described_class.new(project_id) }

    subject(:update_traversal_ids) { service_object.execute }

    context 'when there is no project with given id' do
      let(:project_id) { 0 }

      it 'does not raise an error' do
        expect { update_traversal_ids }.not_to raise_error
      end
    end

    context 'when there is a project with given id' do
      let(:project_id) { project.id }
      let_it_be(:project) { create(:project) }
      let_it_be(:vulnerability_statistic) { create(:vulnerability_statistic, project: project) }
      let_it_be(:old_namespace) { create(:namespace) }

      before do
        vulnerability_statistic.update_column(:traversal_ids, old_namespace.traversal_ids)
      end

      it 'changes the `traversal_ids` of vulnerability statistic record' do
        expect { update_traversal_ids }.to change { vulnerability_statistic.reload.traversal_ids }
          .from(old_namespace.traversal_ids).to(project.namespace.traversal_ids)
      end

      describe 'parallel execution' do
        include ExclusiveLeaseHelpers

        let(:lease_key) { "update_vulnerability_statistic_traversal_ids:projects:#{project_id}" }
        let(:lease_ttl) { 5.minutes }

        before do
          stub_const("#{described_class}::LEASE_TRY_AFTER", 0.01)
          stub_exclusive_lease_taken(lease_key, timeout: lease_ttl)
        end

        it 'does not permit parallel execution of the logic' do
          expect { update_traversal_ids }.to raise_error(Gitlab::ExclusiveLeaseHelpers::FailedToObtainLockError)
            .and not_change { vulnerability_statistic.reload.traversal_ids }.from(old_namespace.traversal_ids)
        end
      end
    end
  end
end
