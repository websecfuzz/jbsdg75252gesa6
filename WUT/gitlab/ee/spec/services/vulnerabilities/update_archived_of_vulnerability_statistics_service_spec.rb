# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Vulnerabilities::UpdateArchivedOfVulnerabilityStatisticsService, feature_category: :vulnerability_management do
  describe '.execute' do
    it 'instantiates a new service object and calls execute' do
      expect_next_instance_of(described_class, :project_id) do |instance|
        expect(instance).to receive(:execute)
      end

      described_class.execute(:project_id)
    end
  end

  describe '#execute' do
    let(:service_object) { described_class.new(project_id) }

    subject(:update_archived) { service_object.execute }

    context 'when a project is not found for the given id' do
      let(:project_id) { 0 }

      it 'does not raise an error' do
        expect { update_archived }.not_to raise_error
      end
    end

    context 'when a project is found for the given id' do
      let(:project_id) { project.id }

      let_it_be_with_reload(:project) { create(:project) }

      context 'when there is no statistic record for the project' do
        it 'does not raise an exception' do
          expect { update_archived }.not_to raise_error
        end
      end

      context 'when there is a statistic record for the project' do
        let!(:vulnerability_statistic) { create(:vulnerability_statistic, project: project) }

        context 'when the project is archived' do
          before do
            project.update!(archived: true)
          end

          it 'sets the vulnerability statistic record to also be archived' do
            expect { update_archived }
              .to change { vulnerability_statistic.reload.archived }.from(false).to(true)
          end
        end

        context 'when the project is unarchived' do
          before do
            vulnerability_statistic.update!(archived: true)
            project.update!(archived: false)
          end

          it 'sets the vulnerability statistic record to also not be archived' do
            expect { update_archived }
              .to change { vulnerability_statistic.reload.archived }.from(true).to(false)
          end
        end

        context 'when the project and vulnerability archived state mismatch' do
          before do
            vulnerability_statistic.update!(archived: true)
            project.update!(archived: true)
          end

          it 'sets the vulnerability statistic record to match the state of the project' do
            expect { update_archived }
              .not_to change { vulnerability_statistic.reload.archived }
          end
        end

        describe 'parallel execution' do
          include ExclusiveLeaseHelpers

          context 'when the same lease key has already been taken by an already running job' do
            let(:lease_key) { "update_vulnerability_statistic_archived:projects:#{project_id}" }
            let(:lease_ttl) { 5.minutes }

            before do
              stub_const("#{described_class}::LEASE_TRY_AFTER", 0.01)
              stub_exclusive_lease_taken(lease_key, timeout: lease_ttl)
            end

            it 'does not permit parallel execution of the logic' do
              expect { update_archived }.to raise_error(Gitlab::ExclusiveLeaseHelpers::FailedToObtainLockError)
                .and not_change { vulnerability_statistic.reload.archived }.from(false)
            end
          end
        end
      end
    end
  end
end
