# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Vulnerabilities::UpdateArchivedOfVulnerabilityReadsService, feature_category: :vulnerability_management do
  describe '.execute' do
    it 'instantiates a new service object and calls execute' do
      expect_next_instance_of(described_class, :project_id) do |instance|
        expect(instance).to receive(:execute)
      end

      described_class.execute(:project_id)
    end
  end

  describe '#execute' do
    let(:service_object) { described_class.new(project_id) }

    subject(:update_archived) { service_object.execute }

    context 'when a project is not found for the given id' do
      let(:project_id) { 0 }

      it 'does not raise an error' do
        expect { update_archived }.not_to raise_error
      end
    end

    context 'when a project is found for the given id' do
      let(:project_id) { project.id }

      let_it_be_with_reload(:project) { create(:project) }
      let!(:vulnerability_read) { create(:vulnerability_read, project: project) }

      context 'when the project is archived' do
        before do
          project.update!(archived: true)
        end

        it_behaves_like 'sync vulnerabilities changes to ES' do
          let(:expected_vulnerabilities) { vulnerability_read }

          subject { service_object.execute }
        end

        it 'sets the vulnerability read record to also be archived' do
          expect { update_archived }
            .to change { vulnerability_read.reload.archived }.from(false).to(true)
        end
      end

      context 'when the project is unarchived' do
        before do
          vulnerability_read.update!(archived: true)
          project.update!(archived: false)
        end

        it 'sets the vulnerability read record to also not be archived' do
          expect { update_archived }
            .to change { vulnerability_read.reload.archived }.from(true).to(false)
        end
      end

      context 'when the project and vulnerability archived state mismatch' do
        before do
          vulnerability_read.update!(archived: true)
          project.update!(archived: true)
        end

        it 'sets the vulnerability read record to match the state of the project' do
          expect { update_archived }
            .not_to change { vulnerability_read.reload.archived }
        end
      end

      describe 'parallel execution' do
        include ExclusiveLeaseHelpers

        context 'when the same lease key has already been taken by an already running job' do
          let(:lease_key) { "update_vulnerability_reads_archived:projects:#{project_id}" }
          let(:lease_ttl) { 5.minutes }

          before do
            stub_const("#{described_class}::LEASE_TRY_AFTER", 0.01)
            stub_exclusive_lease_taken(lease_key, timeout: lease_ttl)
          end

          it 'does not permit parallel execution of the logic' do
            expect { update_archived }.to raise_error(Gitlab::ExclusiveLeaseHelpers::FailedToObtainLockError)
              .and not_change { vulnerability_read.reload.archived }.from(false)
          end
        end
      end

      describe 'batching over records' do
        let!(:other_vulnerability_read) { create(:vulnerability_read, project: project) }
        let(:sql_queries) { ActiveRecord::QueryRecorder.new { update_archived }.log }
        let(:update_queries_count) { sql_queries.count { |query| query.start_with?('UPDATE') } }

        before do
          stub_const("#{described_class}::BATCH_SIZE", 1)
        end

        it 'runs the update query in batches' do
          expect(update_queries_count).to be(2)
        end
      end
    end
  end
end
