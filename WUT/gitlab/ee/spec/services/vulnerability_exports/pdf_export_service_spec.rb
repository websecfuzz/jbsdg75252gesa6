# frozen_string_literal: true

require 'spec_helper'

RSpec.describe VulnerabilityExports::PdfExportService, feature_category: :vulnerability_management do
  subject(:service) { described_class.new(vulnerability_export) }

  let_it_be(:user) { create(:user) }

  let(:pdf_file_size) { 27 }

  def expected_filename(exportable)
    "#{exportable.full_path.parameterize}_vulnerabilities_#{Time.current.utc.strftime('%FT%H%M')}.pdf"
  end

  shared_context 'for stub PDF generation and file handling' do
    before do
      allow(vulnerability_export).to receive(:send_completion_email!)

      allow(Prawn::Document).to receive(:generate).and_wrap_original do |_orig, file_path, &_block|
        FileUtils.mkdir_p(File.dirname(file_path))
        File.write(file_path, "x" * pdf_file_size)
      end
    end

    after do
      FileUtils.rm_f(fake_pdf_path)
    end
  end

  context "when exportable is a project", :clean_gitlab_redis_shared_state do
    let_it_be(:project) { create(:project) }

    let(:vulnerability_export) do
      create(:vulnerability_export, :created, :pdf, author: user, exportable: project)
    end

    let(:filename) { expected_filename(project) }
    let(:fake_pdf_path) { Rails.root.join(filename) }

    include_context 'for stub PDF generation and file handling'

    describe '#export' do
      it 'attaches the generated file to the export' do
        expect { service.export }.to change { vulnerability_export.file.blank? }.from(true).to(false)
      end

      it 'sends an email' do
        service.export

        expect(vulnerability_export).to have_received(:send_completion_email!).exactly(:once)
      end

      it 'triggers an internal event' do
        expect { service.export }.to trigger_internal_events('export_pdf_security_dashboard').with(
          namespace: project.namespace,
          project: project,
          user: user,
          additional_properties: {
            label: 'export_pdf_security_dashboard_project',
            property: 'success',
            file_size: pdf_file_size
          }
        ).and increment_usage_metrics(
          'redis_hll_counters.count_distinct_project_id_from_export_pdf_security_dashboard_monthly',
          'redis_hll_counters.count_distinct_project_id_from_export_pdf_security_dashboard_weekly',
          'counts.count_total_export_pdf_security_dashboard_monthly',
          'counts.count_total_export_pdf_security_dashboard_weekly',
          'counts.count_total_export_pdf_security_dashboard'
        ).and not_increment_usage_metrics(
          'redis_hll_counters.count_distinct_group_id_from_export_pdf_security_dashboard_monthly',
          'redis_hll_counters.count_distinct_group_id_from_export_pdf_security_dashboard_weekly'
        )
      end

      context 'when an error occurs during PDF generation' do
        before do
          allow(Prawn::Document).to receive(:generate).and_raise(StandardError, 'boom!')
        end

        it 'fails the export and re-raises the error' do
          expect { service.export }.to raise_error(StandardError, 'boom!')
          expect(vulnerability_export.reload.failed?).to be true
          expect(vulnerability_export).not_to have_received(:send_completion_email!)
        end

        it 'triggers an internal error event and increments metrics' do
          expect do
            service.export
          end.to(
            raise_error(StandardError)
              .and(
                trigger_internal_events('export_pdf_security_dashboard').with(
                  namespace: project.namespace,
                  project: project,
                  user: user,
                  additional_properties: {
                    label: 'export_pdf_security_dashboard_project',
                    property: 'error',
                    file_size: 0
                  }
                )
              ).and(
                increment_usage_metrics(
                  'redis_hll_counters.count_distinct_project_id_from_export_pdf_security_dashboard_monthly',
                  'redis_hll_counters.count_distinct_project_id_from_export_pdf_security_dashboard_weekly',
                  'counts.count_total_export_pdf_security_dashboard_monthly',
                  'counts.count_total_export_pdf_security_dashboard_weekly',
                  'counts.count_total_export_pdf_security_dashboard'
                )
              ).and(
                not_increment_usage_metrics(
                  'redis_hll_counters.count_distinct_group_id_from_export_pdf_security_dashboard_monthly',
                  'redis_hll_counters.count_distinct_group_id_from_export_pdf_security_dashboard_weekly'
                )
              )
          )
        end
      end
    end
  end

  context "when exportable is a group", :clean_gitlab_redis_shared_state do
    let_it_be(:group) { create(:group) }

    let(:vulnerability_export) do
      create(:vulnerability_export, :created, :pdf, author: user, exportable: group)
    end

    let(:filename) { expected_filename(group) }
    let(:fake_pdf_path) { Rails.root.join(filename) }

    include_context 'for stub PDF generation and file handling'

    describe '#export' do
      it 'attaches the generated file to the export' do
        expect { service.export }.to change { vulnerability_export.file.blank? }.from(true).to(false)
      end

      it 'sends an email' do
        service.export

        expect(vulnerability_export).to have_received(:send_completion_email!).once
      end

      it 'triggers an internal event' do
        expect { service.export }.to trigger_internal_events('export_pdf_security_dashboard').with(
          namespace: group,
          project: nil,
          user: user,
          additional_properties: {
            label: 'export_pdf_security_dashboard_group',
            property: 'success',
            file_size: pdf_file_size
          }
        ).and increment_usage_metrics(
          'redis_hll_counters.count_distinct_group_id_from_export_pdf_security_dashboard_monthly',
          'redis_hll_counters.count_distinct_group_id_from_export_pdf_security_dashboard_weekly',
          'counts.count_total_export_pdf_security_dashboard_weekly',
          'counts.count_total_export_pdf_security_dashboard'
        ).and not_increment_usage_metrics(
          'redis_hll_counters.count_distinct_project_id_from_export_pdf_security_dashboard_monthly',
          'redis_hll_counters.count_distinct_project_id_from_export_pdf_security_dashboard_weekly'
        )
      end

      context 'when an error occurs during PDF generation' do
        before do
          allow(Prawn::Document).to receive(:generate).and_raise(StandardError, 'boom!')
        end

        it 'fails the export and re-raises the error' do
          expect { service.export }.to raise_error(StandardError, 'boom!')
          expect(vulnerability_export.reload.failed?).to be true
          expect(vulnerability_export).not_to have_received(:send_completion_email!)
        end

        it 'triggers an internal error event and increments metrics' do
          expect do
            service.export
          end.to(
            raise_error(StandardError)
              .and(
                trigger_internal_events('export_pdf_security_dashboard').with(
                  namespace: group,
                  project: nil,
                  user: user,
                  additional_properties: {
                    label: 'export_pdf_security_dashboard_group',
                    property: 'error',
                    file_size: 0
                  }
                )
              )
              .and(
                increment_usage_metrics(
                  'redis_hll_counters.count_distinct_group_id_from_export_pdf_security_dashboard_monthly',
                  'redis_hll_counters.count_distinct_group_id_from_export_pdf_security_dashboard_weekly',
                  'counts.count_total_export_pdf_security_dashboard_monthly',
                  'counts.count_total_export_pdf_security_dashboard_weekly',
                  'counts.count_total_export_pdf_security_dashboard'
                )
              )
              .and(
                not_increment_usage_metrics(
                  'redis_hll_counters.count_distinct_project_id_from_export_pdf_security_dashboard_monthly',
                  'redis_hll_counters.count_distinct_project_id_from_export_pdf_security_dashboard_weekly'
                )
              )
          )
        end
      end
    end
  end
end
