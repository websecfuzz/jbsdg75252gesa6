# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Security::Ingestion::Tasks::IngestVulnerabilityReads, feature_category: :vulnerability_management do
  let_it_be(:pipeline) { create(:ci_pipeline) }
  let_it_be(:location) { create(:ci_reports_security_locations_sast, start_line: 29, end_line: 29) }
  let_it_be(:scanner) { build(:ci_reports_security_scanner, external_id: 'scanner', name: 'Scanner') }

  let_it_be(:ci_reports_security_identifier) do
    create(:ci_reports_security_identifier, external_id: 'owasp',
      external_type: 'A1:2017-Injection')
  end

  let_it_be(:ci_reports_security_finding) do
    create(:ci_reports_security_finding, identifiers: [ci_reports_security_identifier],
      location: location, scanner: scanner)
  end

  let_it_be(:finding_maps) { [create(:finding_map, report_finding: ci_reports_security_finding)] }

  let!(:update_service_double) do
    instance_double(Security::Ingestion::Tasks::IngestVulnerabilityReads::Update,
      execute: true)
  end

  let_it_be(:ingest_service) { described_class.new(pipeline, finding_maps) }

  describe '#execute' do
    before do
      allow(Security::Ingestion::Tasks::IngestVulnerabilityReads::Update)
        .to receive(:new).with(pipeline, finding_maps).and_return(update_service_double)
    end

    it 'calls the update service' do
      expect(update_service_double).to receive(:execute)

      ingest_service.execute
    end

    it 'returns finding maps' do
      expect(ingest_service.execute).to eq(finding_maps)
    end
  end
end
