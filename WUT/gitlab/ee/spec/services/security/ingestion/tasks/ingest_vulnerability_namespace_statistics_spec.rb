# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Security::Ingestion::Tasks::IngestVulnerabilityNamespaceStatistics, feature_category: :vulnerability_management do
  describe '#execute' do
    let_it_be(:pipeline) { create(:ci_pipeline) }
    let_it_be_with_refind(:project) { pipeline.project }
    let_it_be(:security_finding_1) { create(:security_finding, severity: :critical) }
    let_it_be(:security_finding_2) { create(:security_finding, severity: :medium) }
    let_it_be(:security_finding_3) { create(:security_finding, severity: :low) }
    let_it_be(:finding_map_1) do
      create(:finding_map, :new_record,
        security_finding: security_finding_1, pipeline: pipeline)
    end

    let_it_be(:finding_map_2) do
      create(:finding_map, :new_record,
        security_finding: security_finding_2, pipeline: pipeline)
    end

    let_it_be(:finding_map_3) do
      create(:finding_map, :with_finding,
        security_finding: security_finding_3, pipeline: pipeline)
    end

    let_it_be(:other_project) { create(:project, archived: true) }
    let_it_be(:other_pipeline) { create(:ci_pipeline, project: other_project) }
    let_it_be(:other_security_finding_1) { create(:security_finding, severity: :critical) }
    let_it_be(:other_security_finding_2) { create(:security_finding, severity: :medium) }
    let_it_be(:other_security_finding_3) { create(:security_finding, severity: :low) }
    let_it_be(:other_finding_map_1) do
      create(:finding_map, :new_record,
        security_finding: other_security_finding_1, pipeline: other_pipeline)
    end

    let_it_be(:other_finding_map_2) do
      create(:finding_map, :new_record,
        security_finding: other_security_finding_2, pipeline: other_pipeline)
    end

    let_it_be(:other_finding_map_3) do
      create(:finding_map, :with_finding,
        security_finding: other_security_finding_3, pipeline: other_pipeline)
    end

    subject(:ingest_namespace_statistics) { described_class.new(pipeline, finding_maps).execute }

    context 'when no finding maps exist' do
      let(:finding_maps) { [] }

      it 'does not call the update service' do
        expect(Vulnerabilities::NamespaceStatistics::UpdateService).not_to receive(:execute)
        ingest_namespace_statistics
      end
    end

    context 'when finding maps exist without new vulnerabilities' do
      let(:finding_maps) { [finding_map_3, other_finding_map_3] }

      it 'does not call the update service' do
        expect(Vulnerabilities::NamespaceStatistics::UpdateService).not_to receive(:execute)
        ingest_namespace_statistics
      end
    end

    context 'when finding maps exist with new vulnerabilities' do
      let(:finding_maps) do
        [
          finding_map_1,
          finding_map_2,
          finding_map_3,
          other_finding_map_1,
          other_finding_map_2,
          other_finding_map_3
        ]
      end

      it 'calls the update service with the correct namespace diffs' do
        expected_project_namespace_diff = {
          "namespace_id" => project.namespace.id,
          "traversal_ids" => "{#{project.namespace.traversal_ids.join(', ')}}",
          "total" => 2,
          "critical" => 1,
          "high" => 0,
          "medium" => 1,
          "low" => 0,
          "unknown" => 0,
          "info" => 0
        }

        expected_other_project_namespace_diff = {
          "namespace_id" => other_project.namespace.id,
          "traversal_ids" => "{#{other_project.namespace.traversal_ids.join(', ')}}",
          "total" => 2,
          "critical" => 1,
          "high" => 0,
          "medium" => 1,
          "low" => 0,
          "unknown" => 0,
          "info" => 0
        }

        expected_namespace_diffs = [
          expected_project_namespace_diff,
          expected_other_project_namespace_diff
        ]

        expect(Vulnerabilities::NamespaceStatistics::UpdateService).to receive(:execute) do |namespace_diffs|
          # Compare arrays regardless of order
          expect(namespace_diffs).to match_array(expected_namespace_diffs)
        end

        ingest_namespace_statistics
      end
    end
  end
end
