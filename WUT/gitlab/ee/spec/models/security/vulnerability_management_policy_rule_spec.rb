# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Security::VulnerabilityManagementPolicyRule, feature_category: :security_policy_management do
  it_behaves_like 'policy rule' do
    let(:rule_hash) { build(:vulnerability_management_policy)[:rules].first }
    let(:policy_type) { :vulnerability_management_policy }
  end

  describe 'associations' do
    it { is_expected.to belong_to(:security_policy) }
  end

  describe 'validations' do
    describe 'content' do
      subject(:rule) { build(:vulnerability_management_policy_rule, trait) }

      context 'when no_longer_detected' do
        let(:trait) { :no_longer_detected }

        it { is_expected.to be_valid }
      end
    end
  end

  describe '#match?' do
    def severity_wildcard_should_match_all_severities
      ::Enums::Vulnerability.severity_levels.keys.map do |severity|
        [['sast'], [], :sast, severity, true]
      end
    end

    def scanner_wildcard_should_match_all_scanners
      ::Enums::Vulnerability.report_types.keys.map do |report_type|
        [[], ['critical'], report_type, 'critical', true]
      end
    end

    def should_match_if_partials_match
      [
        [%w[dependency_scanning container_scanning], %w[info low], :dependency_scanning, :info, true],
        [%w[dependency_scanning container_scanning], %w[info low], :dependency_scanning, :low, true],
        [%w[dependency_scanning container_scanning], %w[info low], :container_scanning, :info, true],
        [%w[dependency_scanning container_scanning], %w[info low], :container_scanning, :low, true]
      ]
    end

    def should_not_match_if_partials_dont_match
      [
        [%w[dependency_scanning container_scanning], %w[info low], :sast, :info, false],
        [%w[dependency_scanning container_scanning], %w[info low], :dependency_scanning, :critical, false],
        [%w[dependency_scanning container_scanning], %w[info low], :sast, :critical, false]
      ]
    end

    where(:policy_scanners, :policy_severities, :vulnerability_report_type, :vulnerability_severity, :expected) do
      severity_wildcard_should_match_all_severities +
        scanner_wildcard_should_match_all_scanners +
        should_match_if_partials_match +
        should_not_match_if_partials_dont_match
    end

    with_them do
      specify do
        rule = build_stubbed(:vulnerability_management_policy_rule,
          type: :no_longer_detected,
          content: { 'scanners' => policy_scanners, 'severity_levels' => policy_severities }
        )

        vulnerability = build_stubbed(:vulnerability,
          report_type: vulnerability_report_type,
          severity: vulnerability_severity
        )

        expect(rule.match?(vulnerability)).to eq(expected)
      end
    end
  end
end
