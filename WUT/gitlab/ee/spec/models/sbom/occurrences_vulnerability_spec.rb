# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Sbom::OccurrencesVulnerability, type: :model, feature_category: :dependency_management do
  describe 'associations' do
    it { is_expected.to belong_to(:occurrence).required }
    it { is_expected.to belong_to(:vulnerability).required }
  end

  describe '.for_occurrence_ids' do
    let_it_be(:vulnerability) { create(:vulnerability) }
    let_it_be(:occurrences_vulnerability) do
      create(:sbom_occurrences_vulnerability, vulnerability: vulnerability)
    end

    let_it_be(:occurrences_vulnerability_2) do
      create(:sbom_occurrences_vulnerability, vulnerability: vulnerability)
    end

    subject { described_class.for_occurrence_ids(occurrences_vulnerability.sbom_occurrence_id) }

    it { is_expected.to contain_exactly occurrences_vulnerability }
  end

  describe '.ordered_by_vulnerability' do
    let_it_be(:vulnerability) { create(:vulnerability) }
    let_it_be(:occurrences_vulnerability) do
      create(:sbom_occurrences_vulnerability, vulnerability: vulnerability)
    end

    let_it_be(:vulnerability_2) { create(:vulnerability) }
    let_it_be(:occurrences_vulnerability_2) do
      create(:sbom_occurrences_vulnerability, vulnerability: vulnerability_2)
    end

    subject { described_class.ordered_by_vulnerability }

    it { is_expected.to contain_exactly(occurrences_vulnerability, occurrences_vulnerability_2) }
  end

  context 'with loose foreign key on sbom_occurrences_vulnerabilities.project_id' do
    it_behaves_like 'cleanup by a loose foreign key' do
      let_it_be(:parent) { create(:project) }
      let_it_be(:model) { create(:sbom_occurrences_vulnerability, project: parent) }
    end
  end
end
