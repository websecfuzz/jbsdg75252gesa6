# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Security::VulnerabilityElasticCountOverTimeFinder, :elastic_delete_by_query, :sidekiq_inline, feature_category: :vulnerability_management do
  let_it_be_with_reload(:group) { create(:group) }
  let_it_be_with_reload(:project) { create(:project, namespace: group) }

  let_it_be(:vulnerabilities) do
    dates = ['2023-01-01T00:00:00Z', '2023-01-02T00:00:00Z', '2023-01-03T00:00:00Z']
    severity_report_pairs = [
      { severity: :low, report_type: :sast },
      { severity: :medium, report_type: :dast },
      { severity: :high, report_type: :dependency_scanning }
    ]

    dates.flat_map do |date|
      severity_report_pairs.map do |config|
        create(
          :vulnerability,
          :with_finding,
          severity: config[:severity],
          report_type: config[:report_type],
          project: project,
          created_at: date
        )
      end
    end
  end

  let(:params) do
    { created_after: '2023-01-01T00:00:00Z', created_before: '2023-01-04T00:00:00Z', group_by: group_by }
  end

  let(:vulnerable) { group }

  subject(:execute) { described_class.new(vulnerable, params).execute }

  before do
    stub_ee_application_setting(elasticsearch_search: true, elasticsearch_indexing: true)
  end

  describe '#execute' do
    before do
      Elastic::ProcessBookkeepingService.track!(*vulnerabilities)
      ensure_elasticsearch_index!
    end

    context "when grouping by severity" do
      let(:group_by) { 'severity' }

      it "fetches count by each severity" do
        is_expected.to eq([
          {
            "date" => "2023-01-01T00:00:00.000Z",
            :by_severity => [
              { "count" => 1, "severity" => "LOW" },
              { "count" => 1, "severity" => "MEDIUM" },
              { "count" => 1, "severity" => "HIGH" }
            ]
          },
          {
            "date" => "2023-01-02T00:00:00.000Z",
            :by_severity => [
              { "count" => 1, "severity" => "LOW" },
              { "count" => 1, "severity" => "MEDIUM" },
              { "count" => 1, "severity" => "HIGH" }
            ]
          },
          {
            "date" => "2023-01-03T00:00:00.000Z",
            :by_severity => [
              { "count" => 1, "severity" => "LOW" },
              { "count" => 1, "severity" => "MEDIUM" },
              { "count" => 1, "severity" => "HIGH" }
            ]
          }
        ])
      end

      it_behaves_like 'a vulnerability elastic finder'
    end

    context "when grouping by report type" do
      let(:group_by) { 'report_type' }

      it "fetches count by each severity" do
        is_expected.to eq([
          {
            "date" => "2023-01-01T00:00:00.000Z",
            :by_report_type => [
              { "count" => 1, "report_type" => "SAST" },
              { "count" => 1, "report_type" => "DEPENDENCY_SCANNING" },
              { "count" => 1, "report_type" => "DAST" }
            ]
          },
          {
            "date" => "2023-01-02T00:00:00.000Z",
            :by_report_type => [
              { "count" => 1, "report_type" => "SAST" },
              { "count" => 1, "report_type" => "DEPENDENCY_SCANNING" },
              { "count" => 1, "report_type" => "DAST" }
            ]
          },
          {
            "date" => "2023-01-03T00:00:00.000Z",
            :by_report_type => [
              { "count" => 1, "report_type" => "SAST" },
              { "count" => 1, "report_type" => "DEPENDENCY_SCANNING" },
              { "count" => 1, "report_type" => "DAST" }
            ]
          }
        ])
      end

      it_behaves_like 'a vulnerability elastic finder'
    end
  end
end
