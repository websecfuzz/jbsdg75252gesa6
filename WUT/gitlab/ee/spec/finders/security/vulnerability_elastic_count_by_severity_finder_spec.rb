# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Security::VulnerabilityElasticCountBySeverityFinder, :elastic_delete_by_query, :sidekiq_inline, feature_category: :vulnerability_management do
  let_it_be_with_reload(:project) { create(:project) }

  let_it_be(:low_severity_vulnerability) do
    create(
      :vulnerability,
      :with_finding, :with_issue_links, :with_merge_request_links,
      severity: :low,
      report_type: :sast,
      state: :detected,
      project: project
    )
  end

  let_it_be(:high_severity_vulnerability) do
    create(:vulnerability, :with_finding, resolved_on_default_branch: true, severity: :high,
      report_type: :dependency_scanning, state: :confirmed, project: project)
  end

  let_it_be(:medium_severity_vulnerability) do
    create(:vulnerability, :with_finding, severity: :medium, report_type: :dast, state: :dismissed,
      project: project)
  end

  let(:params) { {} }

  subject(:execute) { described_class.new(project, params).execute }

  before do
    stub_ee_application_setting(elasticsearch_search: true, elasticsearch_indexing: true)
  end

  describe '#execute' do
    before do
      Elastic::ProcessBookkeepingService.track!(
        low_severity_vulnerability,
        high_severity_vulnerability,
        medium_severity_vulnerability
      )
      ensure_elasticsearch_index!
    end

    it "fetches count by each severity" do
      is_expected.to eq("low" => 1, "medium" => 1, "high" => 1)
    end

    it_behaves_like 'a vulnerability elastic finder'
  end
end
