# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Search::Elastic::VulnerabilityManagementHelper, type: :concern, feature_category: :vulnerability_management do
  let_it_be(:dummy_class) do
    Class.new do
      include Search::Elastic::VulnerabilityManagementHelper

      def self.name
        'DummyClass'
      end
    end
  end

  let_it_be(:instance) { dummy_class.new }
  let_it_be(:project) { create(:project) }
  let_it_be(:namespace) { project.namespace }

  before do
    stub_ee_application_setting(elasticsearch_indexing: true)
  end

  describe '#delete_vulnerabilities_with_old_routing' do
    context 'when elasticsearch indexing is enabled' do
      it 'schedules a DeleteWorker job with the correct parameters' do
        allow(namespace).to receive(:elastic_namespace_ancestry).and_return(namespace.id)

        expect(::Search::Elastic::DeleteWorker).to receive(:perform_async).with(
          task: :delete_project_vulnerabilities,
          traversal_id: namespace.id,
          project_id: project.id
        )

        instance.send(:delete_vulnerabilities_with_old_routing, project)
      end
    end

    context 'when elasticsearch indexing is disabled' do
      before do
        stub_ee_application_setting(elasticsearch_indexing: false)
      end

      it 'does not schedule a DeleteWorker job' do
        expect(::Search::Elastic::DeleteWorker).not_to receive(:perform_async)

        instance.send(:delete_vulnerabilities_with_old_routing, project)
      end
    end
  end
end
