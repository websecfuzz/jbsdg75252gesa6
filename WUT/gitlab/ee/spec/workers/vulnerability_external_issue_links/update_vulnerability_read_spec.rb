# frozen_string_literal: true

require 'spec_helper'

RSpec.describe VulnerabilityExternalIssueLinks::UpdateVulnerabilityRead, type: :worker, feature_category: :vulnerability_management do
  let!(:vulnerability) { create(:vulnerability, :with_read) }
  let!(:vulnerability_read) { vulnerability.vulnerability_read }

  context "if a link was added" do
    let(:link_created_event) do
      Vulnerabilities::LinkToExternalIssueTrackerCreated.new(data: { vulnerability_id: vulnerability.id })
    end

    it_behaves_like 'subscribes to event' do
      let(:event) { link_created_event }
    end

    it 'updates the related Vulnerabilities::Read record' do
      expect(vulnerability_read.has_issues).to be_falsy

      consume_event(subscriber: described_class, event: link_created_event)

      expect(vulnerability_read.reload.has_issues).to be_truthy
    end
  end

  context "if a link was removed" do
    let(:existing_issue_link) do
      create(:vulnerabilities_external_issue_link, vulnerability: vulnerability, author: vulnerability.author)
    end

    let(:link_removed_event) do
      Vulnerabilities::LinkToExternalIssueTrackerRemoved.new(data: { vulnerability_id: vulnerability.id })
    end

    before do
      vulnerability_read.update!(has_issues: true)
    end

    it_behaves_like 'subscribes to event' do
      let(:event) { link_removed_event }
    end

    it 'updates the related Vulnerabilities::Read record' do
      expect(vulnerability_read.has_issues).to be_truthy

      consume_event(subscriber: described_class, event: link_removed_event)

      expect(vulnerability_read.reload.has_issues).to be_falsy
    end
  end
end
