# frozen_string_literal: true

require 'spec_helper'

RSpec.describe VulnerabilityExports::ExportWorker, type: :worker, feature_category: :vulnerability_management do
  let(:worker) { described_class.new }

  describe '#perform' do
    subject(:export_vulnerabilities) { worker.perform(vulnerability_export_id) }

    before do
      allow(VulnerabilityExports::ExportService).to receive(:export)
      allow(VulnerabilityExports::PdfExportService).to receive(:export)
      allow(Sidekiq.logger).to receive(:error)
    end

    shared_examples 'handles delegation to an underlying service' do |export_format|
      let(:vulnerability_export) { create(:vulnerability_export, :created, export_format.to_sym) }

      context 'when vulnerability export does not exist' do
        let(:vulnerability_export_id) { non_existing_record_id }

        it 'does not raise any error' do
          expect { export_vulnerabilities }.not_to raise_error
        end

        it "does not call #export on any services" do
          export_vulnerabilities

          expect(VulnerabilityExports::ExportService).not_to have_received(:export)
          expect(VulnerabilityExports::PdfExportService).not_to have_received(:export)
        end
      end

      context 'when vulnerability export exists' do
        let(:vulnerability_export_id) { vulnerability_export.id }

        it 'calls #export with the vulnerability_export object' do
          export_vulnerabilities

          expect(expected_delegation_service).to have_received(:export).with(vulnerability_export)
        end
      end
    end

    it_behaves_like 'handles delegation to an underlying service', :csv do
      let(:expected_delegation_service) { VulnerabilityExports::ExportService }
    end

    it_behaves_like 'handles delegation to an underlying service', :pdf do
      let(:expected_delegation_service) { VulnerabilityExports::PdfExportService }
    end

    context 'for a pdf export when the FF is disabled' do
      let(:vulnerability_export) { create(:vulnerability_export, :created, :pdf) }
      let(:vulnerability_export_id) { vulnerability_export.id }

      before do
        stub_feature_flags(vulnerabilities_pdf_export: false)
      end

      it "does not call #export on any services" do
        export_vulnerabilities

        expect(VulnerabilityExports::ExportService).not_to have_received(:export)
        expect(VulnerabilityExports::PdfExportService).not_to have_received(:export)
      end
    end
  end

  describe 'sidekiq_retries_exhausted callback' do
    let(:sidekiq_retry_handler) { Sidekiq::JobRetry.new(Sidekiq::Capsule.new("test", Sidekiq.default_configuration)) }
    let(:vulnerability_export) { create(:vulnerability_export, :created, :csv) }
    let(:default_job_payload) { { 'class' => described_class.name, 'args' => [vulnerability_export.id] } }

    subject(:run_job) do
      Gitlab::SidekiqSharding::Validator.allow_unrouted_sidekiq_calls do
        sidekiq_retry_handler.local(worker, job_payload.to_json, 'default') do
          raise 'Foo'
        end
      end
    end

    context 'when the max retry count is not reached' do
      let(:job_payload) { default_job_payload.merge('retry_count' => 1) }

      it 'does not mark the vulnerability export object as failed' do
        expect { run_job }.to raise_error(Sidekiq::JobRetry::Handled)
                          .and not_change { vulnerability_export.reload.failed? }.from(false)
      end
    end

    context 'when the max retry count is reached' do
      let(:job_payload) { default_job_payload.merge('retry_count' => 2) }

      it 'marks the vulnerability export object as failed' do
        expect { run_job }.to raise_error(Sidekiq::JobRetry::Handled)
                          .and change { vulnerability_export.reload.failed? }.from(false).to(true)
      end
    end
  end
end
