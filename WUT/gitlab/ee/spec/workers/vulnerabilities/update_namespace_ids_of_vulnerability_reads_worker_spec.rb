# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Vulnerabilities::UpdateNamespaceIdsOfVulnerabilityReadsWorker, feature_category: :vulnerability_management do
  describe '#perform' do
    let(:project_id) { Time.now.to_i }

    subject(:run_worker) { described_class.new.perform(project_id) }

    before do
      allow(Vulnerabilities::UpdateTraversalIdsOfVulnerabilityReadsService).to receive(:execute)
    end

    it 'calls the `Vulnerabilities::UpdateTraversalIdsOfVulnerabilityReadsService`' do
      run_worker

      expect(Vulnerabilities::UpdateTraversalIdsOfVulnerabilityReadsService).to have_received(:execute).with(project_id)
    end

    context 'when the service class raises `FailedToObtainLockError`' do
      let(:error) { Gitlab::ExclusiveLeaseHelpers::FailedToObtainLockError.new }

      before do
        allow(Vulnerabilities::UpdateTraversalIdsOfVulnerabilityReadsService).to receive(:execute).and_raise(error)
        allow(described_class).to receive(:perform_in)
      end

      it 'reschedules the job to run in 2 minutes' do
        run_worker

        expect(described_class).to have_received(:perform_in).with(2.minutes, project_id)
      end
    end
  end

  include_examples 'an idempotent worker' do
    let_it_be(:project) { create(:project) }
    let_it_be(:old_namespace) { create(:namespace) }
    let_it_be(:vulnerability_read) do
      create(:vulnerability_read, project: project, traversal_ids: old_namespace.traversal_ids)
    end

    let(:job_args) { project.id }

    it 'changes the `traversal_ids` of vulnerability read record' do
      subject

      expect(vulnerability_read.reload.traversal_ids).to eql(project.namespace.traversal_ids)
    end
  end
end
