# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Gitlab::BackgroundMigration::BackfillVulnerabilityNamespaceHistoricalStatistics, feature_category: :vulnerability_management do
  let(:migration_instance) do
    described_class.new(
      start_id: vulnerability_historical_statistics_table.minimum(:id),
      end_id: vulnerability_historical_statistics_table.maximum(:id),
      batch_table: :vulnerability_historical_statistics,
      batch_column: :id,
      sub_batch_size: 100,
      pause_ms: 0,
      connection: ApplicationRecord.connection
    )
  end

  let(:organizations_table) { table(:organizations) }
  let(:namespaces_table) { table(:namespaces) }
  let(:projects_table) { table(:projects) }
  let(:vulnerability_historical_statistics_table) { table(:vulnerability_historical_statistics) }
  let(:vulnerability_namespace_historical_statistics_table) { table(:vulnerability_namespace_historical_statistics) }

  let(:organization) { organizations_table.create!(name: 'organization', path: 'organization') }
  let(:root_group) do
    namespaces_table.create!(name: 'root-group', path: 'root-group', type: 'Group', organization_id: organization.id)
  end

  let(:group) do
    namespaces_table.create!(name: 'group', path: 'group', type: 'Group', organization_id: organization.id)
  end

  let(:sub_group) do
    namespaces_table.create!(name: 'sub-group', path: 'sub-group', type: 'Group', organization_id: organization.id)
  end

  let(:vulnerability_historical_statistics) { [] }

  before do
    # There is a bug in some background migration spec where the helpers attempt to create data using the wrong
    # database connection. As this migration has already run we should be safe to skip the spec.
    # Consult https://gitlab.com/gitlab-org/gitlab/-/merge_requests/180764 for more info.
    skip_if_multiple_databases_are_setup(:sec)

    root_group.update!(traversal_ids: [root_group.id])
    group.update!(traversal_ids: [root_group.id, group.id])
    sub_group.update!(traversal_ids: [root_group.id, group.id, sub_group.id])

    project_namespace_1 = namespaces_table.create!(name: 'project_1_ns', path: 'project_1',
      type: 'Project', organization_id: organization.id)
    project_namespace_2 = namespaces_table.create!(name: 'projects_2_ns', path: 'project_2',
      type: 'Project', organization_id: organization.id)
    project_namespace_3 = namespaces_table.create!(name: 'projects_3_ns', path: 'project_3',
      type: 'Project', organization_id: organization.id)
    project_namespace_4 = namespaces_table.create!(name: 'projects_4_ns', path: 'project_4',
      type: 'Project', organization_id: organization.id)

    projects_array = []
    projects_array << projects_table.create!(id: 1, name: "project_1", path: "project_1", namespace_id: root_group.id,
      project_namespace_id: project_namespace_1.id, organization_id: organization.id)
    projects_array << projects_table.create!(id: 2, name: "project_2", path: "project_2", namespace_id: group.id,
      project_namespace_id: project_namespace_2.id, organization_id: organization.id)
    projects_array << projects_table.create!(id: 3, name: "project_3", path: "project_3", namespace_id: sub_group.id,
      project_namespace_id: project_namespace_3.id, organization_id: organization.id)
    projects_array << projects_table.create!(id: 4, name: "project_4", path: "project_4", namespace_id: sub_group.id,
      project_namespace_id: project_namespace_4.id, organization_id: organization.id)

    2.times do |i|
      4.times do |j|
        vulnerability_historical_statistics << vulnerability_historical_statistics_table.create!(
          project_id: projects_array[j].id,
          critical: i + 1,
          medium: i + 1,
          total: (i + 1) * 2,
          letter_grade: Vulnerabilities::Statistic.letter_grades[:d],
          date: DateTime.parse("2024-01-0#{i + 1}"),
          created_at: DateTime.parse("2024-01-01-16:20:20"),
          updated_at: DateTime.parse("2024-01-01-16:20:25")
        )
      end
    end

    # for validating greater letter_grade is taken, set greater letter_grade value value for an arbitrary record
    vulnerability_historical_statistics.last.update!(letter_grade: Vulnerabilities::Statistic.letter_grades[:f])
    # for validating greater updated_at is taken, set greater date value for an arbitrary record
    vulnerability_historical_statistics.last.update!(updated_at: DateTime.parse("2024-01-01-16:20:50"))
  end

  subject(:perform_migration) { migration_instance.perform }

  it 'inserts aggregated data' do
    expect { perform_migration }.to change { vulnerability_namespace_historical_statistics_table.count }.from(0).to(6)
  end

  it 'creates one entry for each group namespace for each date' do
    perform_migration
    expect(vulnerability_namespace_historical_statistics_table
             .where(traversal_ids: root_group.traversal_ids).count).to eq(2)
    expect(vulnerability_namespace_historical_statistics_table
             .where(traversal_ids: group.traversal_ids).count).to eq(2)
    expect(vulnerability_namespace_historical_statistics_table
             .where(traversal_ids: sub_group.traversal_ids).count).to eq(2)
  end

  it 'sums the counters' do
    perform_migration
    expect(vulnerability_namespace_historical_statistics_table
             .where(traversal_ids: root_group.traversal_ids, date: "2024-01-01")
             .pick(:total, :critical, :medium, :letter_grade)).to match_array([2, 1, 1, 3])
    expect(vulnerability_namespace_historical_statistics_table
             .where(traversal_ids: root_group.traversal_ids, date: "2024-01-02")
             .pick(:total, :critical, :medium, :letter_grade)).to match_array([4, 2, 2, 3])

    expect(vulnerability_namespace_historical_statistics_table
             .where(traversal_ids: group.traversal_ids, date: "2024-01-01")
             .pick(:total, :critical, :medium, :letter_grade)).to match_array([2, 1, 1, 3])
    expect(vulnerability_namespace_historical_statistics_table
             .where(traversal_ids: group.traversal_ids, date: "2024-01-02")
             .pick(:total, :critical, :medium, :letter_grade)).to match_array([4, 2, 2, 3])

    expect(vulnerability_namespace_historical_statistics_table
             .where(traversal_ids: sub_group.traversal_ids, date: "2024-01-01")
             .pick(:total, :critical, :medium, :letter_grade)).to match_array([4, 2, 2, 3])
    expect(vulnerability_namespace_historical_statistics_table
             .where(traversal_ids: sub_group.traversal_ids, date: "2024-01-02")
             .pick(:total, :critical, :medium, :letter_grade)).to match_array([8, 4, 4, 4])
  end

  it 'saves timestamps' do
    perform_migration
    expect(vulnerability_namespace_historical_statistics_table
             .where(traversal_ids: root_group.traversal_ids, date: "2024-01-01")
             .pick(:created_at)).to eq(vulnerability_historical_statistics.first.created_at)

    expect(vulnerability_namespace_historical_statistics_table
             .where(traversal_ids: sub_group.traversal_ids, date: "2024-01-02")
             .pick(:updated_at)).to eq(vulnerability_historical_statistics.last.updated_at)
  end
end
