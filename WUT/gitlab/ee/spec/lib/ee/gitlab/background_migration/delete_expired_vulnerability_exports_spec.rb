# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Gitlab::BackgroundMigration::DeleteExpiredVulnerabilityExports, feature_category: :vulnerability_management do
  using RSpec::Parameterized::TableSyntax

  let(:users) { table(:users) }
  let(:namespaces) { table(:namespaces) }
  let(:projects) { table(:projects) }
  let(:organizations) { table(:organizations) }
  let(:vulnerability_exports) { table(:vulnerability_exports, database: :sec) }

  let!(:organization) { organizations.create!(name: 'test-org', path: 'test-org') }

  let!(:user) do
    users.create!(
      email: 'exporter@example.com',
      username: 'exporter',
      projects_limit: 10,
      organization_id: organization.id
    )
  end

  let!(:namespace) do
    namespaces.create!(
      name: 'gitlab-org',
      path: 'gitlab-org',
      type: 'Group',
      organization_id: organization.id
    )
  end

  let!(:project) { create_project('export-test', namespace) }

  let(:expired_time) { 25.hours.ago }

  let(:migration_args) do
    {
      start_id: vulnerability_exports.minimum(:id),
      end_id: vulnerability_exports.maximum(:id),
      batch_table: :vulnerability_exports,
      batch_column: :id,
      sub_batch_size: 100,
      pause_ms: 0,
      connection: ::SecApplicationRecord.connection
    }
  end

  subject(:perform_migration) { described_class.new(**migration_args).perform }

  where(:status, :should_be_deleted) do
    :created  | true
    :running  | true
    :finished | false
    :failed   | false
  end

  with_them do
    let!(:export) { create_export(status) }

    it "#{params[:should_be_deleted] ? 'deletes' : 'does not delete'} the export" do
      perform_migration

      expect(vulnerability_exports.where(id: export.id).exists?).to eq(!should_be_deleted)
    end
  end

  def create_export(status)
    attrs = {
      project_id: project.id,
      author_id: user.id,
      created_at: expired_time,
      organization_id: organization.id,
      expires_at: 1.day.from_now,
      format: 0,
      status: status
    }

    if status == :finished
      attrs[:file] = fixture_file_upload(
        'ee/spec/fixtures/vulnerabilities/exports/root-security-reports_vulnerabilities_2020-03-12T1235.csv'
      )
    end

    vulnerability_exports.create!(**attrs)
  end

  def create_project(name, namespace)
    project_namespace = namespaces.create!(
      name: name,
      path: name,
      type: 'Project',
      organization_id: namespace.organization_id
    )

    projects.create!(
      namespace_id: namespace.id,
      project_namespace_id: project_namespace.id,
      organization_id: namespace.organization_id,
      name: name,
      path: name,
      archived: false
    )
  end
end
