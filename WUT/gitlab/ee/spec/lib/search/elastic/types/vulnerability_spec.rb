# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Search::Elastic::Types::Vulnerability, feature_category: :vulnerability_management do
  let(:helper) { Gitlab::Elastic::Helper.default }
  let(:base_mappings) do
    [:type,
      :vulnerability_id,
      :created_at,
      :updated_at,
      :project_id,
      :scanner_id,
      :scanner_external_id,
      :report_type,
      :severity,
      :state,
      :has_issues,
      :resolved_on_default_branch,
      :uuid,
      :location_image,
      :cluster_agent_id,
      :casted_cluster_agent_id,
      :dismissal_reason,
      :has_merge_request,
      :has_remediations,
      :traversal_ids,
      :archived,
      :has_vulnerability_resolution,
      :auto_resolved,
      :identifier_names,
      :epss_scores,
      :reachability,
      :schema_version]
  end

  before do
    allow(Gitlab::Elastic::Helper).to receive(:default).and_return(helper)
  end

  describe '#index_name' do
    it 'returns correct environment based index name' do
      expect(described_class.index_name).to eq('gitlab-test-vulnerabilities')
    end
  end

  describe '#mappings' do
    let(:mappings) { described_class.mappings.to_hash[:properties] }
    let(:expected_dimensions) { described_class::VERTEX_TEXT_EMBEDDING_DIMENSION }

    it 'always contains base mappings' do
      expect(mappings.keys).to include(*base_mappings)
    end

    it 'does not contain vector embeddings' do
      expect(mappings.keys).not_to include(:embedding_0)
    end
  end

  describe '#settings' do
    let(:settings) { described_class.settings.to_hash[:index].keys }

    it 'always contains base settings' do
      expect(settings).to include(:number_of_shards)
    end
  end
end
