# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Search::Elastic::RecordProxy::Vulnerability, feature_category: :vulnerability_management do
  let_it_be(:project) { create(:project) }
  let_it_be(:vulnerability) { create(:vulnerability, :with_read, project: project) }
  let(:vulnerability_record) { vulnerability.vulnerability_read }

  describe 'inheritance' do
    it 'inherits from Search::Elastic::RecordProxy::Base' do
      expect(described_class.superclass).to eq(Search::Elastic::RecordProxy::Base)
    end
  end

  describe 'initialization' do
    it 'can be initialized with a vulnerability record' do
      proxy = described_class.new(vulnerability_record)
      expect(proxy.vulnerability_id).to eq(vulnerability.id)
      expect(proxy.project_id).to eq(project.id)
    end
  end

  describe '.create_with_enhancements' do
    let(:enhancements) { { reachability: 1 } }

    it 'creates a new proxy instance' do
      proxy = described_class.create_with_enhancements(vulnerability_record, enhancements)
      expect(proxy).to be_an_instance_of(described_class)
    end

    it 'delegates to the underlying record' do
      proxy = described_class.create_with_enhancements(vulnerability_record, enhancements)

      expect(proxy.vulnerability_id).to eq(vulnerability.id)
      expect(proxy.project_id).to eq(project.id)
    end

    it 'enhances the proxy with reachability data' do
      proxy = described_class.create_with_enhancements(vulnerability_record, enhancements)

      expect(proxy.reachability).to eq(1)
    end

    context 'with missing reachability in enhancements' do
      let(:enhancements) { {} }

      it 'sets reachability to nil when not provided' do
        proxy = described_class.create_with_enhancements(vulnerability_record, enhancements)

        expect(proxy.reachability).to be_nil
      end
    end
  end
end
