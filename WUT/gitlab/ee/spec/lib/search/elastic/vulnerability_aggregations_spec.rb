# frozen_string_literal: true

require 'spec_helper'

RSpec.describe ::Search::Elastic::VulnerabilityAggregations, feature_category: :vulnerability_management do
  let(:query_hash) { {} }

  describe '#by_severity_counts' do
    let(:options) { { count_by_severity: true } }

    it 'adds size and aggs to query_hash' do
      expect(described_class.by_severity_counts(query_hash: query_hash, options: options)).to eq({
        size: 0,
        aggs: {
          severity_counts: {
            terms: {
              field: "severity"
            }
          }
        }
      })
    end
  end

  describe '#vulnerabilities_over_time' do
    subject(:by_vulnerabilities_over_time) do
      described_class.by_vulnerabilities_over_time(query_hash: query_hash, options: options)
    end

    context "when group_by is set with valid value" do
      let(:group_by) { "severity" }
      let(:options) { { vulnerabilities_over_time: true, group_by: group_by } }

      it 'adds size and nested aggs to query_hash' do
        expect(by_vulnerabilities_over_time).to eq({
          size: 0,
          aggs: {
            vulnerabilities_over_time: {
              date_histogram: {
                field: "created_at",
                calendar_interval: "day",
                min_doc_count: 0
              },
              aggs: {
                by_severity: {
                  terms: {
                    field: group_by
                  }
                }
              }
            }
          }
        })
      end
    end

    context "when group_by is set with invalid value" do
      let(:group_by) { "dummy" }
      let(:options) { { vulnerabilities_over_time: true, group_by: group_by } }

      it 'adds size and nested aggs to query_hash' do
        expect { by_vulnerabilities_over_time }.to raise_exception(ArgumentError)
      end
    end
  end

  describe '.by_identifiers_search' do
    let(:options) { { partial_identifier_name: "cVE-2020-5247" } }

    it "adds size and aggs to query_hash" do
      expect(described_class.by_identifiers_search(query_hash: query_hash, options: options)).to eq({
        size: 0,
        aggs: {
          unique_identifiers: {
            terms: {
              field: "identifier_names.original",
              size: ::Vulnerabilities::Identifier::SEARCH_RESULTS_LIMIT,
              include: ".*(cve-2020-5247|CVE-2020-5247|cVE-2020-5247).*"
            }
          }
        }
      })
    end
  end
end
