# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Gitlab::VulnerabilityScanning::ContainerScanning::AffectedVersionRangeMatcher, feature_category: :vulnerability_management do
  using RSpec::Parameterized::TableSyntax

  describe 'affected?' do
    before do
      allow(SemverDialects).to receive(:parse_version).and_call_original
    end

    let_it_be(:purl_type) { 'deb' }
    let_it_be(:range) { '<5.0.0' }
    let_it_be(:version) { '1.0.0' }
    let_it_be(:distro) { 'debian 12' }
    let_it_be(:source_name) { 'debian' }
    let_it_be(:source_version) { '12.1' }
    let(:source) do
      build(:sbom_source, operating_system: { 'name' => source_name, 'version' => source_version },
        source_type: :container_scanning)
    end

    subject(:affected) { described_class.new(purl_type: purl_type, range: range).affected?(distro, source, version) }

    context 'when distro matches' do
      where(:given_distro, :given_source_name, :given_source_version) do
        'CBL-Mariner 1.0'                  | 'CBL-Mariner'           | '1.0'
        'CBL-Mariner 2.0'                  | 'CBL-Mariner'           | '2.0'
        'CBL-Mariner 1.0'                  | 'CBL-Mariner'           | '1.0.22'
        'CBL-Mariner 2.0'                  | 'CBL-Mariner'           | '2.0.20220122'
        'Oracle Linux 5'                   | 'Oracle Linux'          | '5'
        'Photon OS 1.0'                    | 'Photon OS'             | '1.0'
        'Red Hat'                          | 'Red Hat'               | '2'
        'SUSE Linux Enterprise 15'         | 'SUSE Linux Enterprise' | '15'
        'SUSE Linux Enterprise 15.1'       | 'SUSE Linux Enterprise' | '15.1'
        'alma 8'                           | 'alma'                  | '8.4'
        'alma 9'                           | 'alma'                  | '9.3'
        'alpine 3.10'                      | 'alpine'                | '3.10'
        'alpine 3.17'                      | 'alpine'                | '3.17.1'
        'alpine edge'                      | 'alpine'                | '3.19_alpha20230901'
        'debian 12'                        | 'debian'                | '12.1'
        'debian 10'                        | 'debian'                | '10'
        'openSUSE Leap 15.1'               | 'openSUSE Leap'         | '15.1'
        'openSUSE Leap 15.2.1'             | 'openSUSE Leap'         | '15.2.1'
        'rocky 8'                          | 'rocky'                 | '8.6'
        'rocky 9'                          | 'rocky'                 | '9.2'
        'ubuntu 12.04'                     | 'ubuntu'                | '12.04'
        'ubuntu 12.04-ESM'                 | 'ubuntu'                | '12.04-ESM'
        'ubuntu 19.04'                     | 'ubuntu'                | '19.04-ESM'
        'ubuntu 19.05'                     | 'ubuntu'                | '19.05'
        'ubuntu 19.05-ESM'                 | 'ubuntu'                | '19.05-ESM'
        'wolfi'                            | 'wolfi'                 | '20230201'
        'amazon linux 1'                   | 'amazon linux'          | 'AMI release 2016.09'
        'amazon linux 1'                   | 'amazon linux'          | 'AMI release 2018.03'
        'amazon linux 2'                   | 'amazon linux'          | '2 (Karoo)'
        'amazon linux 2022'                | 'amazon linux'          | '2022 (Amazon Linux)'
        'amazon linux 2023'                | 'amazon linux'          | '2023 (Amazon Linux)'
      end

      with_them do
        let(:distro) { given_distro }
        let(:source_name) { given_source_name }
        let(:source_version) { given_source_version }

        it 'returns true' do
          expect(affected).to be_truthy
        end
      end

      it 'memoizes version objects' do
        matcher = described_class.new(purl_type: purl_type, range: range)

        expect(SemverDialects).to receive(:parse_version).with(purl_type, range[1..]).once
        expect(SemverDialects).to receive(:parse_version).with(purl_type, version).once

        2.times { matcher.affected?(distro, source, version) }
      end

      context 'and the range is *' do
        let(:range) { '*' }

        it 'returns true' do
          expect(affected).to be_truthy
        end
      end
    end

    context 'when distro does not match' do
      where(:given_distro, :given_source_name, :given_source_version) do
        'CBL-Mariner 1.0'                  | 'Oracle OS'             | '1.0'
        'CBL-Mariner 2.0'                  | 'CBL-Mariner'           | '4.0'
        'CBL-Mariner 1.1'                  | 'CBL-Mariner'           | '1.0.22'
        'CBL-Mariner 2.1'                  | 'CBL-Mariner'           | '2.0.20220122'
        'Oracle Linux 5'                   | 'Oracle OS'             | '5'
        'SUSE Linux Enterprise 15'         | 'SUSE Linux'            | '15'
        'alma 9'                           | 'alma'                  | '8.4'
        'ubuntu 12.04-XYZ'                 | 'ubuntu'                | '12.04-ESM'
        'amazon linux 2'                   | 'amazon linux'          | 'AMI release 2016.09'
        'amazon linux 2023'                | 'amazon linux'          | '2 (Karoo)'
        'amazon linux 2022'                | 'amazon linux'          | '2023 (Amazon Linux)'
      end

      with_them do
        let(:distro) { given_distro }
        let(:source_name) { given_source_name }
        let(:source_version) { given_source_version }

        specify do
          expect(affected).to be_falsey
        end
      end
    end

    context 'when source is nil' do
      let(:source) { nil }

      subject(:matcher) do
        described_class.new(purl_type: purl_type, range: range)
      end

      it 'does not raise an error' do
        expect { matcher.affected?(distro, source, version) }.not_to raise_error
        expect(matcher.affected?(distro, source, version)).to be(false)
      end
    end
  end
end
