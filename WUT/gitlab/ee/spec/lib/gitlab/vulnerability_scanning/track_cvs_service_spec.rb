# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Gitlab::VulnerabilityScanning::TrackCvsService, feature_category: :software_composition_analysis do
  let_it_be(:advisory) { create(:pm_advisory) }
  let(:start_time) { Time.current }
  let(:end_time) { start_time + 30.seconds }
  let(:counts) do
    {
      possibly_affected_projects: 2,
      known_affected_projects: 2,
      possibly_affected_sbom_occurrences: 2,
      known_affected_sbom_occurrences: 2,
      sbom_occurrences_semver_dialects_errors_count: 0
    }
  end

  describe '#execute' do
    subject do
      described_class.new(advisory: advisory, counts: counts, start_time: start_time, end_time: end_time)
        .execute
    end

    it 'tracks the scan event', :snowplow, :unlimited_max_formatted_output_length do
      subject

      expect_snowplow_event(
        category: described_class::EVENT_CATEGORY,
        action: described_class::EVENT_ACTION,
        context: [{
          schema: described_class::CVS_SCAN_SCHEMA_URL,
          data: {
            advisory_id: advisory.id,
            advisory_xid: advisory.advisory_xid,
            source_xid: advisory.source_xid,
            start_time: start_time,
            end_time: end_time,
            counts: {
              possibly_affected_projects: counts[:possibly_affected_projects],
              known_affected_projects: counts[:known_affected_projects],
              possibly_affected_sbom_occurrences: counts[:possibly_affected_sbom_occurrences],
              known_affected_sbom_occurrences: counts[:known_affected_sbom_occurrences],
              sbom_occurrences_semver_dialects_errors_count: counts[:sbom_occurrences_semver_dialects_errors_count]
            }
          }
        }],
        label: described_class::EVENT_LABEL)
    end
  end
end
