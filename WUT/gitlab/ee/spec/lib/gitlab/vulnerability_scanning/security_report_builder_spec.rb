# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Gitlab::VulnerabilityScanning::SecurityReportBuilder, feature_category: :software_composition_analysis do
  let(:sbom_report) { build(:ci_reports_sbom_report, source: sbom_source, components: [affected_component]) }
  let(:sbom_reports) { instance_double(Gitlab::Ci::Reports::Sbom::Reports) }

  let_it_be(:ci_build) { build(:ci_build, pipeline: build(:ci_pipeline, user: build(:user))) }

  let(:expected) { Gitlab::Ci::Reports::Security::Report.new(report_type, ci_build.pipeline, created_at) }
  let(:created_at) { Time.zone.now }
  let(:json_report) { File.read(Rails.root.join(report_path)) }
  let(:attributes) do
    %i[
      report_type
      uuid
      name
      description
      solution
      identifiers
      flags
      links
      location
      evidence
      severity
      confidence
      details
      signatures
    ]
  end

  subject(:builder) do
    described_class.new(project: ci_build.project, pipeline: ci_build.pipeline, sbom_reports: sbom_reports)
  end

  before_all do
    create(:pm_affected_package,
      advisory: create(:pm_advisory,
        advisory_xid: "051e7fdd-4e0a-4dfd-ba52-083ee235a580",
        source_xid: 'glad',
        title: "Allocation of File Descriptors or Handles Without Limits or Throttling",
        description: "Minio a Allocation of Memory Without Limits or Throttling vulnerability in write-to-RAM.",
        cvss_v2: "AV:N/AC:L/Au:N/C:N/I:N/A:P",
        cvss_v3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        urls: ["https://github.com/minio/minio/pull/5957", "https://nvd.nist.gov/vuln/detail/CVE-2018-1000538"],
        identifiers: [
          create(:pm_identifier,
            type: "cve",
            name: "CVE-2018-1000538",
            value: "CVE-2018-1000538",
            url: "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000538")
        ]
      ),
      purl_type: "golang",
      package_name: "github.com/minio/minio",
      solution: "",
      affected_range: "<1.0.0",
      fixed_versions: []
    )

    create(:pm_affected_package,
      advisory: create(:pm_advisory,
        advisory_xid: "216192fe-2efa-4c52-addd-4bf3522c2b69",
        source_xid: 'glad',
        title: "Improper Authentication",
        description: "MinIO versions before has an authentication bypass issue in the MinIO admin API. " \
                     "Given an admin access key, it is possible to perform admin API operations, i.e., " \
                     "creating new service accounts for existing access keys without knowing the admin secret key.",
        cvss_v2: "AV:N/AC:L/Au:N/C:N/I:P/A:N",
        cvss_v3: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        urls: ["https://nvd.nist.gov/vuln/detail/CVE-2020-11012"],
        identifiers: [
          create(:pm_identifier,
            type: "cve",
            name: "CVE-2020-11012",
            value: "CVE-2020-11012",
            url: "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-11012")
        ]
      ),
      purl_type: "golang",
      package_name: "github.com/minio/minio",
      solution: "Upgrade to version RELEASE.2020-04-23T00-58-49Z or above.",
      affected_range: "<1.0.1",
      fixed_versions: %w[RELEASE.2020-04-23T00-58-49Z]
    )
  end

  before do
    parser_class.parse!(json_report, expected, validate: true)
    allow(sbom_reports).to receive(:reports).and_return([sbom_report])
  end

  describe "#report" do
    shared_examples_for 'it handles unsupported report types' do
      context "when report type is not supported" do
        let(:report_type) { "sast" }
        let(:sbom_source) { build(:ci_reports_sbom_source, type: :sast) }

        it "does not return a report" do
          expect(builder.execute).to be_nil
        end
      end
    end

    context "for dependency scanning" do
      let(:report_type) { "dependency_scanning" }
      let(:parser_class) { Gitlab::Ci::Parsers::Security::DependencyScanning }
      let(:sbom_source) do
        build(:ci_reports_sbom_source, type: :dependency_scanning, input_file_path: "go.mod",
          source_file_path: "go.mod")
      end

      let(:report_path) { 'ee/spec/fixtures/security_reports/simple/gl-dependency-scanning-report.json' }
      let_it_be(:affected_component) do
        build(:ci_reports_sbom_component, name: "github.com/minio/minio",
          version: "v0.0.0-20180419184637-5a16671f721f", purl_type: "golang")
      end

      context "when components are vulnerable" do
        it "builds a valid report" do
          expect(builder.execute.errored?).to eq(false)
          expect(builder.execute.warnings?).to eq(false)
        end

        it "adds correct findings" do
          convert_to_hash = ->(finding) { finding.to_hash.slice(*attributes) }
          findings = builder.execute.findings.map(&convert_to_hash)
          expected_findings = expected.findings.map(&convert_to_hash)

          expect(findings).to match_array(expected_findings)
        end

        it "adds correct identifiers" do
          expect(builder.execute.identifiers).to match_array(expected.identifiers)
        end

        it "does not produce or remove findings when compared against analyzer report" do
          comparer = Gitlab::Ci::Reports::Security::VulnerabilityReportsComparer.new(ci_build.project, expected,
            builder.execute)
          expect(comparer.added).to be_empty
          expect(comparer.fixed).to be_empty
        end

        context "when a SemverDialect:Error is raised" do
          before do
            allow(SemverDialects::IntervalSetParser).to receive(:parse).and_call_original
            allow(SemverDialects::IntervalSetParser).to receive(:parse).with('go',
              '<1.0.0').and_raise(SemverDialects::Error)
          end

          it "only skips the unsuported affected package" do
            expect(builder.execute.findings.count).to be < expected.findings.count
          end
        end
      end

      context "when cylonedx is missing required properties" do
        let(:sbom_source) { build(:ci_reports_sbom_source, type: :dependency_scanning, data: {}) }

        it "returns nil" do
          expect(builder.execute).to be_nil
        end
      end

      context "when it fails to build findings" do
        let_it_be(:ci_build) { build(:ci_build, pipeline: build(:ci_pipeline)) }

        it "returns report without findings" do
          expect(builder.execute.findings.count).to be_zero
        end

        it "logs the exception" do
          PackageMetadata::Advisory.pluck(:source_xid, :advisory_xid).each do |advisory_data|
            expect(::Gitlab::ErrorTracking).to receive(:track_exception).with(
              a_kind_of(Gitlab::VulnerabilityScanning::FindingBuilder::ArgumentError),
              message: "Skipping building finding for an affected component",
              project_id: ci_build.project.id,
              advisory_xid: advisory_data[1],
              source_xid: advisory_data[0]
            )
          end

          builder.execute
        end
      end

      it_behaves_like 'it handles unsupported report types'
    end
  end
end
