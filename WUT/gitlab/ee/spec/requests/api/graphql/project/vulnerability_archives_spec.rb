# frozen_string_literal: true

require 'spec_helper'

RSpec.describe 'Query.project(fullPath).vulnerabilityArchives', feature_category: :vulnerability_management do
  include GraphqlHelpers

  let_it_be(:user) { create(:user) }
  let_it_be(:project) { create(:project) }
  let_it_be(:archive) { create(:vulnerability_archive, project: project, archived_records_count: 5) }

  let(:make_graphql_request) { post_graphql(query, current_user: user) }
  let(:query) do
    <<~GQL
      query {
        project(fullPath: "#{project.full_path}") {
          vulnerabilityArchives {
            year
            month
            archivedRecordsCount
          }
        }
      }
    GQL
  end

  before do
    stub_licensed_features(security_dashboard: true)
  end

  context 'when the user can not read security resource' do
    before do
      make_graphql_request
    end

    it_behaves_like 'a working graphql query that returns no data'
  end

  context 'when the user can read security resource' do
    let(:archives) { graphql_data.dig('project', 'vulnerabilityArchives') }

    before_all do
      project.add_developer(user)
    end

    it 'returns the archive data', :aggregate_failures do
      make_graphql_request

      expect(archives.length).to be(1)
      expect(archives.first['year']).to eq(archive.date.year)
      expect(archives.first['month']).to eq(archive.date.month)
      expect(archives.first['archivedRecordsCount']).to be(5)
    end

    context 'when the `vulnerability_archival` feature flag is disabled' do
      before do
        stub_feature_flags(vulnerability_archival: false)
      end

      it 'raises exception' do
        make_graphql_request

        expect(archives).to be_nil
      end
    end
  end
end
