# frozen_string_literal: true

require 'spec_helper'

RSpec.describe 'Setting Project Continuous Vulnerability Scanning', feature_category: :software_composition_analysis do
  using RSpec::Parameterized::TableSyntax
  include GraphqlHelpers

  let(:current_user) { create(:user) }
  let(:security_setting) { create(:project_security_setting, continuous_vulnerability_scans_enabled: value_before) }
  let(:project) { security_setting.project }
  let(:mutation_name) { :project_set_continuous_vulnerability_scanning }
  let(:mutation) do
    graphql_mutation(
      mutation_name,
      project_path: project.full_path,
      enable: enable
    )
  end

  let(:value_before) { false }
  let(:enable) { true }

  context 'when the user does not have permission' do
    it_behaves_like 'a mutation that returns a top-level access error'

    it 'does not enable cvs' do
      expect { post_graphql_mutation(mutation, current_user: current_user) }
        .not_to change { security_setting.reload.continuous_vulnerability_scans_enabled }
    end
  end

  context 'when the user has permission' do
    before do
      project.add_developer(current_user)
    end

    where(:value_before, :enable, :value_after) do
      true  | false | false
      true  | true  | true
      false | true  | true
      false | false | false
    end

    with_them do
      it 'updates the project setting and returns the new value' do
        post_graphql_mutation(mutation, current_user: current_user)

        response = graphql_mutation_response(mutation_name)
        expect(response).to include({ 'continuousVulnerabilityScanningEnabled' => value_after, 'errors' => [] })

        expect(security_setting.reload.continuous_vulnerability_scans_enabled).to eq(value_after)
      end
    end
  end
end
