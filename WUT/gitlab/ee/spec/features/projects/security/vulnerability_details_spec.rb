# frozen_string_literal: true

require "spec_helper"

RSpec.describe "User sees Vulnerability details", :js, feature_category: :vulnerability_management do
  let_it_be(:group) { create(:group) }
  let_it_be(:user) { create(:user) }
  let_it_be(:project) { create(:project, :repository, namespace: group) }
  let_it_be(:pipeline) { create(:ee_ci_pipeline, project: project) }

  let_it_be(:identifier) do
    create(:vulnerabilities_identifier, project: project, external_type: 'cwe', name: 'CWE-23')
  end

  let_it_be(:finding) do
    create(:vulnerabilities_finding, project: project, identifiers: [identifier])
  end

  let_it_be(:vulnerability) do
    create(:vulnerability, findings: [finding], title: "SAST vulnerability", project: project)
  end

  before_all do
    project.add_maintainer(user)
    group.add_owner(user)
  end

  shared_examples 'user sees vulnerability details' do
    it 'shows the vulnerability details' do
      expect(page).to have_content(vulnerability.title)
      expect(page).to have_content(vulnerability.description)
    end
  end

  shared_examples 'user can get an AI explanation' do
    it 'has the "Explain or Resolve with AI" dropdown' do
      expect(page).to have_button('Explain or Resolve with AI')
    end

    it 'has the "Explain vulnerability with AI" button' do
      expect(page).to have_button('Explain with AI')
    end

    it 'opens the DuoChat drawer when the "Explain with AI" button is clicked' do
      click_button('Explain with AI')
      wait_for_requests

      within_testid('chat-component') do
        expect(page).to have_text('GitLab Duo Chat')
      end
    end
  end

  context "when user cannot use AI to explain vulnerability" do
    before do
      stub_licensed_features(
        security_dashboard: true,
        sast: true,
        ai_features: false,
        ai_chat: false
      )

      sign_in(user)
      visit vulnerability_url(vulnerability)
    end

    it_behaves_like 'user sees vulnerability details'

    it 'does not have the AI Explain button' do
      expect(page).not_to have_button('Resolve with AI')
    end
  end

  context "when user can use AI to explain vulnerability", :saas do
    include_context "with duo enterprise addon"

    before do
      stub_licensed_features(
        security_dashboard: true,
        sast: true,
        ai_features: true,
        ai_chat: true
      )
    end

    context "when the given vulnerability is resolvable" do
      before do
        visit_vulnerability_and_open_ai_dropdown(vulnerability)
      end

      it_behaves_like 'user sees vulnerability details'
      it_behaves_like 'user can get an AI explanation'

      it 'has the "Resolve vulnerability with AI" button' do
        expect(page).to have_button('Resolve with AI', disabled: false)
      end
    end

    context "when the given vulnerability is not resolvable" do
      let_it_be(:vulnerability_with_low_confidence_cwe) do
        create(:vulnerability, :with_finding, title: "SAST vulnerability", project: project)
      end

      before do
        stub_feature_flags(ignore_supported_cwe_list_check: false)
        visit_vulnerability_and_open_ai_dropdown(vulnerability_with_low_confidence_cwe)
      end

      it_behaves_like 'user sees vulnerability details'
      it_behaves_like 'user can get an AI explanation'

      it 'has a disabled "Resolve vulnerability with AI" button' do
        expect(page).to have_button('Resolve with AI', disabled: true)
      end
    end
  end

  context "when the vulnerability type does not support AI actions", :saas do
    include_context "with duo enterprise addon"

    before do
      finding.update!(report_type: 'dast')

      stub_licensed_features(
        security_dashboard: true,
        sast: true,
        ai_features: true,
        ai_chat: true
      )

      sign_in(user)
      visit vulnerability_url(vulnerability)
    end

    it_behaves_like 'user sees vulnerability details'

    it 'does not have the Explain or Resolve with AI button' do
      expect(page).not_to have_button('Explain or Resolve with AI')
      expect(page).not_to have_button('Explain with AI')
      expect(page).not_to have_button('Resolve with AI')
    end
  end

  def visit_vulnerability_and_open_ai_dropdown(vulnerability)
    sign_in(user)
    visit vulnerability_url(vulnerability)
    close_promotion_popover

    # Open the dropdown
    click_button 'Explain or Resolve with AI'
  end

  def close_promotion_popover
    # There is a promotion popover that needs to be closed, because it covers parts of the UI under test
    within_testid('duo-chat-promo-callout-popover') do
      find_by_testid('close-button').click
    end
  end
end
