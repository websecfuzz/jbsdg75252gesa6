import { shallowMountExtended } from 'helpers/vue_test_utils_helper';
import VulnerabilityIndicator from 'ee/security_inventory/components/vulnerability_indicator.vue';
import SegmentedBar from 'ee/security_inventory/components/segmented_bar.vue';
import { SEVERITY_BACKGROUND_COLORS } from 'ee/security_inventory/constants';

describe('VulnerabilityIndicator', () => {
  let wrapper;

  const createComponent = (propsData) => {
    wrapper = shallowMountExtended(VulnerabilityIndicator, { propsData });
  };

  const emptyCounts = {
    counts: {},
    expectedLabel: '0',
  };
  const completeCounts = {
    counts: {
      critical: 250,
      high: 250,
      medium: 500,
      low: 1000,
      info: 20,
      unknown: 5,
    },
    expectedLabel: '2,025',
  };
  const incompleteCounts = {
    counts: {
      high: 66,
      low: 33,
      info: 1,
    },
    expectedLabel: '100',
  };

  describe.each([
    ['with no counts', emptyCounts],
    ['with all vulnerability severities', completeCounts],
    ['with only some severities', incompleteCounts],
  ])('%s', (_, { counts, expectedLabel }) => {
    it('passes counts on to SegmentedBar, shows label', () => {
      createComponent({ counts });

      expect(wrapper.findComponent(SegmentedBar).props('segments')).toStrictEqual([
        { class: SEVERITY_BACKGROUND_COLORS.critical, count: counts.critical || 0 },
        { class: SEVERITY_BACKGROUND_COLORS.high, count: counts.high || 0 },
        { class: SEVERITY_BACKGROUND_COLORS.medium, count: counts.medium || 0 },
        { class: SEVERITY_BACKGROUND_COLORS.low, count: counts.low || 0 },
      ]);
      expect(wrapper.text()).toBe(expectedLabel);
    });
  });
});
