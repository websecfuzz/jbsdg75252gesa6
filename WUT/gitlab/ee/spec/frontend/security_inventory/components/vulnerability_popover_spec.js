import { GlPopover, GlButton } from '@gitlab/ui';
import { shallowMountExtended } from 'helpers/vue_test_utils_helper';
import VulnerabilityPopover from 'ee/security_inventory/components/vulnerability_popover.vue';
import { VULNERABILITY_REPORT_PATHS } from 'ee/security_inventory/constants';
import { SEVERITY_LEVELS } from '~/vue_shared/constants';
import { subgroupsAndProjects } from '../mock_data';

describe('VulnerabilityPopover', () => {
  let wrapper;

  const mockProject = subgroupsAndProjects.data.group.projects.nodes[0];

  const defaultProps = {
    severityCounts: mockProject.vulnerabilityStatistic,
    webUrl: mockProject.webUrl,
    targetId: 'vulnerability-count-1',
    isSubGroup: false,
  };

  const createComponent = (props = {}) => {
    wrapper = shallowMountExtended(VulnerabilityPopover, {
      propsData: {
        ...defaultProps,
        ...props,
      },
    });
  };

  const findPopover = () => wrapper.findComponent(GlPopover);
  const findButton = () => wrapper.findComponent(GlButton);
  const findSeverityItems = () => wrapper.findAllByTestId('severity-item');
  const findSeverityValues = () => wrapper.findAllByTestId('severity-value');
  const findSeverityIcons = () => wrapper.findAllByTestId('severity-icon');
  const findSeverityLabels = () => wrapper.findAllByTestId('severity-label');
  const findByTestId = (id) => wrapper.findByTestId(id);

  beforeEach(() => {
    createComponent();
  });

  describe('popover', () => {
    it('renders with correct base props', () => {
      const popover = findPopover();

      expect(popover.exists()).toBe(true);
      expect(popover.props()).toMatchObject({
        target: defaultProps.targetId,
        showCloseButton: '',
      });
    });

    describe('severity items', () => {
      const severities = ['critical', 'high', 'medium', 'low', 'info', 'unknown'];

      it('renders all severity levels', () => {
        expect(findSeverityItems()).toHaveLength(severities.length);
      });

      it('renders severity items with correct content', () => {
        severities.forEach((severity, index) => {
          const icon = findSeverityIcons().at(index);
          const label = findSeverityLabels().at(index);
          const value = findSeverityValues().at(index);

          expect(icon.props('name')).toBe(`severity-${severity}`);
          expect(icon.props('size')).toBe(12);
          expect(label.text().trim()).toBe(`${SEVERITY_LEVELS[severity]}:`);
          expect(value.text()).toBe(String(mockProject.vulnerabilityStatistic[severity]));
        });
      });

      it('renders the date updated', () => {
        expect(findByTestId('date-updated').exists()).toBe(true);
      });

      describe('when severityCounts is empty', () => {
        beforeEach(() => {
          createComponent({ severityCounts: {} });
        });

        it('shows zero counts for all severity levels', () => {
          expect(findSeverityItems()).toHaveLength(severities.length);
          expect(findSeverityValues()).toHaveLength(severities.length);

          findSeverityValues().wrappers.forEach((value) => {
            expect(value.text()).toBe('0');
          });
        });

        it('maintains correct severity order and labels', () => {
          severities.forEach((severity, index) => {
            const icon = findSeverityIcons().at(index);
            const label = findSeverityLabels().at(index);

            expect(icon.props('name')).toBe(`severity-${severity}`);
            expect(label.text().trim()).toBe(`${SEVERITY_LEVELS[severity]}:`);
          });
        });

        it('should not render the date updated', () => {
          expect(findByTestId('date-updated').exists()).toBe(false);
        });
      });
    });

    describe('button', () => {
      it('renders view report button with correct text', () => {
        const button = findButton();
        expect(button.exists()).toBe(true);
        expect(button.text()).toBe('View vulnerability report');
      });

      it('renders view report button with correct props', () => {
        const button = findButton();
        expect(button.props()).toMatchObject({
          category: 'secondary',
          variant: 'confirm',
          size: 'small',
        });
      });
    });
  });

  describe('project vs group view', () => {
    it.each([
      [false, 'Project vulnerabilities', VULNERABILITY_REPORT_PATHS.PROJECT],
      [true, 'Group vulnerabilities', VULNERABILITY_REPORT_PATHS.GROUP],
    ])(
      'when isSubGroup is %s, shows %s and correct URL path',
      (isSubGroup, expectedTitle, expectedPathType) => {
        createComponent({ isSubGroup });

        expect(findPopover().props('title')).toBe(expectedTitle);

        const button = findButton();
        const expectedPath = `${defaultProps.webUrl}${expectedPathType}`;
        expect(button.attributes('href')).toBe(expectedPath);
      },
    );
  });
});
