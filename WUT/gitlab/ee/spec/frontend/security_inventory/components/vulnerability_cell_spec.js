import { shallowMount } from '@vue/test-utils';
import VulnerabilityCell from 'ee/security_inventory/components/vulnerability_cell.vue';
import VulnerabilityIndicator from 'ee/security_inventory/components/vulnerability_indicator.vue';
import VulnerabilityPopover from 'ee/security_inventory/components/vulnerability_popover.vue';
import { subgroupsAndProjects } from '../mock_data';

const mockProject = subgroupsAndProjects.data.group.projects.nodes[0];
const mockSubgroup = subgroupsAndProjects.data.group.descendantGroups.nodes[0];

describe('VulnerabilityCell', () => {
  let wrapper;

  const createComponent = (props = {}) => {
    wrapper = shallowMount(VulnerabilityCell, {
      propsData: {
        item: mockProject,
        index: 0,
        ...props,
      },
    });
  };
  const mockTargetId = 'vulnerabilities-count-0';

  const findVulnerabilityIndicator = () => wrapper.findComponent(VulnerabilityIndicator);
  const findVulnerabilityPopover = () => wrapper.findComponent(VulnerabilityPopover);
  const findIndicatorContainer = () => wrapper.find(`#${mockTargetId}`);

  describe('for projects', () => {
    beforeEach(() => {
      createComponent({
        item: mockProject,
      });
    });

    it('renders the vulnerability indicator with correct props', () => {
      expect(findVulnerabilityIndicator().exists()).toBe(true);
      expect(findVulnerabilityIndicator().props('counts')).toEqual(
        mockProject.vulnerabilityStatistic,
      );
    });

    it('renders the vulnerability popover with correct props', () => {
      expect(findVulnerabilityPopover().exists()).toBe(true);
      expect(findVulnerabilityPopover().props()).toEqual({
        severityCounts: mockProject.vulnerabilityStatistic,
        webUrl: mockProject.webUrl,
        targetId: mockTargetId,
        isSubGroup: false,
      });
    });

    it('sets correct id on the indicator container', () => {
      expect(findIndicatorContainer().exists()).toBe(true);
    });
  });

  describe('for subgroups', () => {
    beforeEach(() => {
      createComponent({
        item: mockSubgroup,
      });
    });

    it('renders the vulnerability indicator with correct props', () => {
      expect(findVulnerabilityIndicator().exists()).toBe(true);
      expect(findVulnerabilityIndicator().props('counts')).toEqual(
        mockSubgroup.vulnerabilityNamespaceStatistic,
      );
    });

    it('renders the vulnerability popover with correct props', () => {
      expect(findVulnerabilityPopover().exists()).toBe(true);
      expect(findVulnerabilityPopover().props()).toEqual({
        severityCounts: mockSubgroup.vulnerabilityNamespaceStatistic,
        webUrl: mockSubgroup.webUrl,
        targetId: mockTargetId,
        isSubGroup: true,
      });
    });
  });
});
