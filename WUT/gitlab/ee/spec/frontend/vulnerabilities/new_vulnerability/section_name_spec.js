import { nextTick } from 'vue';
import { GlFormGroup, GlFormInput } from '@gitlab/ui';
import { mountExtended } from 'helpers/vue_test_utils_helper';
import MarkdownField from '~/vue_shared/components/markdown/field.vue';
import MarkdownEditor from '~/vue_shared/components/markdown/markdown_editor.vue';
import SectionName from 'ee/vulnerabilities/components/new_vulnerability/section_name.vue';
import { ERROR_NAME } from 'ee/vulnerabilities/components/new_vulnerability/i18n';
import { stubComponent } from 'helpers/stub_component';

describe('New vulnerability - Section Name', () => {
  const markdownDocsPath = '/path/to/markdown/docs';
  const markdownPreviewPath = '/path/to/markdown/preview';

  let wrapper;

  const findFormGroup = (index) => wrapper.findAllComponents(GlFormGroup).at(index);

  const createWrapper = ({ stubs = {} } = {}) => {
    wrapper = mountExtended(SectionName, {
      provide: {
        markdownDocsPath,
        markdownPreviewPath,
      },
      stubs,
    });
  };

  it('creates markdown editor with correct props', () => {
    createWrapper();

    expect(wrapper.findComponent(MarkdownField).props()).toMatchObject({
      markdownDocsPath,
      markdownPreviewPath,
      textareaValue: '',
      canAttachFile: false,
      isSubmitting: false,
      restrictedToolBarItems: ['attach-file'],
    });
  });

  it.each`
    labelText        | description
    ${'Name'}        | ${'Vulnerability name or type. Ex: Cross-site scripting'}
    ${'Description'} | ${''}
  `('displays the input with the correct label: $labelText', ({ labelText, description }) => {
    createWrapper();

    expect(wrapper.findByLabelText(labelText).exists()).toBe(true);

    if (description) {
      expect(wrapper.findByText(description).exists()).toBe(true);
    }
  });

  it('emits the changes: Name', () => {
    const fieldValue = 'CVE 2021';
    createWrapper({ stubs: { MarkdownEditor: stubComponent(MarkdownEditor) } });

    wrapper.findComponent(GlFormInput).setValue(fieldValue);
    wrapper.findComponent(GlFormInput).vm.$emit('input', fieldValue);

    expect(wrapper.emitted('change').at(-1)).toEqual([
      {
        vulnerabilityName: fieldValue,
        vulnerabilityDesc: '',
      },
    ]);
  });

  it('emits the changes: Description', () => {
    const fieldValue = 'Password leak';
    createWrapper();

    wrapper.findComponent(MarkdownField).find('textarea').setValue(fieldValue);
    wrapper.findComponent(MarkdownEditor).vm.$emit('input', fieldValue);

    expect(wrapper.emitted('change').at(-1)).toEqual([
      {
        vulnerabilityName: '',
        vulnerabilityDesc: fieldValue,
      },
    ]);
  });

  it('does not display invalid state by default', () => {
    createWrapper();

    expect(findFormGroup(0).attributes('aria-invalid')).toBeUndefined();
  });

  it('handles form validation', async () => {
    createWrapper();

    wrapper.setProps({
      validationState: {
        name: false,
      },
    });

    await nextTick();

    expect(findFormGroup(0).attributes('aria-invalid')).toBe('true');
    expect(findFormGroup(0).text()).toContain(ERROR_NAME);
  });

  it('allows switching to rich text editor', () => {
    createWrapper();

    expect(wrapper.text()).toContain('Switch to rich text editing');
  });
});
