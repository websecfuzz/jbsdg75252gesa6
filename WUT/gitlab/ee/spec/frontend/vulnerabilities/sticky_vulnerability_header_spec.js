import { GlIntersectionObserver, GlLink } from '@gitlab/ui';
import StickyVulnerabilityHeader from 'ee/vulnerabilities/components/sticky_vulnerability_header.vue';
import StatusBadge from 'ee/vue_shared/security_reports/components/status_badge.vue';
import { mountExtended } from 'helpers/vue_test_utils_helper';

describe('Sticky Vulnerability Header', () => {
  let wrapper;
  const $router = {
    push: jest.fn(),
  };

  const stickyProps = {
    vulnerability: { title: 'vulnerability title', state: 'resolved' },
    tabs: [
      ['details', 'Details', 'active'],
      ['code_flow', 'Code flow', 'inactive'],
    ],
  };

  const createWrapper = () => {
    const { vulnerability, tabs } = stickyProps;
    wrapper = mountExtended(StickyVulnerabilityHeader, {
      propsData: {
        tabs,
        vulnerability: {
          state: vulnerability.state,
          title: vulnerability.title,
        },
      },
      mocks: { $router },
    });
  };

  const getById = (id) => wrapper.findByTestId(id);
  const findGlIntersectionObserver = () => wrapper.findComponent(GlIntersectionObserver);
  const findStatusBadge = () => wrapper.findComponent(StatusBadge);
  const findAllGlLink = () => wrapper.findAllComponents(GlLink);

  beforeEach(() => {
    createWrapper();
  });

  it('renders correctly with given props', () => {
    const { vulnerability } = stickyProps;
    expect(findStatusBadge().props('state')).toBe(vulnerability.state);
    expect(findAllGlLink().at(0).text()).toBe(vulnerability.title);
  });

  it('show sticky header', async () => {
    await findGlIntersectionObserver().vm.$emit('appear');
    expect(getById('sticky-header').exists()).toBe(true);
  });

  it('hide sticky header', async () => {
    await findGlIntersectionObserver().vm.$emit('disappear');
    expect(getById('sticky-header').attributes('class')).not.toContain('gl-invisible');
  });

  it('navigates to the correct route when a tab is clicked', async () => {
    const { tabs } = stickyProps;
    const link = findAllGlLink().at(2); // the second tab
    await link.trigger('click');
    expect($router.push).toHaveBeenCalledWith({
      path: '/',
      query: { tab: tabs[1][0] },
    });
  });

  it('should be three gl-link', () => {
    // 1 - Is the title that needs to be a link
    // 2 + 3 - Are the tabs
    expect(findAllGlLink()).toHaveLength(3);
  });
});
