import {
  NO_LONGER_DETECTED_RULE_TYPE,
  DEFAULT_VULNERABILITY_MANAGEMENT_POLICY,
  VULNERABILITY_MANAGEMENT_POLICY_INVALID_ACTIONS_AND_RULES,
  VULNERABILITY_MANAGEMENT_POLICY_INVALID_ACTIONS_VALUES,
} from 'ee/security_orchestration/components/policy_editor/vulnerability_management/constants';
import { policyToYaml } from 'ee/security_orchestration/components/policy_editor/utils';
import { POLICY_TYPE_COMPONENT_OPTIONS } from 'ee/security_orchestration/components/constants';
import {
  createPolicyObject,
  buildDefaultNoLongerDetectedRule,
  validatePolicy,
} from 'ee/security_orchestration/components/policy_editor/vulnerability_management/utils';
import {
  customYaml,
  customYamlObject,
} from 'ee_jest/security_orchestration/mocks/mock_vulnerability_management_policy_data';
import { invalidYaml } from 'ee_jest/security_orchestration/mocks/mock_pipeline_execution_policy_data';
import { fromYaml } from 'ee/security_orchestration/components/utils';

const ruleId = 'rule_0';
jest.mock('lodash/uniqueId', () => jest.fn().mockReturnValue(ruleId));

describe('fromYaml', () => {
  it.each`
    title                                                                     | input                                                    | output
    ${'returns the policy object for a supported manifest'}                   | ${{ manifest: DEFAULT_VULNERABILITY_MANAGEMENT_POLICY }} | ${fromYaml({ manifest: DEFAULT_VULNERABILITY_MANAGEMENT_POLICY, type: POLICY_TYPE_COMPONENT_OPTIONS.vulnerabilityManagement.urlParameter })}
    ${'returns the policy object for a policy with an unsupported attribute'} | ${{ manifest: customYaml }}                              | ${{ type: 'vulnerability_management_policy', ...customYamlObject }}
    ${'returns empty object for a policy with an invalid yaml'}               | ${{ manifest: invalidYaml }}                             | ${{}}
  `('$title', ({ input, output }) => {
    expect(
      fromYaml({
        ...input,
        type: POLICY_TYPE_COMPONENT_OPTIONS.vulnerabilityManagement.urlParameter,
      }),
    ).toStrictEqual(output);
  });
});

describe('validatePolicy', () => {
  it.each`
    title                                                                  | input                                                                                                                                                          | output
    ${'returns empty object when there are no errors'}                     | ${fromYaml({ manifest: DEFAULT_VULNERABILITY_MANAGEMENT_POLICY, type: POLICY_TYPE_COMPONENT_OPTIONS.vulnerabilityManagement.urlParameter })}                   | ${{}}
    ${'returns error objects when there are actions and rules violations'} | ${fromYaml({ manifest: VULNERABILITY_MANAGEMENT_POLICY_INVALID_ACTIONS_AND_RULES, type: POLICY_TYPE_COMPONENT_OPTIONS.vulnerabilityManagement.urlParameter })} | ${{ actions: true, rules: true }}
  `('$title', ({ input, output }) => {
    expect(validatePolicy(input)).toStrictEqual(output);
  });
});

describe('createPolicyObject', () => {
  it.each`
    title                                                                              | input                                                        | output
    ${'returns the policy object and no errors for a supported manifest'}              | ${DEFAULT_VULNERABILITY_MANAGEMENT_POLICY}                   | ${{ policy: fromYaml({ manifest: DEFAULT_VULNERABILITY_MANAGEMENT_POLICY, type: POLICY_TYPE_COMPONENT_OPTIONS.vulnerabilityManagement.urlParameter }), parsingError: {} }}
    ${'returns the error policy object and the error for an unsupported manifest'}     | ${VULNERABILITY_MANAGEMENT_POLICY_INVALID_ACTIONS_AND_RULES} | ${{ policy: fromYaml({ manifest: VULNERABILITY_MANAGEMENT_POLICY_INVALID_ACTIONS_AND_RULES, type: POLICY_TYPE_COMPONENT_OPTIONS.vulnerabilityManagement.urlParameter }), parsingError: { actions: true, rules: true } }}
    ${'returns the error policy object and the error for an unsupported action types'} | ${VULNERABILITY_MANAGEMENT_POLICY_INVALID_ACTIONS_VALUES}    | ${{ policy: fromYaml({ manifest: VULNERABILITY_MANAGEMENT_POLICY_INVALID_ACTIONS_VALUES, type: POLICY_TYPE_COMPONENT_OPTIONS.vulnerabilityManagement.urlParameter }), parsingError: { actions: true } }}
  `('$title', ({ input, output }) => {
    expect(createPolicyObject(input)).toStrictEqual(output);
  });
});

describe('policyToYaml', () => {
  it('returns policy object as yaml', () => {
    expect(
      policyToYaml(
        customYamlObject,
        POLICY_TYPE_COMPONENT_OPTIONS.vulnerabilityManagement.urlParameter,
      ),
    ).toBe(
      `vulnerability_management_policy:
  - ${customYaml}`,
    );
  });
});

describe('buildDefaultNoLongerDetectedRule', () => {
  it('builds a no longer detected rule', () => {
    expect(buildDefaultNoLongerDetectedRule()).toEqual({
      id: ruleId,
      type: NO_LONGER_DETECTED_RULE_TYPE,
      scanners: [],
      severity_levels: [],
    });
  });
});
