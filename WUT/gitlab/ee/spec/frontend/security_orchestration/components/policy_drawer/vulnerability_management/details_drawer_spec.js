import VulnerabilityManagementDrawer from 'ee/security_orchestration/components/policy_drawer/vulnerability_management/details_drawer.vue';
import PolicyDrawerLayout from 'ee/security_orchestration/components/policy_drawer/drawer_layout.vue';
import { shallowMountExtended } from 'helpers/vue_test_utils_helper';
import { NAMESPACE_TYPES } from 'ee/security_orchestration/constants';
import { mockProjectVulnerabilityManagementPolicy } from 'ee_jest/security_orchestration/mocks/mock_vulnerability_management_policy_data';

describe('VulnerabilityManagementDrawer', () => {
  let wrapper;

  const findSummary = () => wrapper.findByTestId('policy-summary');
  const findSummaryHeader = () => wrapper.findByTestId('summary-header');
  const findSummaryFields = () => wrapper.findAllByTestId('summary-field');
  const findPolicyDrawerLayout = () => wrapper.findComponent(PolicyDrawerLayout);

  const createComponent = ({ policy = {} }) => {
    wrapper = shallowMountExtended(VulnerabilityManagementDrawer, {
      propsData: {
        policy,
      },
      provide: { namespaceType: NAMESPACE_TYPES.PROJECT },
      stubs: {
        PolicyDrawerLayout,
      },
    });
  };

  describe('policy drawer layout props', () => {
    it('passes the policy to the PolicyDrawerLayout component', () => {
      createComponent({ policy: mockProjectVulnerabilityManagementPolicy });
      expect(findPolicyDrawerLayout().props('policy')).toEqual(
        mockProjectVulnerabilityManagementPolicy,
      );
    });

    it('passes the description to the PolicyDrawerLayout component', () => {
      createComponent({ policy: mockProjectVulnerabilityManagementPolicy });
      expect(findPolicyDrawerLayout().props('description')).toBe(
        'Auto-resolves no longer found low severity vulnerabilities',
      );
    });

    it('passes fallback empty description when parsing yaml fails', () => {
      const invalidYamlPolicy = {
        ...mockProjectVulnerabilityManagementPolicy,
        yaml: 'enabled: true\nenabled:true',
      };
      createComponent({ policy: invalidYamlPolicy });
      expect(findPolicyDrawerLayout().props('description')).toBe('');
    });
  });

  describe('summary', () => {
    it('renders the policy summary', () => {
      createComponent({ policy: mockProjectVulnerabilityManagementPolicy });

      const summaryFields = findSummaryFields();
      expect(findSummary().exists()).toBe(true);
      expect(findSummaryHeader().text()).toBe(
        'Resolve the following vulnerabilities that are no longer detected on the default branch:',
      );
      expect(summaryFields).toHaveLength(2);
      expect(summaryFields.at(0).text()).toBe(
        'SAST and Dependency Scanning of High and Medium severity levels',
      );
      expect(summaryFields.at(1).text()).toBe('All scanners of Low severity level');
    });
  });
});
