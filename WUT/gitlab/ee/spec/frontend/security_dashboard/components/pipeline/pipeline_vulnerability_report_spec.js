import { shallowMount } from '@vue/test-utils';
import { nextTick } from 'vue';
import PipelineVulnerabilityReport from 'ee/security_dashboard/components/pipeline/pipeline_vulnerability_report.vue';
import { visitUrl } from '~/lib/utils/url_utility';
import VulnerabilityReport from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_report.vue';
import FindingModal from 'ee/security_dashboard/components/pipeline/vulnerability_finding_modal.vue';
import {
  FIELDS,
  FILTERS,
} from 'ee/security_dashboard/components/shared/vulnerability_report/constants';

jest.mock('~/lib/utils/url_utility');

describe('Pipeline vulnerability report', () => {
  let wrapper;
  const TEST_PIPELINE = { iid: 1, sourceBranch: 'main' };
  const TEST_PROJECT_FULL_PATH = 'path/to/my/project';

  const createWrapper = (vulnerabilityReportTypeScannerFilter = true) => {
    wrapper = shallowMount(PipelineVulnerabilityReport, {
      provide: {
        pipeline: TEST_PIPELINE,
        projectFullPath: TEST_PROJECT_FULL_PATH,
        glFeatures: { vulnerabilityReportTypeScannerFilter },
      },
    });
  };

  const findModal = () => wrapper.findComponent(FindingModal);
  const findReport = () => wrapper.findComponent(VulnerabilityReport);

  it('passes the expected props to the vulnerability report component', () => {
    createWrapper();

    expect(findReport().props()).toMatchObject({
      fields: [
        FIELDS.STATUS,
        FIELDS.SEVERITY,
        FIELDS.DESCRIPTION,
        FIELDS.IDENTIFIER,
        FIELDS.REPORT_TYPE,
        FIELDS.ACTIVITY,
      ],
      filterDropdowns: [FILTERS.PIPELINE_STATUS, FILTERS.SEVERITY, FILTERS.TOOL_PIPELINE],
      filterFn: wrapper.vm.transformFilters,
    });
  });

  describe('when the feature flag "vulnerabilityReportTypeScannerFilter" is disabled', () => {
    it('passes the expected props to the vulnerability report component', () => {
      createWrapper(false);

      expect(findReport().props()).toMatchObject({
        fields: [
          FIELDS.STATUS,
          FIELDS.SEVERITY,
          FIELDS.DESCRIPTION,
          FIELDS.IDENTIFIER,
          FIELDS.TOOL,
          FIELDS.ACTIVITY,
        ],
        filterDropdowns: [FILTERS.PIPELINE_STATUS, FILTERS.SEVERITY, FILTERS.TOOL_PIPELINE],
        filterFn: wrapper.vm.transformFilters,
      });
    });
  });

  describe('filters', () => {
    it.each`
      property        | value                                         | expected
      ${'severity'}   | ${['HIGH', 'LOW']}                            | ${['high', 'low']}
      ${'severity'}   | ${[]}                                         | ${undefined}
      ${'severity'}   | ${undefined}                                  | ${undefined}
      ${'reportType'} | ${['CONTAINER_SCANNING', 'SECRET_DETECTION']} | ${['container_scanning', 'secret_detection']}
      ${'reportType'} | ${[]}                                         | ${undefined}
      ${'reportType'} | ${undefined}                                  | ${undefined}
      ${'state'}      | ${['DETECTED', 'CONFIRMED']}                  | ${['DETECTED', 'CONFIRMED']}
      ${'state'}      | ${[]}                                         | ${[]}
      ${'state'}      | ${undefined}                                  | ${undefined}
    `(
      'formats the filters correctly for the pipeline GraphQL endpoint when $property is $value',
      ({ property, value, expected }) => {
        createWrapper();
        const filters = wrapper.vm.transformFilters({ [property]: value });

        expect(filters).toEqual({ [property]: expected });
        expect(findReport().props('filterFn')).toBe(wrapper.vm.transformFilters);
      },
    );
  });

  describe('finding modal', () => {
    const finding = { id: '1' };

    beforeEach(() => {
      createWrapper();
    });

    const clickVulnerability = async () => {
      findReport().vm.$emit('vulnerability-clicked', finding);
      await nextTick();
    };
    const hideModal = async () => {
      findModal().vm.$emit('hidden');
      await nextTick();
    };

    it('hides the modal initially', () => {
      expect(findModal().exists()).toBe(false);
    });

    it('shows the modal when a vulnerability is clicked and passes the correct props', async () => {
      await clickVulnerability();

      expect(findModal().props()).toMatchObject({
        findingUuid: finding.id,
        pipelineIid: TEST_PIPELINE.iid,
        branchRef: TEST_PIPELINE.sourceBranch,
        projectFullPath: TEST_PROJECT_FULL_PATH,
      });

      await hideModal();

      expect(findModal().exists()).toBe(false);
    });

    it(`hides the modal when 'hidden' is emitted`, async () => {
      await clickVulnerability();

      await hideModal();

      expect(findModal().exists()).toBe(false);
    });

    it('navigates to the result URL when resolveWithAiSuccess is emitted', async () => {
      const testUrl = 'https://example.com/merge_request/123';

      await clickVulnerability();
      findModal().vm.$emit('resolveWithAiSuccess', testUrl);

      expect(visitUrl).toHaveBeenCalledWith(testUrl);
    });
  });
});
