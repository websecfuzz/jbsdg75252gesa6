import { shallowMountExtended } from 'helpers/vue_test_utils_helper';
import VulnerabilityFindingModalDetails from 'ee/security_dashboard/components/pipeline/vulnerability_finding_modal_details.vue';
import SolutionCard from 'ee/vue_shared/security_reports/components/solution_card_graphql.vue';
import IssueNote from 'ee/vue_shared/security_reports/components/issue_note_graphql.vue';
import MergeRequestNote from 'ee/vue_shared/security_reports/components/merge_request_note_graphql.vue';
import VulnerabilityDetailsGraphql from 'ee/security_dashboard/components/shared/vulnerability_details_graphql/index.vue';
import { pipelineSecurityReportFinding } from './mock_data';

const mockVulnerability = {
  ...pipelineSecurityReportFinding,
  severity: pipelineSecurityReportFinding.severity,
  state: pipelineSecurityReportFinding.state,
};

const stateDismissed = 'DISMISSED';

describe('vulnerability_finding_details_modal', () => {
  let wrapper;

  const createWrapper = ({ propsData } = {}) => {
    wrapper = shallowMountExtended(VulnerabilityFindingModalDetails, {
      propsData: {
        vulnerability: mockVulnerability,
        ...propsData,
      },
    });
  };

  const findVulnerabilityDetails = () => wrapper.findComponent(VulnerabilityDetailsGraphql);
  const findSolutionCard = () => wrapper.findComponent(SolutionCard);
  const findIssueNote = () => wrapper.findComponent(IssueNote);
  const findMergeRequestNote = () => wrapper.findComponent(MergeRequestNote);

  describe('default behavior', () => {
    beforeEach(() => {
      createWrapper();
    });

    it('consists of header, details, and footer', () => {
      expect(findVulnerabilityDetails().exists()).toBe(true);
      expect(findSolutionCard().exists()).toBe(true);
      expect(findIssueNote().exists()).toBe(true);
      expect(findMergeRequestNote().exists()).toBe(true);
    });
  });

  describe('finding details', () => {
    beforeEach(() => {
      createWrapper();
    });

    it('displays details about the given vulnerability finding', () => {
      const { description, severity, state, project, falsePositive } = mockVulnerability;
      expect(findVulnerabilityDetails().props()).toMatchObject({
        description,
        severity,
        state,
        project,
        falsePositive,
      });
    });

    it('should emit redirectToCodeFlowTab when redirect event is triggered', async () => {
      await findVulnerabilityDetails().vm.$emit('redirectToCodeFlowTab');
      expect(wrapper.emitted('redirectToCodeFlowTab')).toEqual([[]]);
    });

    it('display solution card', () => {
      const {
        solution,
        solutionHtml,
        remediations,
        vulnerability: { mergeRequest },
      } = mockVulnerability;
      expect(findSolutionCard().props()).toMatchObject({
        remediation: remediations[0],
        solutionHtml,
        solution,
        mergeRequest,
      });
    });

    it('display issue note', () => {
      const { issueLinks, project } = mockVulnerability;
      expect(findIssueNote().props()).toMatchObject({
        issueLinks: issueLinks.nodes,
        project,
      });
    });

    it('display merge request note', () => {
      const {
        vulnerability: { mergeRequest },
        project,
      } = mockVulnerability;
      expect(findMergeRequestNote().props()).toMatchObject({
        mergeRequest,
        project,
      });
    });

    it('when state change', () => {
      createWrapper({
        propsData: {
          vulnerability: { ...mockVulnerability, state: stateDismissed },
        },
      });
      expect(findVulnerabilityDetails().props('state')).toBe(stateDismissed);
    });
  });
});
