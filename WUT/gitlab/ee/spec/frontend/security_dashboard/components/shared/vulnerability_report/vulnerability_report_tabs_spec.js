import { GlTabs } from '@gitlab/ui';
import { nextTick } from 'vue';
import { shallowMount } from '@vue/test-utils';
import VulnerabilityReportTabs, {
  TAB_NAMES,
} from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_report_tabs.vue';
import ContainerScanningForRegistryTab from 'ee/security_dashboard/components/shared/vulnerability_report/container_scanning_for_registry_tab.vue';
import VulnerabilityReportTab from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_report_tab.vue';
import {
  REPORT_TYPE_PRESETS,
  FIELD_PRESETS,
  FILTER_PRESETS,
} from 'ee/security_dashboard/components/shared/vulnerability_report/constants';
import {
  DASHBOARD_TYPE_PROJECT,
  DASHBOARD_TYPE_GROUP,
  DASHBOARD_TYPE_INSTANCE,
} from 'ee/security_dashboard/constants';

describe('Vulnerability report tabs component', () => {
  let wrapper;

  const createWrapper = ({
    dashboardType = DASHBOARD_TYPE_PROJECT,
    $route = { query: { tab: undefined } },
    $router = undefined,
    slots,
    vulnerabilityReportTypeScannerFilter = true,
  } = {}) => {
    wrapper = shallowMount(VulnerabilityReportTabs, {
      provide: {
        dashboardType,
        fullPath: '/',
        securityConfigurationPath: '/',
        glFeatures: { vulnerabilityReportTypeScannerFilter },
      },
      stubs: { VulnerabilityReportTab, ContainerScanningForRegistryTab: true },
      slots,
      mocks: { $router, $route },
    });
  };

  const findTabsComponent = () => wrapper.findComponent(GlTabs);
  const findAllReportTabs = () => wrapper.findAllComponents(VulnerabilityReportTab);
  const findContainerRegistryTab = () => wrapper.findComponent(ContainerScanningForRegistryTab);
  const findDevelopmentTab = () => findAllReportTabs().at(0);
  const findOperationalTab = () => findAllReportTabs().at(1);

  describe('tabs root component', () => {
    it.each`
      queryParam                      | tabIndex
      ${undefined}                    | ${0}
      ${TAB_NAMES.OPERATIONAL}        | ${1}
      ${TAB_NAMES.CONTAINER_REGISTRY} | ${2}
    `(
      'shows tab with tabIndex $tabIndex when querystring is "$queryParam"',
      ({ queryParam, tabIndex }) => {
        createWrapper({ $route: { query: { tab: queryParam } } });

        expect(findTabsComponent().props('value')).toBe(tabIndex);
        expect(findDevelopmentTab().props('isActiveTab')).toBe(tabIndex === 0);
        expect(findOperationalTab().props('isActiveTab')).toBe(tabIndex === 1);
        expect(findContainerRegistryTab().props('isActiveTab')).toBe(tabIndex === 2);
      },
    );

    it.each`
      tabIndex | queryParam
      ${1}     | ${TAB_NAMES.OPERATIONAL}
      ${2}     | ${TAB_NAMES.CONTAINER_REGISTRY}
    `(
      'changes the tab when tabIndex $tabIndex is clicked and sets querystring to "$queryParam"',
      async ({ tabIndex, queryParam }) => {
        const pushSpy = jest.fn();
        const $router = { push: pushSpy };
        createWrapper({ $router });
        findTabsComponent().vm.$emit('input', tabIndex);
        await nextTick();

        expect(pushSpy).toHaveBeenCalledWith({ query: { tab: queryParam } });
      },
    );
  });

  describe('vulnerability report tabs', () => {
    it('shows 3 tabs', () => {
      createWrapper();
      expect(findAllReportTabs()).toHaveLength(2);
      expect(findContainerRegistryTab().exists()).toBe(true);
    });

    it.each`
      dashboardType              | vulnerabilityReportTypeScannerFilter | expectedDevelopmentFields           | expectedDevelopmentDropdowns                 | expectedOperationalDropdowns
      ${DASHBOARD_TYPE_PROJECT}  | ${true}                              | ${FIELD_PRESETS.DEVELOPMENT}        | ${FILTER_PRESETS.DEVELOPMENT_PROJECT}        | ${FILTER_PRESETS.OPERATIONAL_PROJECT}
      ${DASHBOARD_TYPE_PROJECT}  | ${false}                             | ${FIELD_PRESETS.DEVELOPMENT_LEGACY} | ${FILTER_PRESETS.DEVELOPMENT_PROJECT_LEGACY} | ${FILTER_PRESETS.OPERATIONAL_PROJECT}
      ${DASHBOARD_TYPE_GROUP}    | ${false}                             | ${FIELD_PRESETS.DEVELOPMENT_LEGACY} | ${FILTER_PRESETS.DEVELOPMENT_LEGACY}         | ${FILTER_PRESETS.OPERATIONAL}
      ${DASHBOARD_TYPE_GROUP}    | ${false}                             | ${FIELD_PRESETS.DEVELOPMENT_LEGACY} | ${FILTER_PRESETS.DEVELOPMENT_LEGACY}         | ${FILTER_PRESETS.OPERATIONAL}
      ${DASHBOARD_TYPE_INSTANCE} | ${false}                             | ${FIELD_PRESETS.DEVELOPMENT_LEGACY} | ${FILTER_PRESETS.DEVELOPMENT_LEGACY}         | ${FILTER_PRESETS.OPERATIONAL}
      ${DASHBOARD_TYPE_INSTANCE} | ${false}                             | ${FIELD_PRESETS.DEVELOPMENT_LEGACY} | ${FILTER_PRESETS.DEVELOPMENT_LEGACY}         | ${FILTER_PRESETS.OPERATIONAL}
    `(
      'gets the expected props at the $dashboardType level',
      ({
        dashboardType,
        vulnerabilityReportTypeScannerFilter,
        expectedDevelopmentFields,
        expectedDevelopmentDropdowns,
        expectedOperationalDropdowns,
      }) => {
        createWrapper({ dashboardType, vulnerabilityReportTypeScannerFilter });

        expect(findDevelopmentTab().props()).toMatchObject({
          title: VulnerabilityReportTabs.i18n.developmentTab,
          fields: expectedDevelopmentFields,
          filterDropdowns: expectedDevelopmentDropdowns,
        });

        expect(findOperationalTab().props()).toMatchObject({
          title: VulnerabilityReportTabs.i18n.operationalTab,
          fields: FIELD_PRESETS.OPERATIONAL,
          filterDropdowns: expectedOperationalDropdowns,
        });
      },
    );

    describe('when the feature flag "vulnerabilityReportTypeScannerFilter" is disabled', () => {
      it('passes the expected props to the development tab', () => {
        createWrapper({ vulnerabilityReportTypeScannerFilter: false });

        expect(findDevelopmentTab().props()).toMatchObject({
          fields: FIELD_PRESETS.DEVELOPMENT_LEGACY,
        });
      });
    });

    it.each`
      dashboardType              | expectedContainerRegistryTab
      ${DASHBOARD_TYPE_PROJECT}  | ${true}
      ${DASHBOARD_TYPE_GROUP}    | ${false}
      ${DASHBOARD_TYPE_INSTANCE} | ${false}
    `(
      'renders correctly at the $dashboardType level',
      ({ dashboardType, expectedContainerRegistryTab }) => {
        createWrapper({ dashboardType });

        expect(findContainerRegistryTab().exists()).toEqual(expectedContainerRegistryTab);
      },
    );

    it('renders the container registry dropdowns', () => {
      createWrapper();
      expect(findContainerRegistryTab().props()).toMatchObject({
        isActiveTab: false,
      });
    });

    it('passes the slot content to the development tab', () => {
      createWrapper({
        slots: {
          'header-development': 'header slot content',
        },
      });

      expect(findDevelopmentTab().text()).toContain('header slot content');
    });

    it('shows the operational tab message in the operational tab', () => {
      createWrapper();
      expect(findOperationalTab().text()).toContain(
        VulnerabilityReportTabs.i18n.operationalTabMessage,
      );
    });
  });

  describe('filter functions', () => {
    beforeEach(() => {
      createWrapper();
    });

    const getFilterFn = () => findDevelopmentTab().props('filterFn');

    describe('development report', () => {
      it('does not transform when it contains `reportType`', () => {
        const input = { reportType: ['API_FUZZING'], state: ['DETECTED'] };
        expect(getFilterFn()(input)).toEqual(input);
      });

      it('does not transform when it contains `scanner`', () => {
        const input = { scanner: ['trivy'], state: ['DETECTED'] };
        expect(getFilterFn()(input)).toEqual(input);
      });

      it('adds `reportType` with development preset otherwise', () => {
        const input = { state: ['DETECTED'], scanner: [], reportType: [] };
        expect(getFilterFn()(input)).toEqual({
          ...input,
          reportType: REPORT_TYPE_PRESETS.DEVELOPMENT,
        });
      });
    });

    describe('operational report', () => {
      it('adds `reportType` with operational preset', () => {
        const input = { state: ['DETECTED'] };
        const filterFn = findOperationalTab().props('filterFn');
        expect(filterFn(input)).toEqual({ ...input, reportType: REPORT_TYPE_PRESETS.OPERATIONAL });
      });
    });
  });
});
