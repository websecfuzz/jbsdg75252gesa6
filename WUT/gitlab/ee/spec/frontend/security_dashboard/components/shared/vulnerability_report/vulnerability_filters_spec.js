import ActivityFilter from 'ee/security_dashboard/components/shared/filters/activity_filter.vue';
import ClusterFilter from 'ee/security_dashboard/components/shared/filters/cluster_filter.vue';
import ImageFilter from 'ee/security_dashboard/components/shared/filters/image_filter.vue';
import VulnerabilityFilters from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_filters.vue';
import ProjectFilter from 'ee/security_dashboard/components/shared/filters/project_filter.vue';
import SeverityFilter from 'ee/security_dashboard/components/shared/filters/severity_filter.vue';
import StatusFilter from 'ee/security_dashboard/components/shared/filters/status_filter.vue';
import PipelineStatusFilter from 'ee/security_dashboard/components/shared/filters/pipeline_status_filter.vue';
import ToolFilter from 'ee/security_dashboard/components/shared/filters/tool_filter.vue';
import ToolWithVendorFilter from 'ee/security_dashboard/components/shared/filters/tool_with_vendor_filter.vue';
import { shallowMountExtended } from 'helpers/vue_test_utils_helper';
import { FILTERS } from 'ee/security_dashboard/components/shared/vulnerability_report/constants';
import { MOCK_SCANNERS } from '../filters/mock_data';

describe('Vulnerability filters component', () => {
  let wrapper;

  const createWrapper = ({ filters, provide = {} }) => {
    wrapper = shallowMountExtended(VulnerabilityFilters, {
      propsData: { filters },
      provide,
    });
  };

  it('emits filters-changed event when filter is changed', () => {
    createWrapper({ filters: [FILTERS.STATUS], provide: { scanners: MOCK_SCANNERS } });

    const filter = wrapper.findComponent(StatusFilter);
    const data = { a: 1 };
    filter.vm.$emit('filter-changed', data);

    expect(wrapper.emitted('filters-changed')[0][0]).toMatchObject(data);
  });

  it.each`
    name                  | filters                      | expectedComponent
    ${'activity'}         | ${[FILTERS.ACTIVITY]}        | ${ActivityFilter}
    ${'project'}          | ${[FILTERS.PROJECT]}         | ${ProjectFilter}
    ${'severity'}         | ${[FILTERS.SEVERITY]}        | ${SeverityFilter}
    ${'status'}           | ${[FILTERS.STATUS]}          | ${StatusFilter}
    ${'pipeline status'}  | ${[FILTERS.PIPELINE_STATUS]} | ${PipelineStatusFilter}
    ${'tool simple'}      | ${[FILTERS.TOOL_SIMPLE]}     | ${ToolFilter}
    ${'pipeline tool'}    | ${[FILTERS.TOOL_PIPELINE]}   | ${ToolFilter}
    ${'tool with vendor'} | ${[FILTERS.TOOL_VENDOR]}     | ${ToolWithVendorFilter}
    ${'cluster'}          | ${[FILTERS.CLUSTER]}         | ${ClusterFilter}
    ${'image'}            | ${[FILTERS.IMAGE]}           | ${ImageFilter}
  `(`shows the expected component for filter '$name'`, ({ filters, expectedComponent }) => {
    createWrapper({ filters, provide: { scanners: MOCK_SCANNERS } });

    expect(wrapper.findComponent(expectedComponent).exists()).toBe(true);
  });

  // Due to legacy reasons, some scanner vendors are blank. We'll treat these as GitLab scanners.
  it.each(['', 'GitLab'])(
    'shows the expected ToolFilter component when there are scanners without custom vendor',
    (vendor) => {
      createWrapper({
        filters: [FILTERS.TOOL_VENDOR],
        provide: { scanners: [{ vendor }] },
      });

      expect(wrapper.findComponent(ToolFilter).exists()).toBe(true);
    },
  );

  it(`shows the ToolFilter component for filter 'tool with vendor' when no scanners are provided`, () => {
    createWrapper({
      filters: [FILTERS.TOOL_VENDOR],
    });

    expect(wrapper.findComponent(ToolFilter).exists()).toBe(true);
  });
});
