import { nextTick } from 'vue';
import { GlLink, GlPopover } from '@gitlab/ui';
import { shallowMountExtended } from 'helpers/vue_test_utils_helper';
import SecurityScores from 'ee/security_dashboard/components/shared/vulnerability_report/security_scores.vue';

describe('Severity scores component', () => {
  let wrapper;

  const createWrapper = ({ props }) => {
    wrapper = shallowMountExtended(SecurityScores, {
      propsData: {
        ...props,
      },
    });
  };

  describe('when epss and kev are provided', () => {
    const findLink = () => wrapper.findComponent(GlLink);
    const findPopover = () => wrapper.findComponent(GlPopover);

    beforeEach(() => {
      createWrapper({
        props: {
          cveEnrichment: { isKnownExploit: true, epssScore: 0.6 },
          cvss: [{ overallScore: 9.8, version: 3 }],
        },
      });
    });

    it('displays cvss score', () => {
      expect(wrapper.text()).toContain('CVSS v3: 9.8');
    });

    it('displays +2 more text to indicate existence of EPSS and KEV data', () => {
      expect(findLink().text()).toBe('+2 more');
    });

    it('has a popover displaying epss and kev data', () => {
      // Make sure popover targets the root element
      expect(wrapper.element.id).toBe(findPopover().props('target'));
      expect(findPopover().text()).toMatchInterpolatedText('EPSS: 60% KEV: Yes');
    });

    it.each`
      epss      | expected
      ${0.005}  | ${1}
      ${0.0049} | ${0}
      ${0.1907} | ${19}
      ${0.99}   | ${99}
    `('displays the correct value for epss: $epss', async ({ epss, expected }) => {
      createWrapper({
        props: {
          cveEnrichment: { isKnownExploit: false, epssScore: epss },
          cvss: [{ overallScore: 9.7, version: 3.1 }],
        },
      });

      await nextTick();

      expect(findPopover().text()).toMatchInterpolatedText(`EPSS: ${expected}% KEV: No`);
    });

    it.each`
      reachability   | expected
      ${'UNKNOWN'}   | ${'Not available'}
      ${'NOT_FOUND'} | ${'Not found'}
      ${'IN_USE'}    | ${'Yes'}
    `('displays the correct value for $reachability', async ({ reachability, expected }) => {
      createWrapper({
        props: {
          cveEnrichment: { isKnownExploit: true, epssScore: 0.6 },
          cvss: [{ overallScore: 9.7, version: 3.1 }],
          reachability,
        },
      });

      await nextTick();

      expect(findPopover().text()).toMatchInterpolatedText(
        `EPSS: 60% KEV: Yes Reachable: ${expected}`,
      );
    });
  });

  // SAST vulnerabilities don't have EPSS and KEV, only CVEs have.
  describe('when epss and kev are not provided', () => {
    const findLink = () => wrapper.findComponent(GlLink);
    const findPopover = () => wrapper.findComponent(GlPopover);

    beforeEach(() => {
      createWrapper({
        props: {
          cvss: [{ overallScore: 9.8, version: 3 }],
        },
      });
    });

    it('displays cvss score', () => {
      expect(wrapper.text()).toBe('CVSS v3: 9.8');
    });

    it('does not display a link', () => {
      expect(findLink().exists()).toBe(false);
    });

    it('does not have a popover', () => {
      expect(findPopover().exists()).toBe(false);
    });
  });
});
