import { nextTick } from 'vue';
import { shallowMount } from '@vue/test-utils';
import { GlAlert } from '@gitlab/ui';
import VulnerabilityRetentionAlert from 'ee/security_dashboard/components/shared/vulnerability_retention_alert.vue';
import { makeMockUserCalloutDismisser } from 'helpers/mock_user_callout_dismisser';

describe('Vulnerability retention alert component', () => {
  let wrapper;
  let userCalloutDismissSpy;

  const createComponent = ({ showRetentionAlert = false, shouldShowCallout = true } = {}) => {
    userCalloutDismissSpy = jest.fn();

    wrapper = shallowMount(VulnerabilityRetentionAlert, {
      provide: {
        showRetentionAlert,
      },
      stubs: {
        UserCalloutDismisser: makeMockUserCalloutDismisser({
          dismiss: userCalloutDismissSpy,
          shouldShowCallout,
        }),
      },
    });
  };

  const findAlert = () => wrapper.findComponent(GlAlert);

  it.each`
    showRetentionAlert
    ${true}
    ${false}
  `(
    'displays the alert when showRetentionAlert is $showRetentionAlert',
    ({ showRetentionAlert }) => {
      createComponent({ showRetentionAlert });
      expect(findAlert().exists()).toBe(showRetentionAlert);
    },
  );

  it('displays the correct title for the alert', () => {
    createComponent({ showRetentionAlert: true });
    expect(findAlert().props('title')).toBe('Coming soon: time-based data retention limits');
  });

  it('displays the correct content for the alert', () => {
    createComponent({ showRetentionAlert: true });
    expect(findAlert().text()).toBe(
      'Starting 2025-05-15, we will gradually migrate vulnerabilities that have not been updated in the last 12 months to the vulnerability archive. Archived vulnerabilities are stored for 3 years before deletion. To access the archive, on the left sidebar, select Secure > Security Configuration > Vulnerability Management.',
    );
  });

  it('displays the learn more button', () => {
    createComponent({ showRetentionAlert: true });
    expect(findAlert().props('primaryButtonLink')).toBe(
      '/help/user/application_security/vulnerability_archival/_index.md',
    );
    expect(findAlert().props('primaryButtonText')).toBe('Learn more');
  });

  it('does not show the banner when shouldShowCallout is false', () => {
    createComponent({ showRetentionAlert: true, shouldShowCallout: false });
    expect(findAlert().exists()).toBe(false);
  });

  it('should handle closing the banner', async () => {
    createComponent({ showRetentionAlert: true, shouldShowCallout: true });
    findAlert().vm.$emit('dismiss');
    await nextTick();
    expect(userCalloutDismissSpy).toHaveBeenCalled();
  });
});
