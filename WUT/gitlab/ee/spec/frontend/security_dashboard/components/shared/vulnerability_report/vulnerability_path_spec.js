import { GlLink, GlTruncate } from '@gitlab/ui';
import VulnerabilityPath from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_path.vue';
import { mountExtended } from 'helpers/vue_test_utils_helper';
import { vulnerabilities } from '../../mock_data';

describe('VulnerabilityPath', () => {
  let wrapper;

  const defaultVulnerabilityWithImage = vulnerabilities[0];

  const createWrapper = (props = {}) => {
    wrapper = mountExtended(VulnerabilityPath, {
      propsData: {
        location: defaultVulnerabilityWithImage.location,
        ...props,
      },
    });
  };

  const findVulnerabilityText = () => wrapper.findComponent(GlTruncate);
  const findVulnerabilityLink = () => wrapper.findComponent(GlLink);

  it('should display vulnerability path as text and image', () => {
    createWrapper();

    expect(findVulnerabilityLink().exists()).toBe(false);
    expect(findVulnerabilityText().exists()).toBe(true);

    expect(findVulnerabilityText().props()).toMatchObject({
      text: defaultVulnerabilityWithImage.location.image,
      position: 'middle',
    });
  });

  it('should display path as link blob path', () => {
    const vulnerabilityWithBlobPathAndFile = vulnerabilities[1];
    createWrapper({ location: vulnerabilityWithBlobPathAndFile.location });

    expect(findVulnerabilityLink().exists()).toBe(true);
    expect(findVulnerabilityLink().attributes('href')).toBe(
      `${vulnerabilityWithBlobPathAndFile.location.blobPath}#L${vulnerabilityWithBlobPathAndFile.location.startLine}`,
    );
    expect(findVulnerabilityText().props()).toMatchObject({
      text: `${vulnerabilityWithBlobPathAndFile.location.file}:${vulnerabilityWithBlobPathAndFile.location.startLine}`,
      position: 'middle',
    });
  });

  it('should display file path before regular path', () => {
    const vulnerabilityWithFileAndPath = vulnerabilities[6];
    createWrapper({ location: vulnerabilityWithFileAndPath.location });

    expect(findVulnerabilityLink().exists()).toBe(false);
    expect(findVulnerabilityText().exists()).toBe(true);

    expect(findVulnerabilityText().props()).toMatchObject({
      text: vulnerabilityWithFileAndPath.location.file,
      position: 'middle',
    });
  });

  it('should not render component if there is no location string', () => {
    defaultVulnerabilityWithImage.location = undefined;
    createWrapper();
    expect(wrapper.find('*').exists()).toBe(false);
  });

  describe('file link', () => {
    it('shows only the file name if there is no start line', () => {
      createWrapper({ location: { file: 'test.txt', blobPath: 'blob_path.txt' } });

      expect(findVulnerabilityLink().attributes('href')).toBe('blob_path.txt');
    });

    it('shows the correct line number when there is a start line', () => {
      createWrapper({ location: { file: 'test.txt', startLine: 24, blobPath: 'blob.txt' } });

      expect(findVulnerabilityLink().attributes('href')).toBe('blob.txt#L24');
    });

    it('does not append the line number when the blobPath already has a hash', () => {
      const blobPath = 'blob.txt#L1';
      createWrapper({ location: { file: 'test.txt', startLine: 24, blobPath } });

      expect(findVulnerabilityLink().attributes('href')).toBe(blobPath);
    });

    it('shows the correct line numbers when there is a start and end line', () => {
      createWrapper({
        location: { file: 'test.txt', startLine: 24, endLine: 27, blobPath: 'blob.txt' },
      });

      expect(findVulnerabilityLink().attributes('href')).toBe('blob.txt#L24-27');
    });

    it('shows only the start line when the end line is the same', () => {
      createWrapper({
        location: { file: 'test.txt', startLine: 24, endLine: 24, blobPath: 'blob.txt' },
      });

      expect(findVulnerabilityLink().attributes('href')).toBe('blob.txt#L24');
    });
  });
});
