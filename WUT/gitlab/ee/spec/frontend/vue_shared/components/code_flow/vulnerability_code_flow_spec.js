import Vue from 'vue';
import { GlAlert, GlLoadingIcon } from '@gitlab/ui';
import VueApollo from 'vue-apollo';
import { shallowMountExtended } from 'helpers/vue_test_utils_helper';
import VulnerabilityCodeFlow from 'ee/vue_shared/components/code_flow/vulnerability_code_flow.vue';
import createMockApollo from 'helpers/mock_apollo_helper';
import blobInfoQuery from 'shared_queries/repository/blob_info.query.graphql';
import waitForPromises from 'helpers/wait_for_promises';
import CodeFlowStepsSection from 'ee/vue_shared/components/code_flow/code_flow_steps_section.vue';
import CodeFlowFileViewer from 'ee/vue_shared/components/code_flow/code_flow_file_viewer.vue';
import {
  mockVulnerability,
  TEST_ALL_BLOBS_INFO_GRAPHQL_SUCCESS_RESPONSE,
} from '../../../vulnerabilities/mock_data';

Vue.use(VueApollo);

describe('Vulnerability Code Flow', () => {
  let wrapper;

  const codeFlowProps = {
    projectFullPath: 'path/to/project',
    branchRef: 'main',
  };

  const getMutationResponse = jest
    .fn()
    .mockResolvedValue(TEST_ALL_BLOBS_INFO_GRAPHQL_SUCCESS_RESPONSE);

  const createWrapper = (
    { mutationResponse = getMutationResponse } = {},
    vulnerabilityOverrides = {},
  ) => {
    const propsData = {
      branchRef: codeFlowProps.branchRef,
      details: mockVulnerability.details,
      projectFullPath: codeFlowProps.projectFullPath,
      insideModal: false,
      showCodeFlowFileViewer: true,
      ...vulnerabilityOverrides,
    };

    wrapper = shallowMountExtended(VulnerabilityCodeFlow, {
      apolloProvider: createMockApollo([[blobInfoQuery, mutationResponse]]),
      propsData,
    });
  };

  const findCodeFlowStepsSection = () => wrapper.findComponent(CodeFlowStepsSection);
  const findCodeFlowFileViewer = () => wrapper.findAllComponents(CodeFlowFileViewer);
  const findGlLoadingIcon = () => wrapper.findComponent(GlLoadingIcon);
  const findGlAlert = () => wrapper.findComponent(GlAlert);
  const getById = (id) => wrapper.findByTestId(id);

  describe('default behavior', () => {
    it('shows the properties that should always be shown', () => {
      createWrapper();
      expect(findCodeFlowStepsSection().exists()).toBe(false);
      expect(findCodeFlowFileViewer().exists()).toBe(false);
      expect(findGlLoadingIcon().exists()).toBe(true);
      expect(findGlAlert().exists()).toBe(false);
    });
  });

  describe('loading and error states', () => {
    beforeEach(() => {
      createWrapper();
    });

    it('displays loading icon while loading', () => {
      expect(findGlLoadingIcon().exists()).toBe(true);
    });

    it('fetches the blob info', async () => {
      await waitForPromises();
      expect(getMutationResponse).toHaveBeenCalledTimes(1);
      expect(getMutationResponse).toHaveBeenCalledWith({
        projectPath: codeFlowProps.projectFullPath,
        filePath: [mockVulnerability.details.items[0][0].fileLocation.fileName],
        ref: codeFlowProps.branchRef,
        refType: null,
        shouldFetchRawText: true,
      });
    });

    it('should show code flow section component', async () => {
      await waitForPromises();
      expect(findCodeFlowStepsSection().exists()).toBe(true);
      expect(findCodeFlowStepsSection().props()).toStrictEqual({
        details: mockVulnerability.details,
        rawTextBlobs: mockVulnerability.rawTextBlobs,
      });
    });

    it('set specific class when `inside modal` is true', async () => {
      createWrapper({}, { insideModal: true });
      await waitForPromises();
      expect(findCodeFlowStepsSection().classes('code-flow-content-modal')).toBe(true);
      expect(getById('code-flows-container').classes('code-flow-content-modal')).toBe(true);
    });

    it('set specific class when `inside modal` is false', async () => {
      createWrapper();
      await waitForPromises();
      expect(findCodeFlowStepsSection().classes('code-flow-content')).toBe(true);
      expect(getById('code-flows-container').classes('code-flow-content')).toBe(true);
    });

    it('should show code flow file viewer components', async () => {
      await waitForPromises();
      expect(findCodeFlowFileViewer().exists()).toBe(true);
      expect(findCodeFlowFileViewer()).toHaveLength(1);
    });

    it('shows error alert on query error', async () => {
      const errorResponse = jest.fn().mockRejectedValue({});
      createWrapper({ mutationResponse: errorResponse });
      await waitForPromises();

      expect(findGlAlert().exists()).toBe(true);
      expect(findGlLoadingIcon().exists()).toBe(false);
      expect(getById('loading-error').text()).toBe(
        'Something went wrong while trying to get the source file.',
      );
    });

    it('set specific class when `showCodeFlowFileViewer` is true', async () => {
      createWrapper({}, { showCodeFlowFileViewer: false });
      await waitForPromises();
      expect(getById('code-flow-steps-section-container').classes('gl-w-full')).toBe(true);
      expect(getById('code-flows-container').exists()).toBe(false);
    });

    it('set specific class when `showCodeFlowFileViewer` is false', async () => {
      createWrapper();
      await waitForPromises();
      expect(getById('code-flow-steps-section-container').classes('gl-w-4/10')).toBe(true);
      expect(getById('code-flows-container').exists()).toBe(true);
    });
  });
});
