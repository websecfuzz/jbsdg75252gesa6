import VueApollo from 'vue-apollo';
import Vue from 'vue';
import { shallowMountExtended } from 'helpers/vue_test_utils_helper';
import VulnerabilityFileContentViewer from 'ee/vue_shared/vulnerabilities/components/vulnerability_file_content_viewer.vue';
import CodeBlock from '~/vue_shared/components/code_block.vue';

Vue.use(VueApollo);

const vulFileContent = {
  startLine: 2,
  endLine: 4,
  isHighlighted: false,
  content: 'line 1\nline 2\nline 3\nline 4\nline 5',
  highlightInfo: [],
  selectedStepNumber: 1,
};
const spanContent = '<span class="plain-lines">line 2\nline 3\nline 4</span>';
const codeContent = '<code class="!gl-block">line 2\nline 3\nline 4</code>';

describe('Vulnerability File Contents Viewer component', () => {
  let wrapper;

  const highlightInfoObject = {
    index: 3,
    startLine: 3,
    endLine: 3,
    stepNumber: 4,
  };

  const createWrapper = (vulnerabilityOverrides = {}) => {
    const propsData = {
      startLine: vulFileContent.startLine,
      endLine: vulFileContent.endLine,
      isHighlighted: vulFileContent.isHighlighted, // Ensure this matches the required prop
      content: vulFileContent.content,
      highlightInfo: vulFileContent.highlightInfo,
      selectedStepNumber: vulFileContent.selectedStepNumber,
      ...vulnerabilityOverrides,
    };

    wrapper = shallowMountExtended(VulnerabilityFileContentViewer, {
      propsData,
    });
  };

  const findCodeBlock = () => wrapper.findComponent(CodeBlock);

  describe('file contents loaded', () => {
    beforeEach(() => {
      createWrapper();
    });

    it('shows the correct line numbers', () => {
      const lineNumbers = wrapper.findAllByTestId('line-number').wrappers;

      expect(lineNumbers.map((x) => x.text())).toEqual(['2', '3', '4']);
    });

    it('shows the source code', () => {
      expect(findCodeBlock().exists()).toBe(true);
    });

    it('passes the given value to the code-block component when isHighlighted=false', () => {
      expect(wrapper.find('span').exists()).toBe(true);
      expect(wrapper.find('code').exists()).toBe(false);
      expect(wrapper.find('span').html()).toContain(spanContent);
    });

    it('passes the given value to the code-block component when isHighlighted=true', () => {
      createWrapper({ isHighlighted: true, highlightInfo: [highlightInfoObject] });
      expect(wrapper.find('span').exists()).toBe(false);
      expect(wrapper.find('code').exists()).toBe(true);
      expect(wrapper.find('code').html()).toContain(codeContent);
    });

    it('applies the "!gl-whitespace-pre" class if highlightInfo is empty', () => {
      createWrapper({ isHighlighted: true, highlightInfo: [] });
      expect(wrapper.find('code').classes()).toContain('!gl-whitespace-pre');
    });

    it('does not apply the "!gl-whitespace-pre" class if highlightInfo is not empty', () => {
      createWrapper({ isHighlighted: true, highlightInfo: [highlightInfoObject] });
      expect(wrapper.find('code').classes()).not.toContain('!gl-whitespace-pre');
    });
  });
});
