import { GlTableLite, GlButton } from '@gitlab/ui';
import { mountExtended } from 'helpers/vue_test_utils_helper';
import VulnerabilityArchivesTable from 'ee/security_configuration/components/vulnerability_archives_table.vue';

describe('Vulnerability Archive Table component', () => {
  let wrapper;

  const findTable = () => wrapper.findComponent(GlTableLite);
  const findButton = (rowIndex) => wrapper.findAllComponents(GlButton).at(rowIndex);
  const findTableHeaders = () => findTable().findAll('th');
  const findTableRowCells = (idx) => findTable().find('tbody').findAll('tr').at(idx).findAll('td');

  const createComponent = ({ propsData } = {}) => {
    wrapper = mountExtended(VulnerabilityArchivesTable, {
      propsData,
    });
  };

  beforeEach(() => {
    createComponent({
      propsData: {
        year: 2025,
        preparingExportForPeriod: '2025-4',
        items: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map((month) => ({
          month,
          count: month * 5,
          download: true,
        })),
      },
    });
  });

  it('displays table headers properly', () => {
    const headers = findTableHeaders();
    expect(headers.at(0).text()).toBe('Month');
    expect(headers.at(1).text()).toBe('Vulnerabilities');
    expect(headers.at(2).text()).toBe('Download');
  });

  describe.each`
    monthIndex | monthName      | isLoading
    ${0}       | ${'January'}   | ${false}
    ${1}       | ${'February'}  | ${false}
    ${2}       | ${'March'}     | ${false}
    ${3}       | ${'April'}     | ${false}
    ${4}       | ${'May'}       | ${true}
    ${5}       | ${'June'}      | ${false}
    ${6}       | ${'July'}      | ${false}
    ${7}       | ${'August'}    | ${false}
    ${8}       | ${'September'} | ${false}
    ${9}       | ${'October'}   | ${false}
    ${10}      | ${'November'}  | ${false}
    ${11}      | ${'December'}  | ${false}
  `('for month: $monthName', ({ monthIndex, monthName, isLoading }) => {
    it('displays table row properly', () => {
      const cells = findTableRowCells(monthIndex);
      expect(cells.at(0).text()).toBe(monthName);
      // See createWrapper method. We generate mock counts based on mountIndex
      expect(cells.at(1).text()).toBe(`${monthIndex * 5} vulnerabilities`);
      expect(cells.at(2).findComponent(GlButton).exists()).toBe(true);
    });

    it('displays the loading icon on the correct button', () => {
      expect(findButton(monthIndex).props('loading')).toBe(isLoading);
    });
  });

  it('emits an event when the download button is clicked', async () => {
    const button = findButton(0);

    expect(button.exists()).toBe(true);
    expect(button.props('icon')).toBe('download');

    await button.trigger('click');

    // Should emit the first month
    expect(wrapper.emitted('download')[0][0]).toEqual(0);
  });
});
