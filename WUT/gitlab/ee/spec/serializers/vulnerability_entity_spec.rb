# frozen_string_literal: true

require 'spec_helper'

RSpec.describe VulnerabilityEntity do
  let_it_be(:project) { create(:project) }
  let_it_be(:user) { create(:user) }
  let_it_be(:vulnerability) { create(:vulnerability, :with_read, project: project, author: user) }

  subject { described_class.new(vulnerability).as_json }

  it 'exposes vulnerability-specific elements' do
    expect(subject).to include(
      id: vulnerability.id,
      title: vulnerability.title,
      state: vulnerability.state,
      severity: vulnerability.severity,
      report_type: vulnerability.report_type,
      resolved_on_default_branch: vulnerability.resolved_on_default_branch,
      project_default_branch: vulnerability.project_default_branch,
      resolved_at: vulnerability.resolved_at,
      resolved_by_id: vulnerability.resolved_by_id,
      dismissed_at: vulnerability.dismissed_at,
      dismissed_by_id: vulnerability.dismissed_by_id,
      confirmed_at: vulnerability.confirmed_at,
      confirmed_by_id: vulnerability.confirmed_by_id,
      detected_at: vulnerability.created_at,
      reachability: vulnerability.reachability,
      ai_resolution_enabled: vulnerability.ai_resolution_enabled?
    )
  end

  it 'exposes state_transitions, issue_links and merge_request_links' do
    expect(subject).to include(:state_transitions, :issue_links, :merge_request_links)
  end

  context 'with sbom_occurrences' do
    let_it_be(:occurrence) do
      create(:sbom_occurrence, project: project, vulnerabilities: [vulnerability])
    end

    before do
      vulnerability.sbom_occurrences = [occurrence]
    end

    it 'exposes sbom_occurrences' do
      expect(subject).to include(
        sbom_occurrences: [
          {
            id: occurrence.id,
            input_file_path: occurrence.input_file_path,
            has_dependency_paths: false
          }
        ]
      )
    end

    context 'when occurrences exceed MAX_SBOM_OCCURRENCES' do
      let_it_be(:occurrence2) do
        create(:sbom_occurrence, project: project, vulnerabilities: [vulnerability])
      end

      before do
        stub_const("#{described_class}::MAX_SBOM_OCCURRENCES", 1)
      end

      it 'returns up to limit' do
        expect(subject[:sbom_occurrences].length).to eq(1)
      end
    end
  end
end
