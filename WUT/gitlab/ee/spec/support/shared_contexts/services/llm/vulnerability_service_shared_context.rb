# frozen_string_literal: true

RSpec.shared_context 'in llm vulnerability service execute' do
  let_it_be_with_reload(:namespace) { create(:group_with_plan, plan: :ultimate_plan) }

  let_it_be(:user) { create(:user) }
  let_it_be(:project) { create(:project, namespace: namespace) }
  let_it_be(:vulnerability) { create(:vulnerability, :with_finding, project: project) }
  let_it_be(:options) { { include_source_code: true } }

  subject { described_class.new(user, vulnerability, options) }

  before do
    stub_licensed_features(security_dashboard: true)

    # Llm::BaseService checks for user.any_group_with_ai_available
    allow(user).to receive(:any_group_with_ai_available?).and_return(true)

    allow(Ability).to receive(:allowed?).and_call_original

    # Vulnerability abilities call Llm::FeatureAuthorizer, which checks:
    # - ai_global_switch,
    # - parent group membership
    # - ai_features license (via StageCheck)
    # - experiment and beta features enabled (via StageCheck)
    allow(Ability).to receive(:allowed?).with(user, ability_name, vulnerability).and_return(allowed)
  end
end
