import { mountExtended } from 'helpers/vue_test_utils_helper';
import * as urlUtils from '~/lib/utils/url_utility';
import App from 'ee/security_orchestration/components/policy_editor/app.vue';
import { DEFAULT_ASSIGNED_POLICY_PROJECT } from 'ee/security_orchestration/constants';
import RuleSection from 'ee/security_orchestration/components/policy_editor/vulnerability_management/rule/rule_section.vue';
import { DEFAULT_PROVIDE } from '../mocks/mocks';
import { verify } from '../utils';
import { mockVulnerabilityManagementManifest } from './mocks';

describe('Vulnerability management policy rules', () => {
  let wrapper;

  const createWrapper = ({ propsData = {}, provide = {} } = {}) => {
    wrapper = mountExtended(App, {
      propsData: {
        assignedPolicyProject: DEFAULT_ASSIGNED_POLICY_PROJECT,
        ...propsData,
      },
      provide: {
        ...DEFAULT_PROVIDE,
        ...provide,
      },
      stubs: {
        SourceEditor: true,
      },
    });
  };

  const findScannersListbox = () => wrapper.findByTestId('scanners-select');
  const findSeveritiesListbox = () => wrapper.findByTestId('severities-select');

  beforeEach(() => {
    jest.spyOn(urlUtils, 'getParameterByName').mockReturnValue('vulnerability_management_policy');
  });

  const findRuleSection = () => wrapper.findComponent(RuleSection);

  describe('no longer detected', () => {
    beforeEach(() => {
      createWrapper();
    });

    it('parses no longer detected rule', async () => {
      const verifyRuleMode = () => {
        expect(findRuleSection().exists()).toBe(true);
      };

      await findScannersListbox().vm.$emit('input', ['dast', 'sast']);
      await findSeveritiesListbox().vm.$emit('input', ['medium', 'low']);

      await verify({
        manifest: mockVulnerabilityManagementManifest,
        verifyRuleMode,
        wrapper,
      });
    });
  });
});
