{
  "@generated": "Fri, 13 Apr 2018 09:22:01",
  "@version": "2.7.0",
  "site": [
    {
      "@host": "goat",
      "@name": "http://goat:8080",
      "@port": "8080",
      "@ssl": "false",
      "alerts": [
        {
          "alert": "Anti CSRF Tokens Scanner",
          "confidence": "2",
          "count": "4",
          "cweid": "352",
          "desc": "<p>A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.</p><p></p><p>CSRF attacks are effective in a number of situations, including:</p><p>    * The victim has an active session on the target site.</p><p>    * The victim is authenticated via HTTP auth on the target site.</p><p>    * The victim is on the same local network as the target site.</p><p></p><p>CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.</p>",
          "instances": [
            {
              "attack": "",
              "evidence": "<form method=\"POST\" style=\"width: 200px;\" action=\"/WebGoat/login\">",
              "method": "GET",
              "param": "",
              "uri": "http://goat:8080/WebGoat/login"
            },
            {
              "attack": "",
              "evidence": "<form method=\"POST\" style=\"width: 200px;\" action=\"/WebGoat/login\">",
              "method": "GET",
              "param": "",
              "uri": "http://goat:8080/WebGoat/login?error"
            },
            {
              "attack": "",
              "evidence": "<form class=\"form-horizontal\" action=\"/WebGoat/register.mvc\" method=\"POST\">",
              "method": "POST",
              "param": "",
              "uri": "http://goat:8080/WebGoat/register.mvc"
            },
            {
              "attack": "",
              "evidence": "<form class=\"form-horizontal\" action=\"/WebGoat/register.mvc\" method=\"POST\">",
              "method": "GET",
              "param": "",
              "uri": "http://goat:8080/WebGoat/registration"
            }
          ],
          "name": "Anti CSRF Tokens Scanner",
          "otherinfo": "",
          "pluginid": "20012",
          "reference": "<p>http://projects.webappsec.org/Cross-Site-Request-Forgery</p><p>http://cwe.mitre.org/data/definitions/352.html</p>",
          "riskcode": "3",
          "riskdesc": "High (Medium)",
          "solution": "<p>Phase: Architecture and Design</p><p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</p><p>For example, use anti-CSRF packages such as the OWASP CSRFGuard.</p><p></p><p>Phase: Implementation</p><p>Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.</p><p></p><p>Phase: Architecture and Design</p><p>Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).</p><p>Note that this can be bypassed using XSS.</p><p></p><p>Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.</p><p>Note that this can be bypassed using XSS.</p><p></p><p>Use the ESAPI Session Management control.</p><p>This control includes a component for CSRF.</p><p></p><p>Do not use the GET method for any request that triggers a state change.</p><p></p><p>Phase: Implementation</p><p>Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.</p>",
          "sourceid": "1",
          "wascid": "9"
        },
        {
          "alert": "Absence of Anti-CSRF Tokens",
          "confidence": "2",
          "count": "4",
          "cweid": "352",
          "desc": "<p>No Anti-CSRF tokens were found in a HTML submission form.</p><p>A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.</p><p></p><p>CSRF attacks are effective in a number of situations, including:</p><p>    * The victim has an active session on the target site.</p><p>    * The victim is authenticated via HTTP auth on the target site.</p><p>    * The victim is on the same local network as the target site.</p><p></p><p>CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.</p>",
          "instances": [
            {
              "attack": "",
              "evidence": "<form method=\"POST\" style=\"width: 200px;\" action=\"/WebGoat/login\">",
              "method": "GET",
              "param": "",
              "uri": "http://goat:8080/WebGoat/login"
            },
            {
              "attack": "",
              "evidence": "<form method=\"POST\" style=\"width: 200px;\" action=\"/WebGoat/login\">",
              "method": "GET",
              "param": "",
              "uri": "http://goat:8080/WebGoat/login?error"
            },
            {
              "attack": "",
              "evidence": "<form class=\"form-horizontal\" action=\"/WebGoat/register.mvc\" method=\"POST\">",
              "method": "POST",
              "param": "",
              "uri": "http://goat:8080/WebGoat/register.mvc"
            },
            {
              "attack": "",
              "evidence": "<form class=\"form-horizontal\" action=\"/WebGoat/register.mvc\" method=\"POST\">",
              "method": "GET",
              "param": "",
              "uri": "http://goat:8080/WebGoat/registration"
            }
          ],
          "name": "Absence of Anti-CSRF Tokens",
          "otherinfo": "<p>No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret] was found in the following HTML form: [Form 1: \"exampleInputEmail1\" \"exampleInputPassword1\" ].</p>",
          "pluginid": "10202",
          "reference": "<p>http://projects.webappsec.org/Cross-Site-Request-Forgery</p><p>http://cwe.mitre.org/data/definitions/352.html</p>",
          "riskcode": "1",
          "riskdesc": "Low (Medium)",
          "solution": "<p>Phase: Architecture and Design</p><p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</p><p>For example, use anti-CSRF packages such as the OWASP CSRFGuard.</p><p></p><p>Phase: Implementation</p><p>Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.</p><p></p><p>Phase: Architecture and Design</p><p>Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).</p><p>Note that this can be bypassed using XSS.</p><p></p><p>Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.</p><p>Note that this can be bypassed using XSS.</p><p></p><p>Use the ESAPI Session Management control.</p><p>This control includes a component for CSRF.</p><p></p><p>Do not use the GET method for any request that triggers a state change.</p><p></p><p>Phase: Implementation</p><p>Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.</p>",
          "sourceid": "3",
          "wascid": "9"
        },
        {
          "alert": "Cookie No HttpOnly Flag",
          "confidence": "2",
          "count": "2",
          "cweid": "16",
          "desc": "<p>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.</p>",
          "instances": [
            {
              "attack": "",
              "evidence": "Set-Cookie: JSESSIONID",
              "method": "GET",
              "param": "JSESSIONID",
              "uri": "http://goat:8080/WebGoat/login?logout"
            },
            {
              "attack": "",
              "evidence": "Set-Cookie: JSESSIONID",
              "method": "GET",
              "param": "JSESSIONID",
              "uri": "http://goat:8080/WebGoat/logout"
            }
          ],
          "name": "Cookie No HttpOnly Flag",
          "otherinfo": "",
          "pluginid": "10010",
          "reference": "<p>http://www.owasp.org/index.php/HttpOnly</p>",
          "riskcode": "1",
          "riskdesc": "Low (Medium)",
          "solution": "<p>Ensure that the HttpOnly flag is set for all cookies.</p>",
          "sourceid": "3",
          "wascid": "13"
        },
        {
          "alert": "Cookie Without SameSite Attribute",
          "confidence": "2",
          "count": "2",
          "cweid": "16",
          "desc": "<p>A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.</p>",
          "instances": [
            {
              "attack": "",
              "evidence": "Set-Cookie: JSESSIONID",
              "method": "GET",
              "param": "JSESSIONID",
              "uri": "http://goat:8080/WebGoat/login?logout"
            },
            {
              "attack": "",
              "evidence": "Set-Cookie: JSESSIONID",
              "method": "GET",
              "param": "JSESSIONID",
              "uri": "http://goat:8080/WebGoat/logout"
            }
          ],
          "name": "Cookie Without SameSite Attribute",
          "otherinfo": "",
          "pluginid": "10054",
          "reference": "<p>https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site</p>",
          "riskcode": "1",
          "riskdesc": "Low (Medium)",
          "solution": "<p>Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.</p>",
          "sourceid": "3",
          "wascid": "13"
        },
        {
          "alert": "Charset Mismatch (Header Versus Meta Content-Type Charset)",
          "confidence": "1",
          "count": "1",
          "cweid": "16",
          "desc": "<p>This check identifies responses where the HTTP Content-Type header declares a charset different from the charset defined by the body of the HTML or XML. When there's a charset mismatch between the HTTP header and content body Web browsers can be forced into an undesirable content-sniffing mode to determine the content's correct character set.</p><p></p><p>An attacker could manipulate content on the page to be interpreted in an encoding of their choice. For example, if an attacker can control content at the beginning of the page, they could inject script using UTF-7 encoded text and manipulate some browsers into interpreting that text.</p>",
          "instances": [
            {
              "attack": "",
              "evidence": "",
              "method": "GET",
              "param": "",
              "uri": "http://goat:8080/WebGoat/start.mvc"
            }
          ],
          "name": "Charset Mismatch (Header Versus Meta Content-Type Charset)",
          "otherinfo": "<p>There was a charset mismatch between the HTTP Header and the META content-type encoding declarations: [UTF-8] and [ISO-8859-1] do not match.</p>",
          "pluginid": "90011",
          "reference": "<p>http://code.google.com/p/browsersec/wiki/Part2#Character_set_handling_and_detection</p>",
          "riskcode": "0",
          "riskdesc": "Informational (Low)",
          "solution": "<p>Force UTF-8 for all text content in both the HTTP header and meta tags in HTML or encoding declarations in XML.</p>",
          "sourceid": "3",
          "wascid": "15"
        },
        {
          "alert": "Information Disclosure - Suspicious Comments",
          "confidence": "2",
          "count": "4",
          "cweid": "200",
          "desc": "<p>The response appears to contain suspicious comments which may help an attacker.</p>",
          "instances": [
            {
              "attack": "",
              "evidence": "",
              "method": "GET",
              "param": "",
              "uri": "http://goat:8080/WebGoat/js/html5shiv.js"
            },
            {
              "attack": "",
              "evidence": "",
              "method": "GET",
              "param": "",
              "uri": "http://goat:8080/WebGoat/js/modernizr-2.6.2.min.js"
            },
            {
              "attack": "",
              "evidence": "",
              "method": "GET",
              "param": "",
              "uri": "http://goat:8080/WebGoat/js/respond.min.js"
            },
            {
              "attack": "",
              "evidence": "",
              "method": "GET",
              "param": "",
              "uri": "http://goat:8080/WebGoat/start.mvc"
            }
          ],
          "name": "Information Disclosure - Suspicious Comments",
          "otherinfo": "<p><!--<button type=\"button\" id=\"admin-button\" class=\"btn btn-default right_nav_button\" title=\"Administrator\">--></p><p><!--<button type=\"button\" id=\"user-management\" class=\"btn btn-default right_nav_button\"--></p><p><!--title=\"User management\">--></p><p></p>",
          "pluginid": "10027",
          "reference": "<p></p>",
          "riskcode": "0",
          "riskdesc": "Informational (Medium)",
          "solution": "<p>Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.</p>",
          "sourceid": "3",
          "wascid": "13"
        },
        {
          "alert": "Loosely Scoped Cookie",
          "confidence": "1",
          "count": "2",
          "cweid": "565",
          "desc": "<p>Cookies can be scoped by domain or path. This check is only concerned with domain scope.The domain scope applied to a cookie determines which domains can access it. For example, a cookie can be scoped strictly to a subdomain e.g. www.nottrusted.com, or loosely scoped to a parent domain e.g. nottrusted.com. In the latter case, any subdomain of nottrusted.com can access the cookie. Loosely scoped cookies are common in mega-applications like google.com and live.com. Cookies set from a subdomain like app.foo.bar are transmitted only to that domain by the browser. However, cookies scoped to a parent-level domain may be transmitted to the parent, or any subdomain of the parent.</p>",
          "instances": [
            {
              "attack": "",
              "evidence": "",
              "method": "GET",
              "param": "",
              "uri": "http://goat:8080/WebGoat/login?logout"
            },
            {
              "attack": "",
              "evidence": "",
              "method": "GET",
              "param": "",
              "uri": "http://goat:8080/WebGoat/logout"
            }
          ],
          "name": "Loosely Scoped Cookie",
          "otherinfo": "<p>The origin domain used for comparison was: </p><p>goat</p><p>JSESSIONID=78EC2C9D7CE583610DCC7826EE416D7F</p><p></p>",
          "pluginid": "90033",
          "reference": "<p>https://tools.ietf.org/html/rfc6265#section-4.1</p><p>https://www.owasp.org/index.php/Testing_for_cookies_attributes_(OTG-SESS-002)</p><p>http://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_cookies</p>",
          "riskcode": "0",
          "riskdesc": "Informational (Low)",
          "solution": "<p>Always scope cookies to a FQDN (Fully Qualified Domain Name).</p>",
          "sourceid": "3",
          "wascid": "15"
        },
        {
          "alert": "Timestamp Disclosure - Unix",
          "confidence": "1",
          "count": "5",
          "cweid": "200",
          "desc": "<p>A timestamp was disclosed by the application/web server - Unix</p>",
          "instances": [
            {
              "attack": "",
              "evidence": "00000000",
              "method": "GET",
              "param": "",
              "uri": "http://goat:8080/WebGoat/plugins/bootstrap/css/bootstrap.min.css"
            },
            {
              "attack": "",
              "evidence": "33333333",
              "method": "GET",
              "param": "",
              "uri": "http://goat:8080/WebGoat/plugins/bootstrap/css/bootstrap.min.css"
            },
            {
              "attack": "",
              "evidence": "42857143",
              "method": "GET",
              "param": "",
              "uri": "http://goat:8080/WebGoat/plugins/bootstrap/css/bootstrap.min.css"
            },
            {
              "attack": "",
              "evidence": "80000000",
              "method": "GET",
              "param": "",
              "uri": "http://goat:8080/WebGoat/plugins/bootstrap/css/bootstrap.min.css"
            },
            {
              "attack": "",
              "evidence": "66666667",
              "method": "GET",
              "param": "",
              "uri": "http://goat:8080/WebGoat/plugins/bootstrap/css/bootstrap.min.css"
            }
          ],
          "name": "Timestamp Disclosure - Unix",
          "otherinfo": "<p>00000000, which evaluates to: 1970-01-01 00:00:00</p>",
          "pluginid": "10096",
          "reference": "<p>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure</p><p>http://projects.webappsec.org/w/page/13246936/Information%20Leakage</p>",
          "riskcode": "0",
          "riskdesc": "Informational (Low)",
          "solution": "<p>Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.</p>",
          "sourceid": "3",
          "wascid": "13"
        }
      ]
    },
    {
      "@host": "goat",
      "@name": "https://goat:8080",
      "@port": "8080",
      "@ssl": "",
      "alerts": [
        {
          "alert": "Anti CSRF Tokens Scanner",
          "confidence": "2",
          "count": "1",
          "cweid": "352",
          "desc": "<p>A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.</p><p></p><p>CSRF attacks are effective in a number of situations, including:</p><p>    * The victim has an active session on the target site.</p><p>    * The victim is authenticated via HTTP auth on the target site.</p><p>    * The victim is on the same local network as the target site.</p><p></p><p>CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.</p>",
          "instances": [
            {
              "attack": "",
              "evidence": "<form class=\"form-horizontal\" action=\"/WebGoat/register.mvc\" method=\"POST\">",
              "method": "GET",
              "param": "",
              "uri": "https://goat:8080/WebGoat/registration"
            }
          ],
          "name": "Anti CSRF Tokens Scanner",
          "otherinfo": "",
          "pluginid": "20012",
          "reference": "<p>http://projects.webappsec.org/Cross-Site-Request-Forgery</p><p>http://cwe.mitre.org/data/definitions/352.html</p>",
          "riskcode": "3",
          "riskdesc": "High (Medium)",
          "solution": "<p>Phase: Architecture and Design</p><p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</p><p>For example, use anti-CSRF packages such as the OWASP CSRFGuard.</p><p></p><p>Phase: Implementation</p><p>Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.</p><p></p><p>Phase: Architecture and Design</p><p>Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).</p><p>Note that this can be bypassed using XSS.</p><p></p><p>Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.</p><p>Note that this can be bypassed using XSS.</p><p></p><p>Use the ESAPI Session Management control.</p><p>This control includes a component for CSRF.</p><p></p><p>Do not use the GET method for any request that triggers a state change.</p><p></p><p>Phase: Implementation</p><p>Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.</p>",
          "sourceid": "1",
          "wascid": "9"
        }
      ]
    }
  ],
  "spider": {
    "progress": "100",
    "result": {
      "urlsInScope": [
        {
          "method": "GET",
          "processed": "false",
          "reasonNotProcessed": "Not Text",
          "statusCode": "404",
          "statusReason": "",
          "url": "http://goat:8080/"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "302",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "302",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/attack"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "200",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/css/animate.css"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "200",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/css/coderay.css"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "200",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/css/font-awesome.min.css"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "200",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/css/lessons.css"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "200",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/css/main.css"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "404",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/images/favicon.ico"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "200",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/js/html5shiv.js"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "200",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/js/libs/require.min.js"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "200",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/js/modernizr-2.6.2.min.js"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "200",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/js/respond.min.js"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "200",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/login"
        },
        {
          "method": "POST",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "302",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/login"
        },
        {
          "method": "GET",
          "processed": "false",
          "reasonNotProcessed": "Max Depth",
          "statusCode": "200",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/login?error"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "302",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/login?logout"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "302",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/logout"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "200",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/plugins/bootstrap/css/bootstrap.min.css"
        },
        {
          "method": "POST",
          "processed": "false",
          "reasonNotProcessed": "Max Depth",
          "statusCode": "200",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/register.mvc"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "200",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/registration"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "200",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/start.mvc"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "302",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat/welcome.mvc"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "302",
          "statusReason": "",
          "url": "http://goat:8080/WebGoat"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "404",
          "statusReason": "",
          "url": "http://goat:8080/robots.txt"
        },
        {
          "method": "GET",
          "processed": "true",
          "reasonNotProcessed": "",
          "statusCode": "404",
          "statusReason": "",
          "url": "http://goat:8080/sitemap.xml"
        },
        {
          "method": "GET",
          "processed": "false",
          "reasonNotProcessed": "Not Text",
          "statusCode": "404",
          "statusReason": "",
          "url": "http://goat:8080"
        }
      ],
      "urlsIoError": [

      ],
      "urlsOutOfScope": [
        "http://daneden.me/animate",
        "http://fontawesome.io/",
        "http://fontawesome.io/license",
        "http://getbootstrap.com/",
        "https://github.com/nickpettit/glide",
        "https://github.com/twbs/bootstrap/blob/master/LICENSE"
      ]
    },
    "state": "FINISHED"
  },
  "version": "15.0.6",
  "vulnerabilities": [
    {
      "id": "03520b88-18c0-49af-9378-6721ce320672",
      "category": "dast",
      "confidence": "Medium",
      "cve": "20012",
      "description": "A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf. CSRF attacks are effective in a number of situations, including: * The victim has an active session on the target site. * The victim is authenticated via HTTP auth on the target site. * The victim is on the same local network as the target site. CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
      "details": {
        "diff": {
          "type": "diff",
          "name": "Diff",
          "before": "one potato,\ntwo potato,\nthree potato,\nfloor",
          "after": "one potato,\ntwo potato,\ntequila!,\nfloor"
        },
        "table": {
          "type": "table",
          "name": "Pretty table",
          "header": [
            {
              "type": "text",
              "value": "Number"
            },
            {
              "type": "text",
              "value": "Address"
            }
          ],
          "rows": [
            [
              {
                "type": "text",
                "value": "1"
              },
              {
                "type": "url",
                "href": "http://1.example.com/"
              }
            ],
            [
              {
                "type": "text",
                "value": "2"
              },
              {
                "type": "url",
                "href": "http://2.example.com/"
              }
            ]
          ]
        },
        "comments": {
          "name": "Comments",
          "type": "named-list",
          "items": {
            "Comment #1": {
              "name": "Fred:",
              "type": "text",
              "value": "Hi Wilma"
            },
            "Comment #2": {
              "name": "Wilma:",
              "type": "markdown",
              "value": "Hi Fred. Checkout [GitLab](http://gitlab.com)"
            },
            "A list": {
              "name": "resources",
              "type": "list",
              "items": [
                {
                  "type": "value",
                  "value": "42"
                },
                {
                  "type": "value",
                  "value": "Life, the universe and everything"
                }
              ]
            }
          }
        },
        "code": {
          "type": "code",
          "name": "code sample",
          "value": "<img src=x onerror=alert(1)>",
          "lang": "html"
        },
        "file": {
          "type": "file-location",
          "name": "a file location",
          "file_name": "index.js",
          "line_start": 1,
          "line_end": 2
        },
        "commit": {
          "type": "commit",
          "name": "some commit",
          "value": "<img src=x onerror=alert(1)>"
        },
        "another_commit": {
          "type": "commit",
          "name": "another_commit",
          "value": "deadbeef"
        },
        "login_url": {
          "name": "Login URL",
          "type": "url",
          "href": "http://site.com/login"
        },
        "logout_url": {
          "name": "Logout URL",
          "type": "url",
          "href": "http://site.com/logout"
        },
        "urls": {
          "name": "URLs",
          "type": "list",
          "items": [
            {
              "type": "url",
              "href": "http://site.com/page/1"
            },
            {
              "type": "url",
              "href": "http://site.com/page/2"
            },
            {
              "type": "url",
              "href": "http://site.com/page/3"
            }
          ]
        }
      },
      "identifiers": [
        {
          "name": "Anti CSRF Tokens Scanner",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "20012"
        },
        {
          "name": "CWE-352",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/352.html",
          "value": "352"
        },
        {
          "name": "WASC-9",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Cross-Site-Request-Forgery",
          "value": "9"
        }
      ],
      "links": [
        {
          "url": "http://projects.webappsec.org/Cross-Site-Request-Forgery"
        },
        {
          "url": "http://cwe.mitre.org/data/definitions/352.html"
        }
      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "",
        "path": "/WebGoat/login"
      },
      "message": "Anti CSRF Tokens Scanner",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "High",
      "solution": "Phase: Architecture and Design Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. Phase: Implementation Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script. Phase: Architecture and Design Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). Note that this can be bypassed using XSS. Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation. Note that this can be bypassed using XSS. Use the ESAPI Session Management control. This control includes a component for CSRF. Do not use the GET method for any request that triggers a state change. Phase: Implementation Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons."
    },
    {
      "id": "0210afea-83e3-4063-941c-6821c309dd31",
      "category": "dast",
      "confidence": "Medium",
      "cve": "20012",
      "description": "A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf. CSRF attacks are effective in a number of situations, including: * The victim has an active session on the target site. * The victim is authenticated via HTTP auth on the target site. * The victim is on the same local network as the target site. CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
      "identifiers": [
        {
          "name": "Anti CSRF Tokens Scanner",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "20012"
        },
        {
          "name": "CWE-352",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/352.html",
          "value": "352"
        },
        {
          "name": "WASC-9",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Cross-Site-Request-Forgery",
          "value": "9"
        }
      ],
      "links": [
        {
          "url": "http://projects.webappsec.org/Cross-Site-Request-Forgery"
        },
        {
          "url": "http://cwe.mitre.org/data/definitions/352.html"
        }
      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "",
        "path": "/WebGoat/login?error"
      },
      "message": "Anti CSRF Tokens Scanner",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "High",
      "solution": "Phase: Architecture and Design Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. Phase: Implementation Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script. Phase: Architecture and Design Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). Note that this can be bypassed using XSS. Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation. Note that this can be bypassed using XSS. Use the ESAPI Session Management control. This control includes a component for CSRF. Do not use the GET method for any request that triggers a state change. Phase: Implementation Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons."
    },
    {
      "id": "aba6700c-b3eb-4bd8-bf81-82accfcf2ad3",
      "category": "dast",
      "confidence": "Medium",
      "cve": "20012",
      "description": "A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf. CSRF attacks are effective in a number of situations, including: * The victim has an active session on the target site. * The victim is authenticated via HTTP auth on the target site. * The victim is on the same local network as the target site. CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
      "identifiers": [
        {
          "name": "Anti CSRF Tokens Scanner",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "20012"
        },
        {
          "name": "CWE-352",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/352.html",
          "value": "352"
        },
        {
          "name": "WASC-9",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Cross-Site-Request-Forgery",
          "value": "9"
        }
      ],
      "links": [
        {
          "url": "http://projects.webappsec.org/Cross-Site-Request-Forgery"
        },
        {
          "url": "http://cwe.mitre.org/data/definitions/352.html"
        }
      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "",
        "path": "/WebGoat/registration"
      },
      "message": "Anti CSRF Tokens Scanner",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "High",
      "solution": "Phase: Architecture and Design Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. Phase: Implementation Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script. Phase: Architecture and Design Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). Note that this can be bypassed using XSS. Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation. Note that this can be bypassed using XSS. Use the ESAPI Session Management control. This control includes a component for CSRF. Do not use the GET method for any request that triggers a state change. Phase: Implementation Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons."
    },
    {
      "id": "5f845e85-4c22-41e4-b784-eb25ca92e412",
      "category": "dast",
      "confidence": "Medium",
      "cve": "20012",
      "description": "A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf. CSRF attacks are effective in a number of situations, including: * The victim has an active session on the target site. * The victim is authenticated via HTTP auth on the target site. * The victim is on the same local network as the target site. CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
      "identifiers": [
        {
          "name": "Anti CSRF Tokens Scanner",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "20012"
        },
        {
          "name": "CWE-352",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/352.html",
          "value": "352"
        },
        {
          "name": "WASC-9",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Cross-Site-Request-Forgery",
          "value": "9"
        }
      ],
      "links": [
        {
          "url": "http://projects.webappsec.org/Cross-Site-Request-Forgery"
        },
        {
          "url": "http://cwe.mitre.org/data/definitions/352.html"
        }
      ],
      "location": {
        "hostname": "https://goat:8080",
        "method": "GET",
        "param": "",
        "path": "/WebGoat/registration"
      },
      "message": "Anti CSRF Tokens Scanner",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "High",
      "solution": "Phase: Architecture and Design Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. Phase: Implementation Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script. Phase: Architecture and Design Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). Note that this can be bypassed using XSS. Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation. Note that this can be bypassed using XSS. Use the ESAPI Session Management control. This control includes a component for CSRF. Do not use the GET method for any request that triggers a state change. Phase: Implementation Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons."
    },
    {
      "id": "a8b36c8c-8ac8-4def-b775-1e48d12ba917",
      "category": "dast",
      "confidence": "Medium",
      "cve": "20012",
      "description": "A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf. CSRF attacks are effective in a number of situations, including: * The victim has an active session on the target site. * The victim is authenticated via HTTP auth on the target site. * The victim is on the same local network as the target site. CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
      "identifiers": [
        {
          "name": "Anti CSRF Tokens Scanner",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "20012"
        },
        {
          "name": "CWE-352",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/352.html",
          "value": "352"
        },
        {
          "name": "WASC-9",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Cross-Site-Request-Forgery",
          "value": "9"
        }
      ],
      "links": [
        {
          "url": "http://projects.webappsec.org/Cross-Site-Request-Forgery"
        },
        {
          "url": "http://cwe.mitre.org/data/definitions/352.html"
        }
      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "POST",
        "param": "",
        "path": "/WebGoat/register.mvc"
      },
      "message": "Anti CSRF Tokens Scanner",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "High",
      "solution": "Phase: Architecture and Design Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. Phase: Implementation Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script. Phase: Architecture and Design Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). Note that this can be bypassed using XSS. Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation. Note that this can be bypassed using XSS. Use the ESAPI Session Management control. This control includes a component for CSRF. Do not use the GET method for any request that triggers a state change. Phase: Implementation Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons."
    },
    {
      "id": "0d8dc698-649b-49fe-8cea-0ba04b805e60",
      "category": "dast",
      "confidence": "Medium",
      "cve": "10202",
      "description": "No Anti-CSRF tokens were found in a HTML submission form. A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf. CSRF attacks are effective in a number of situations, including: * The victim has an active session on the target site. * The victim is authenticated via HTTP auth on the target site. * The victim is on the same local network as the target site. CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
      "identifiers": [
        {
          "name": "Absence of Anti-CSRF Tokens",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "10202"
        },
        {
          "name": "CWE-352",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/352.html",
          "value": "352"
        },
        {
          "name": "WASC-9",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Cross-Site-Request-Forgery",
          "value": "9"
        }
      ],
      "links": [
        {
          "url": "http://projects.webappsec.org/Cross-Site-Request-Forgery"
        },
        {
          "url": "http://cwe.mitre.org/data/definitions/352.html"
        }
      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "",
        "path": "/WebGoat/login"
      },
      "message": "Absence of Anti-CSRF Tokens",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "Low",
      "solution": "Phase: Architecture and Design Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. Phase: Implementation Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script. Phase: Architecture and Design Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). Note that this can be bypassed using XSS. Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation. Note that this can be bypassed using XSS. Use the ESAPI Session Management control. This control includes a component for CSRF. Do not use the GET method for any request that triggers a state change. Phase: Implementation Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons."
    },
    {
      "id": "28c9e5be-998e-4ec8-8a83-ca14eeb6aa6f",
      "category": "dast",
      "confidence": "Medium",
      "cve": "10202",
      "description": "No Anti-CSRF tokens were found in a HTML submission form. A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf. CSRF attacks are effective in a number of situations, including: * The victim has an active session on the target site. * The victim is authenticated via HTTP auth on the target site. * The victim is on the same local network as the target site. CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
      "identifiers": [
        {
          "name": "Absence of Anti-CSRF Tokens",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "10202"
        },
        {
          "name": "CWE-352",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/352.html",
          "value": "352"
        },
        {
          "name": "WASC-9",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Cross-Site-Request-Forgery",
          "value": "9"
        }
      ],
      "links": [
        {
          "url": "http://projects.webappsec.org/Cross-Site-Request-Forgery"
        },
        {
          "url": "http://cwe.mitre.org/data/definitions/352.html"
        }
      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "",
        "path": "/WebGoat/login?error"
      },
      "message": "Absence of Anti-CSRF Tokens",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "Low",
      "solution": "Phase: Architecture and Design Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. Phase: Implementation Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script. Phase: Architecture and Design Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). Note that this can be bypassed using XSS. Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation. Note that this can be bypassed using XSS. Use the ESAPI Session Management control. This control includes a component for CSRF. Do not use the GET method for any request that triggers a state change. Phase: Implementation Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons."
    },
    {
      "id": "02dcc88e-af9b-46c5-9cd0-77dd89d6d5bb",
      "category": "dast",
      "confidence": "Medium",
      "cve": "10202",
      "description": "No Anti-CSRF tokens were found in a HTML submission form. A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf. CSRF attacks are effective in a number of situations, including: * The victim has an active session on the target site. * The victim is authenticated via HTTP auth on the target site. * The victim is on the same local network as the target site. CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
      "identifiers": [
        {
          "name": "Absence of Anti-CSRF Tokens",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "10202"
        },
        {
          "name": "CWE-352",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/352.html",
          "value": "352"
        },
        {
          "name": "WASC-9",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Cross-Site-Request-Forgery",
          "value": "9"
        }
      ],
      "links": [
        {
          "url": "http://projects.webappsec.org/Cross-Site-Request-Forgery"
        },
        {
          "url": "http://cwe.mitre.org/data/definitions/352.html"
        }
      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "",
        "path": "/WebGoat/registration"
      },
      "message": "Absence of Anti-CSRF Tokens",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "Low",
      "solution": "Phase: Architecture and Design Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. Phase: Implementation Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script. Phase: Architecture and Design Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). Note that this can be bypassed using XSS. Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation. Note that this can be bypassed using XSS. Use the ESAPI Session Management control. This control includes a component for CSRF. Do not use the GET method for any request that triggers a state change. Phase: Implementation Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons."
    },
    {
      "id": "56d999bc-1cd8-4a78-9fb8-e438015bf351",
      "category": "dast",
      "confidence": "Medium",
      "cve": "10202",
      "description": "No Anti-CSRF tokens were found in a HTML submission form. A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf. CSRF attacks are effective in a number of situations, including: * The victim has an active session on the target site. * The victim is authenticated via HTTP auth on the target site. * The victim is on the same local network as the target site. CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
      "identifiers": [
        {
          "name": "Absence of Anti-CSRF Tokens",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "10202"
        },
        {
          "name": "CWE-352",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/352.html",
          "value": "352"
        },
        {
          "name": "WASC-9",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Cross-Site-Request-Forgery",
          "value": "9"
        }
      ],
      "links": [
        {
          "url": "http://projects.webappsec.org/Cross-Site-Request-Forgery"
        },
        {
          "url": "http://cwe.mitre.org/data/definitions/352.html"
        }
      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "POST",
        "param": "",
        "path": "/WebGoat/register.mvc"
      },
      "message": "Absence of Anti-CSRF Tokens",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "Low",
      "solution": "Phase: Architecture and Design Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. Phase: Implementation Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script. Phase: Architecture and Design Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). Note that this can be bypassed using XSS. Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation. Note that this can be bypassed using XSS. Use the ESAPI Session Management control. This control includes a component for CSRF. Do not use the GET method for any request that triggers a state change. Phase: Implementation Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons."
    },
    {
      "id": "b0b6516d-b0af-4124-b291-c28945ca019c",
      "category": "dast",
      "confidence": "Medium",
      "cve": "10010",
      "description": "A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.",
      "identifiers": [
        {
          "name": "Cookie No HttpOnly Flag",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "10010"
        },
        {
          "name": "CWE-16",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/16.html",
          "value": "16"
        },
        {
          "name": "WASC-13",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Information-Leakage",
          "value": "13"
        }
      ],
      "links": [
        {
          "url": "http://www.owasp.org/index.php/HttpOnly"
        }
      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "JSESSIONID",
        "path": "/WebGoat/login?logout"
      },
      "message": "Cookie No HttpOnly Flag",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "Low",
      "solution": "Ensure that the HttpOnly flag is set for all cookies."
    },
    {
      "id": "0efac469-da54-4a2a-b2ac-572b6ff73687",
      "category": "dast",
      "confidence": "Medium",
      "cve": "10010",
      "description": "A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.",
      "identifiers": [
        {
          "name": "Cookie No HttpOnly Flag",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "10010"
        },
        {
          "name": "CWE-16",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/16.html",
          "value": "16"
        },
        {
          "name": "WASC-13",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Information-Leakage",
          "value": "13"
        }
      ],
      "links": [
        {
          "url": "http://www.owasp.org/index.php/HttpOnly"
        }
      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "JSESSIONID",
        "path": "/WebGoat/logout"
      },
      "message": "Cookie No HttpOnly Flag",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "Low",
      "solution": "Ensure that the HttpOnly flag is set for all cookies."
    },
    {
      "id": "310ddcff-bbff-493d-a52e-df9bed163bfb",
      "category": "dast",
      "confidence": "Medium",
      "cve": "10054",
      "description": "A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.",
      "identifiers": [
        {
          "name": "Cookie Without SameSite Attribute",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "10054"
        },
        {
          "name": "CWE-16",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/16.html",
          "value": "16"
        },
        {
          "name": "WASC-13",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Information-Leakage",
          "value": "13"
        }
      ],
      "links": [
        {
          "url": "https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site"
        }
      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "JSESSIONID",
        "path": "/WebGoat/login?logout"
      },
      "message": "Cookie Without SameSite Attribute",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "Low",
      "solution": "Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies."
    },
    {
      "id": "4a6bc286-670d-42a3-9899-8daba2bec5bf",
      "category": "dast",
      "confidence": "Medium",
      "cve": "10054",
      "description": "A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.",
      "identifiers": [
        {
          "name": "Cookie Without SameSite Attribute",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "10054"
        },
        {
          "name": "CWE-16",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/16.html",
          "value": "16"
        },
        {
          "name": "WASC-13",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Information-Leakage",
          "value": "13"
        }
      ],
      "links": [
        {
          "url": "https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site"
        }
      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "JSESSIONID",
        "path": "/WebGoat/logout"
      },
      "message": "Cookie Without SameSite Attribute",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "Low",
      "solution": "Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies."
    },
    {
      "id": "b04d81c4-f3b8-44d7-b2eb-740d2a834df0",
      "category": "dast",
      "confidence": "Low",
      "cve": "90011",
      "description": "This check identifies responses where the HTTP Content-Type header declares a charset different from the charset defined by the body of the HTML or XML. When there's a charset mismatch between the HTTP header and content body Web browsers can be forced into an undesirable content-sniffing mode to determine the content's correct character set. An attacker could manipulate content on the page to be interpreted in an encoding of their choice. For example, if an attacker can control content at the beginning of the page, they could inject script using UTF-7 encoded text and manipulate some browsers into interpreting that text.",
      "identifiers": [
        {
          "name": "Charset Mismatch (Header Versus Meta Content-Type Charset)",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "90011"
        },
        {
          "name": "CWE-16",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/16.html",
          "value": "16"
        },
        {
          "name": "WASC-15",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Application-Misconfiguration",
          "value": "15"
        }
      ],
      "links": [
        {
          "url": "http://code.google.com/p/browsersec/wiki/Part2#Character_set_handling_and_detection"
        }
      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "",
        "path": "/WebGoat/start.mvc"
      },
      "message": "Charset Mismatch (Header Versus Meta Content-Type Charset)",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "Info",
      "solution": "Force UTF-8 for all text content in both the HTTP header and meta tags in HTML or encoding declarations in XML."
    },
    {
      "id": "e84fddba-eff6-47c2-8313-3e7952f7c619",
      "category": "dast",
      "confidence": "Medium",
      "cve": "10027",
      "description": "The response appears to contain suspicious comments which may help an attacker.",
      "identifiers": [
        {
          "name": "Information Disclosure - Suspicious Comments",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "10027"
        },
        {
          "name": "CWE-200",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/200.html",
          "value": "200"
        },
        {
          "name": "WASC-13",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Information-Leakage",
          "value": "13"
        }
      ],
      "links": [

      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "",
        "path": "/WebGoat/js/html5shiv.js"
      },
      "message": "Information Disclosure - Suspicious Comments",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "Info",
      "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to."
    },
    {
      "id": "c3dca600-1d97-42d8-9a0b-a742a86caa45",
      "category": "dast",
      "confidence": "Medium",
      "cve": "10027",
      "description": "The response appears to contain suspicious comments which may help an attacker.",
      "identifiers": [
        {
          "name": "Information Disclosure - Suspicious Comments",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "10027"
        },
        {
          "name": "CWE-200",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/200.html",
          "value": "200"
        },
        {
          "name": "WASC-13",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Information-Leakage",
          "value": "13"
        }
      ],
      "links": [

      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "",
        "path": "/WebGoat/js/modernizr-2.6.2.min.js"
      },
      "message": "Information Disclosure - Suspicious Comments",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "Info",
      "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to."
    },
    {
      "id": "ba869afe-3d24-4f7d-8a8a-9c2f4a06a995",
      "category": "dast",
      "confidence": "Medium",
      "cve": "10027",
      "description": "The response appears to contain suspicious comments which may help an attacker.",
      "identifiers": [
        {
          "name": "Information Disclosure - Suspicious Comments",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "10027"
        },
        {
          "name": "CWE-200",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/200.html",
          "value": "200"
        },
        {
          "name": "WASC-13",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Information-Leakage",
          "value": "13"
        }
      ],
      "links": [

      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "",
        "path": "/WebGoat/js/respond.min.js"
      },
      "message": "Information Disclosure - Suspicious Comments",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "Info",
      "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to."
    },
    {
      "id": "75467bce-323a-4ec4-a0db-1c16aac4b294",
      "category": "dast",
      "confidence": "Medium",
      "cve": "10027",
      "description": "The response appears to contain suspicious comments which may help an attacker.",
      "identifiers": [
        {
          "name": "Information Disclosure - Suspicious Comments",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "10027"
        },
        {
          "name": "CWE-200",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/200.html",
          "value": "200"
        },
        {
          "name": "WASC-13",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Information-Leakage",
          "value": "13"
        }
      ],
      "links": [

      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "",
        "path": "/WebGoat/start.mvc"
      },
      "message": "Information Disclosure - Suspicious Comments",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "Info",
      "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to."
    },
    {
      "id": "b3c7ba4d-8c34-47a4-8ddd-6760f779a9c9",
      "category": "dast",
      "confidence": "Low",
      "cve": "90033",
      "description": "Cookies can be scoped by domain or path. This check is only concerned with domain scope.The domain scope applied to a cookie determines which domains can access it. For example, a cookie can be scoped strictly to a subdomain e.g. www.nottrusted.com, or loosely scoped to a parent domain e.g. nottrusted.com. In the latter case, any subdomain of nottrusted.com can access the cookie. Loosely scoped cookies are common in mega-applications like google.com and live.com. Cookies set from a subdomain like app.foo.bar are transmitted only to that domain by the browser. However, cookies scoped to a parent-level domain may be transmitted to the parent, or any subdomain of the parent.",
      "identifiers": [
        {
          "name": "Loosely Scoped Cookie",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "90033"
        },
        {
          "name": "CWE-565",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/565.html",
          "value": "565"
        },
        {
          "name": "WASC-15",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Application-Misconfiguration",
          "value": "15"
        }
      ],
      "links": [
        {
          "url": "https://tools.ietf.org/html/rfc6265#section-4.1"
        },
        {
          "url": "https://www.owasp.org/index.php/Testing_for_cookies_attributes_(OTG-SESS-002)"
        },
        {
          "url": "http://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_cookies"
        }
      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "",
        "path": "/WebGoat/login?logout"
      },
      "message": "Loosely Scoped Cookie",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "Info",
      "solution": "Always scope cookies to a FQDN (Fully Qualified Domain Name)."
    },
    {
      "id": "fbdd9874-682a-4fb4-9db9-bc2e462c858e",
      "category": "dast",
      "confidence": "Low",
      "cve": "90033",
      "description": "Cookies can be scoped by domain or path. This check is only concerned with domain scope.The domain scope applied to a cookie determines which domains can access it. For example, a cookie can be scoped strictly to a subdomain e.g. www.nottrusted.com, or loosely scoped to a parent domain e.g. nottrusted.com. In the latter case, any subdomain of nottrusted.com can access the cookie. Loosely scoped cookies are common in mega-applications like google.com and live.com. Cookies set from a subdomain like app.foo.bar are transmitted only to that domain by the browser. However, cookies scoped to a parent-level domain may be transmitted to the parent, or any subdomain of the parent.",
      "identifiers": [
        {
          "name": "Loosely Scoped Cookie",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "90033"
        },
        {
          "name": "CWE-565",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/565.html",
          "value": "565"
        },
        {
          "name": "WASC-15",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Application-Misconfiguration",
          "value": "15"
        }
      ],
      "links": [
        {
          "url": "https://tools.ietf.org/html/rfc6265#section-4.1"
        },
        {
          "url": "https://www.owasp.org/index.php/Testing_for_cookies_attributes_(OTG-SESS-002)"
        },
        {
          "url": "http://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_cookies"
        }
      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "",
        "path": "/WebGoat/logout"
      },
      "message": "Loosely Scoped Cookie",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "Info",
      "solution": "Always scope cookies to a FQDN (Fully Qualified Domain Name)."
    },
    {
      "id": "bc8d5642-81e2-45a2-a382-312010b042f6",
      "category": "dast",
      "confidence": "Low",
      "cve": "10096",
      "description": "A timestamp was disclosed by the application/web server - Unix",
      "identifiers": [
        {
          "name": "Timestamp Disclosure - Unix",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "10096"
        },
        {
          "name": "CWE-200",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/200.html",
          "value": "200"
        },
        {
          "name": "WASC-13",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Information-Leakage",
          "value": "13"
        }
      ],
      "links": [
        {
          "url": "https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure"
        },
        {
          "url": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage"
        }
      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "",
        "path": "/WebGoat/plugins/bootstrap/css/bootstrap.min.css"
      },
      "message": "Timestamp Disclosure - Unix",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "Info",
      "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns."
    },
    {
      "id": "3c3e2894-442d-4fca-a13f-c8d1cf2cb539",
      "category": "dast",
      "confidence": "Low",
      "cve": "10096",
      "description": "A timestamp was disclosed by the application/web server - Unix",
      "identifiers": [
        {
          "name": "Timestamp Disclosure - Unix",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "10096"
        },
        {
          "name": "CWE-200",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/200.html",
          "value": "200"
        },
        {
          "name": "WASC-13",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Information-Leakage",
          "value": "13"
        }
      ],
      "links": [
        {
          "url": "https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure"
        },
        {
          "url": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage"
        }
      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "",
        "path": "/WebGoat/plugins/bootstrap/css/bootstrap.min.css"
      },
      "message": "Timestamp Disclosure - Unix",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "Info",
      "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns."
    },
    {
      "id": "4bcbb72a-1ec3-40ab-a682-38b493a00532",
      "category": "dast",
      "confidence": "Low",
      "cve": "10096",
      "description": "A timestamp was disclosed by the application/web server - Unix",
      "identifiers": [
        {
          "name": "Timestamp Disclosure - Unix",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "10096"
        },
        {
          "name": "CWE-200",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/200.html",
          "value": "200"
        },
        {
          "name": "WASC-13",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Information-Leakage",
          "value": "13"
        }
      ],
      "links": [
        {
          "url": "https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure"
        },
        {
          "url": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage"
        }
      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "",
        "path": "/WebGoat/plugins/bootstrap/css/bootstrap.min.css"
      },
      "message": "Timestamp Disclosure - Unix",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "Info",
      "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns."
    },
    {
      "id": "8b20a706-fd1c-406c-9b88-99c06e9403a8",
      "category": "dast",
      "confidence": "Low",
      "cve": "10096",
      "description": "A timestamp was disclosed by the application/web server - Unix",
      "identifiers": [
        {
          "name": "Timestamp Disclosure - Unix",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "10096"
        },
        {
          "name": "CWE-200",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/200.html",
          "value": "200"
        },
        {
          "name": "WASC-13",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Information-Leakage",
          "value": "13"
        }
      ],
      "links": [
        {
          "url": "https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure"
        },
        {
          "url": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage"
        }
      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "",
        "path": "/WebGoat/plugins/bootstrap/css/bootstrap.min.css"
      },
      "message": "Timestamp Disclosure - Unix",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "Info",
      "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns."
    },
    {
      "id": "e5415072-1d3b-421a-90d2-8f11816c484b",
      "category": "dast",
      "confidence": "Low",
      "cve": "10096",
      "description": "A timestamp was disclosed by the application/web server - Unix",
      "identifiers": [
        {
          "name": "Timestamp Disclosure - Unix",
          "type": "ZAProxy_PluginId",
          "url": "https://github.com/zaproxy/zaproxy/blob/w2019-01-14/docs/scanners.md",
          "value": "10096"
        },
        {
          "name": "CWE-200",
          "type": "CWE",
          "url": "https://cwe.mitre.org/data/definitions/200.html",
          "value": "200"
        },
        {
          "name": "WASC-13",
          "type": "WASC",
          "url": "https://projects.webappsec.org/Information-Leakage",
          "value": "13"
        }
      ],
      "links": [
        {
          "url": "https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure"
        },
        {
          "url": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage"
        }
      ],
      "location": {
        "hostname": "http://goat:8080",
        "method": "GET",
        "param": "",
        "path": "/WebGoat/plugins/bootstrap/css/bootstrap.min.css"
      },
      "message": "Timestamp Disclosure - Unix",
      "scanner": {
        "id": "zaproxy",
        "name": "ZAProxy"
      },
      "severity": "Info",
      "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns."
    }
  ],
  "scan": {
    "analyzer": {
      "id": "gitlab-dast",
      "name": "GitLab DAST",
      "vendor": {
        "name": "GitLab"
      },
      "version": "1.2.3"
    },
    "scanned_resources": [

    ],
    "scanner": {
      "id": "zaproxy",
      "name": "OWASP Zed Attack Proxy (ZAP)",
      "url": "https://www.zaproxy.org",
      "vendor": {
        "name": "GitLab"
      },
      "version": "D-2022-01-04"
    },
    "start_time": "2022-08-10T22:37:00",
    "end_time": "2022-08-10T22:37:00",
    "status": "success",
    "type": "dast"
  }
}
