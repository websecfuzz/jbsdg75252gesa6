{
  "data": {
    "id": 302007,
    "group_id": 9970,
    "author_id": 4669960,
    "assignee_id": null,
    "iid": 6286,
    "updated_by_id": 2890431,
    "last_edited_by_id": 2890431,
    "lock_version": 59,
    "start_date": "2022-11-01",
    "end_date": "2023-12-15",
    "last_edited_at": "2023-10-05 15:01:47 UTC",
    "created_at": "2021-07-06 16:33:20 UTC",
    "updated_at": "2023-10-05 15:01:47 UTC",
    "title": "ðŸ‘§ Work Items -  Relationships",
    "description": "# Summary\n\nIn this epic, we will build the relationship architecture for work items. Relationships in this sense apply to parent, child, related, blocked, blocking, other(?) between work items.\n\n## Relationship rules for work item records\n\n* Cross hierarchy linking should be available for all relationships within work items\n* Work items can only have one kind of relationship to another (parent/child, blocking/blocked by/related).\n* You can easily switch the relationship type without removing and then re-adding the work items to create the relationship.\n* Work items can only have one immediate parent record\n* Enforce a strict hierarchy in order to adhere to frameworks like SAFe\n  * Provide a way for customers to model the rules for parent/child relationships.\n    * Example: Epic -\\> Feature -\\> Story -\\> Bug. In this example, you could not have an Epic be the parent of a Bug.\n  * Provide out of the box hierarchies that adhere to industry-standard frameworks\n  * Allow customers to set their own hierarchies\n* Beyond the restrictions in the restrictions table, work items can have relationships to any other work item in a hierarchy, so long as there is only one type of relationship between two distinct records.\n* Epic nesting should allow for 9 levels to match OKR nesting (this is an increase from 7 levels which are available in issuables today)\n\n## Relationship management exploration\n\nIn https://gitlab.com/groups/gitlab-org/-/epics/9083 and https://gitlab.com/gitlab-org/ux-research/-/issues/2168, we are conducting research on the ways that users are thinking about and interacting with relationships in order to create an efficient and pleasant user experience for relationship management in work items.\n\n## Relationship management feature expectations\n\n* Display metadata related to the record type (label, milestone, weight, assignee, progress, etc)\n* Display nested records with collapse/expand controls\n* Offer expand all / collapse all controls (pending performance impact see [discussion](https://gitlab.com/gitlab-org/gitlab/-/issues/386416#note_1325273564 \"OKR MVC - User feedback\"))\n* Allow users to drag and drop to reorder or reparent the records and allow that manual order to remain sticky\n* Allow users to reparent records without opening another page/tab/modal\n* Create sort controls for the entire widget (sort by date created, assignee, milestone, etc)\n* Allow users to edit metadata displayed on the record without opening another page/tab/modal\n* Ensure users can quickly gauge health status of records (on track, at risk, needs attention)\n* Ensure users can quickly understand dependencies of records\n* Ensure users can quickly understand status of records (open, closed, blocked, complete, etc)\n\n## Allowable relationships between issuables and work items\n\nIn https://gitlab.com/groups/gitlab-org/-/epics/10851 we are creating the ability to have a work item `parent` related to an issuables `child`. Since migration to the work items framework will not occur for all issuable types simultaneously, we will need to support these hybrid relationships until all issuables have been migrated to work items. Below lists the approved mixed relationships between work items and issuables during this transition period:\n\n- :white_check_mark: `work item:Epic` can be a parent of an `issuable:Issue`\n- :white_check_mark: `issuable:Issue` can be a parent of a `work item:task`\n\n\n\n\n## Allowable work item relationships\n\n#### Parent:Child\n\n|  | Epic as child | Issue as child | Task as child | Objective as child | Key Result as child | \n|--|---------------|----------------|---------------|--------------------|---------------------|\n| Epic as parent | :white_check_mark: | :white_check_mark: | :x: | :x: | :x: | \n| Issue as parent | :x: | :x: | :white_check_mark: | :x: | :x: | \n| Task as parent | :x: | :x: | :x: | :x: | :x: | \n| Objective as parent | :x: | :x: | :x: | :white_check_mark: | :white_check_mark: | \n| Key Results as parent | :x: | :x: | :x: | :x: | :x: |\n\n\n#### Linked (blocked by)\n\n|  | Epic | Issue | Task | Objective | Key Result |\n|--|------|-------|------|-----------|------------|\n| Epic blocked by | :white_check_mark: | :white_check_mark: | :white_check_mark: | :x: | :x: |\n| Issue blocked by | :white_check_mark: | :white_check_mark: | :white_check_mark: | :x: | :x: | \n| Task blocked by | :white_check_mark: | :white_check_mark: | :white_check_mark: | :x: | :x: | \n| Objective blocked by | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: |\n| Key Result blocked by | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | \n\n\n#### Linked (blocking)\n\n|  | Epic | Issue | Task | Objective | Key Result | \n|--|------|-------|------|-----------|------------|\n| Epic blocks | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: |\n| Issue blocks | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: |\n| Task blocks | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | \n| Objective blocks | :x: | :x: | :x: | :white_check_mark: | :white_check_mark: |\n| Key Result blocks | :x: | :x: | :x: | :white_check_mark: | :white_check_mark: |\n\n\n#### Linked (related)\n\n|  | Epic | Issue | Task | Objective | Key Result | \n|--|------|-------|------|-----------|------------|\n| Epic related to | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | \n| Issue related to | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: |\n| Task related to | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | \n| Objective related to | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | \n| Key Result related to | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: |",
    "start_date_sourcing_milestone_id": null,
    "due_date_sourcing_milestone_id": null,
    "start_date_fixed": "2023-07-18",
    "due_date_fixed": "2023-10-17",
    "start_date_is_fixed": false,
    "due_date_is_fixed": false,
    "closed_by_id": null,
    "closed_at": null,
    "parent_id": 657742,
    "relative_position": -7182,
    "state_id": 1,
    "start_date_sourcing_epic_id": 624151,
    "due_date_sourcing_epic_id": 939712,
    "external_key": null,
    "confidential": false,
    "color": "#1068bf",
    "total_opened_issue_weight": 16,
    "total_closed_issue_weight": 73,
    "total_opened_issue_count": 12,
    "total_closed_issue_count": 52
  },
  "author": {
    "id": 4669960,
    "username": "cdybenko",
    "name": "Christen Dybenko"
  },
  "labels": [
    {
      "id": 27355480,
      "title": "FY24",
      "color": "#c21e56",
      "project_id": null,
      "created_at": "2022-10-14 15:07:27 UTC",
      "updated_at": "2022-10-14 15:07:52 UTC",
      "template": false,
      "description": "",
      "type": "GroupLabel",
      "group_id": 9970,
      "lock_on_merge": false
    },
    {
      "id": 29821275,
      "title": "Now",
      "color": "#8fbc8f",
      "project_id": null,
      "created_at": "2023-04-04 14:14:17 UTC",
      "updated_at": "2023-04-04 14:14:17 UTC",
      "template": false,
      "description": "Features that are part of short-term planning.",
      "type": "GroupLabel",
      "group_id": 9970,
      "lock_on_merge": false
    },
    {
      "id": 3103451,
      "title": "devops::plan",
      "color": "#E44D2A",
      "project_id": null,
      "created_at": "2017-12-01 19:00:23 UTC",
      "updated_at": "2022-05-11 06:40:37 UTC",
      "template": false,
      "description": "Issues for the Plan stage of the DevOps lifecycle (e.g. Project Management, Agile Portfolio Management, Requirements Management)",
      "type": "GroupLabel",
      "group_id": 9970,
      "lock_on_merge": false
    },
    {
      "id": 10690700,
      "title": "group::product planning",
      "color": "#A8D695",
      "project_id": null,
      "created_at": "2019-05-22 19:55:52 UTC",
      "updated_at": "2020-10-16 19:33:41 UTC",
      "template": false,
      "description": "Issues belonging to the Product Planning group of the Plan stage of the DevOps lifecycle. See https://about.gitlab.com/handbook/product/product-categories/#product-planning-group",
      "type": "GroupLabel",
      "group_id": 9970,
      "lock_on_merge": false
    },
    {
      "id": 14918378,
      "title": "section::dev",
      "color": "#F0AD4E",
      "project_id": null,
      "created_at": "2020-05-11 22:11:57 UTC",
      "updated_at": "2020-05-11 22:11:57 UTC",
      "template": false,
      "description": "Issues related to the Dev section",
      "type": "GroupLabel",
      "group_id": 9970,
      "lock_on_merge": false
    },
    {
      "id": 25541419,
      "title": "work items",
      "color": "#428BCA",
      "project_id": null,
      "created_at": "2022-06-13 14:41:30 UTC",
      "updated_at": "2022-06-13 14:41:30 UTC",
      "template": false,
      "description": "Related to the Work Items feature",
      "type": "GroupLabel",
      "group_id": 9970,
      "lock_on_merge": false
    }
  ],
  "start_date_sourcing_milestone": null,
  "due_date_sourcing_milestone": null,
  "notes": [
    {
      "note": "@egrieff \n\n> `work_item_type` change is not allowed for legacy issues, they can only be changed to be an incident or a test case, the legacy types.\n\nyes, we shouldn't let changing issue to ticket via UI/API, but we can change them from the migration",
      "noteable_type": "Epic",
      "author_id": 3714742,
      "created_at": "2023-08-23 05:39:30 UTC",
      "updated_at": "2023-08-23 05:39:30 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1524013485,
      "namespace_id": null
    },
    {
      "note": "@uhlexsis I love this as an MVC. It's a pattern that is very effective. I saw this used heavily with Groups CMS testing. \n\ncc: @gweaver @nickleonard",
      "noteable_type": "Epic",
      "author_id": 5709669,
      "created_at": "2022-06-21 19:30:31 UTC",
      "updated_at": "2022-06-21 19:30:31 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "a40c58a81faf928cff2f733a6e06b5f54fb18164",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 999847483,
      "namespace_id": null
    },
    {
      "note": "@uhlexsis @mushakov what happens when a task is related to more than 1 issue? `issue_links` have a `many-to-many` relationship. The breadcrumb on the task detail view also appears to be missing the work item ID :thinking:",
      "noteable_type": "Epic",
      "author_id": 4303289,
      "created_at": "2022-06-21 20:01:47 UTC",
      "updated_at": "2022-06-21 20:01:47 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "a40c58a81faf928cff2f733a6e06b5f54fb18164",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 999873121,
      "namespace_id": null
    },
    {
      "note": "@amandarueda Maybe consider including `Test Case`, `Ticket`, `Incident`, and `Requirement` in the table as they all are or will be work items in the future.  Along the lines of @nickbrandt question :point_up:, here are the non-work item relationships that currently exist for issues that we'll need to solve for via https://gitlab.com/groups/gitlab-org/-/epics/7105+:\n\n* Vulnerabilities\n* Alerts\n* Branches\n* Merge Requests\n* Feature Flags\n* ...maybe some other object I can't think of off the top of my head :blush:\n\nThe question is where those relationships are visualized within the work item detail view:\n\n1. Are these non-work item relationships co-mingled in the `linked items` widget?\n2. Are all non-work item relationship captured in one or more separate widgets?\n\nWe have high confidence that we want to introduce an optional \"parent/child\" type relationship between work items and merge requests/branches, which would behave different than being loosely related (mostly for analytics/reporting/auditing/compliance/traceability use cases). I've also seen open issues asking for the ability to link MRs directly to epics. We also need to take into consideration what happens with all of these linked items when a work item type is changed :thinking: \n\nLastly, I can't help but wonder if we'll end up with the same problem for OKRs being only loosely related to other work item types. How do you know which work items are implementing something to drive the O or KR vs. just being loosely related :thinking:",
      "noteable_type": "Epic",
      "author_id": 4303289,
      "created_at": "2023-08-01 15:17:22 UTC",
      "updated_at": "2023-08-01 15:18:58 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": 4303289,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": "2023-08-01 15:18:58 UTC",
      "internal": false,
      "id": 1495829648,
      "namespace_id": null
    },
    {
      "note": "@uhlexsis thank you for uploading the flow chart and the designs for the component! \n\nI like the simplicity of the widget and this is a great start!\n\nSome initial thoughts:\n\nConsider posting [these designs](https://gitlab.com/groups/gitlab-org/-/uploads/52bdcb764a3eb40f51b0016ad3baa3cd/MVC_child_flow_2.png) at 100% screen size in a new issue with design management so we can comment on the whole flow and get detailed. I really like designs no. 12 and 20 (summaries and re-order) and I would like to discuss them! \n\nIt would also be great if we had an example design that has 10-15 children and multiple indentations of nesting.\n\nTo be ready to go for parity with current issues and epics, we will still need the following to be able to fully scope MVC 2:\n\n- Related items (Linked issues, Related MRs) and how they display and interact with the widget\n- How does the whole container work when you have many issues inside it? \n- How do work items with 7-10 levels of nesting look? How will it look on mobile vs desktop?\n- Decide on which of your designs should be the collapsed view and agree on the amount of summary data (design no. 20) it holds. There are 3 good options!\n\nOther non-blocking but open questions:\n\n- When we have different colors for work items, how will they interact with the red and green colors used for status and blocking in the work item row?\n\nExcited to see your work here!",
      "noteable_type": "Epic",
      "author_id": 4669960,
      "created_at": "2021-10-27 05:23:30 UTC",
      "updated_at": "2021-10-27 07:28:53 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "c2b1e018373d86bfa2a51981bc58beab2133fdf6",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 715366862,
      "namespace_id": null
    },
    {
      "note": "Thanks for the feedback @cdybenko I'm OOO but wanted to leave quick replies in case it is blocking you.\n\n> Consider posting [these designs](https://gitlab.com/groups/gitlab-org/-/uploads/52bdcb764a3eb40f51b0016ad3baa3cd/MVC_child_flow_2.png) at 100% screen size in a ....\n\nThese designs are already in the Design Management section in the issues I attached to this epic. \n\nI am using this image as a recap of the walkthrough thoughts if that makes sense. \n- #12 is semi-dependent on MVC 1 and what editing interactions we intended for these items, and also isn't an experience that currently exists (editing inline), which is why I didn't share anything too in depth and didn't include it in the issues. I have assumptions I can follow up on if editing items inline is MVC.\n- #20 was more of an exploration that I was sharing that was mentioned in the walkthrough and not MVC. Everything else MVC is in the issues.\n\n\n> It would also be great if we had an example design that has 10-15 children and multiple indentations of nesting.\n> To be ready to go for parity with current issues and epics, we will still .....\n\nI was basing MVC 2 reqs off of the [planning sheet](https://docs.google.com/spreadsheets/d/1Cm5kkRk7fsvSJr2sFaHJk1-p1WLBEO9wveOYLsYAFfM/edit?usp=sharing) and thinking we are starting small, similar to MVC 1.\n- I believe we discussed only one level of child nesting for this iteration. We can expand it if this is needed immediately or blocking.\n- My understanding based on our syncs was we wanted to focus solely on parent<>child items for this iteration and then move into other relationship types (or \"to-dos\" as I was referencing them sometimes). The requirements mention \"Be able to add only child \"Issues\" to the Feature\" for example. I was hesitant to make the MVC too large.\n- #20 is just ideation.\n\nI think what might be confusing here is that I used to have the \"MVC 2\" broken down into different iterations (MVC 2.A, MVC 2.B, etc) based on what seemed essential to work on first when iterating toward parity, but removed those items when trying to streamline the epic documentation based on feedback. You can see [what I based the current design on through this epic](https://gitlab.com/groups/gitlab-org/-/epics/6674) that used to be attach to this.\n\n^ Are these all blocking the MVC of nesting child items or parent hierarchy? If so, maybe we can add epics/issues for everything needed to be completed beyond the basic nesting of child items? \n\nI'll reattach the MVC A, B, & C epics that I created here previously that was my prior attempt to scope this. Feel free to pick them apart and reorganize them, create new items, or remove them again- whatever is helpful for you!\n\n> * When we have different colors for work items, how will they interact with the red and green colors used for status and blocking in the work item row?\n\nThe different colors _are_ indicating status (kind of like we do now), so it's the same thing. The icon could then reenforce the status so the user doesn't need to rely solely on color. I was just playing around with this though, not focusing on it for MVC. Now you got me thinking about custom colored child items though... :thinking: :laughing:\n\n\n\n_edit_ I removed the walkthrough screens because they seemed to cause confusion.",
      "noteable_type": "Epic",
      "author_id": 3617348,
      "created_at": "2021-10-27 07:28:53 UTC",
      "updated_at": "2021-11-15 23:42:20 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": 3617348,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "c2b1e018373d86bfa2a51981bc58beab2133fdf6",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": "2021-10-27 11:35:53 UTC",
      "internal": false,
      "id": 715459355,
      "namespace_id": null
    },
    {
      "note": "I didn't see this until after @badnewsblair , sorry about that! We ended up having more of a general 1-1. I added an agenda item to the work items weekly to go through this and refine the initiative.",
      "noteable_type": "Epic",
      "author_id": 3617348,
      "created_at": "2021-10-28 21:26:28 UTC",
      "updated_at": "2021-10-28 21:26:28 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "c2b1e018373d86bfa2a51981bc58beab2133fdf6",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 717835779,
      "namespace_id": null
    },
    {
      "note": "@amandarueda those seem to make sense from my POV. One question, do we plan to offer linking of **related** MRs? If so, do we need to add that to [this table](https://gitlab.com/groups/gitlab-org/-/epics/6286#linked-related)? Or is this only focused solely on `work item` <> `work item` relationships?",
      "noteable_type": "Epic",
      "author_id": 5041243,
      "created_at": "2023-07-31 21:56:50 UTC",
      "updated_at": "2023-07-31 21:56:50 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1494440337,
      "namespace_id": null
    },
    {
      "note": "@nickleonard would you be able to whip something up for showing ancestors within a work item? I reckon' we should collaborate closely with Alexis and Melissa here. I also think it would be nice to show the ancestors in the same context as we would show children. \n\nFeedback from a few customers indicates that showing the full lineage provides a lot of helpful context and grouping the relationships (ancestors, children, blocked, blocking, related) as close together in the UI would provide the most efficiency.",
      "noteable_type": "Epic",
      "author_id": 4303289,
      "created_at": "2022-06-20 14:12:47 UTC",
      "updated_at": "2022-06-21 18:45:31 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "a40c58a81faf928cff2f733a6e06b5f54fb18164",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 997801018,
      "namespace_id": null
    },
    {
      "note": "> I think we already have the API for getting the parent of a Task, so this would theoretically be a front-end change to show the parent issue (read-only) in a Task. @jprovaznik can you confirm my assumption here about the hierarchy widget GraphQL?\n\n@gweaver correct, you can get work item's parent from graphql API using the new hierarchy widget (still behind a feature flag), example request in https://gitlab.com/gitlab-org/gitlab/-/merge_requests/88429#how-to-set-up-and-validate-locally",
      "noteable_type": "Epic",
      "author_id": 1642716,
      "created_at": "2022-06-24 10:44:36 UTC",
      "updated_at": "2022-06-27 16:48:53 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "a40c58a81faf928cff2f733a6e06b5f54fb18164",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1004249081,
      "namespace_id": null
    },
    {
      "note": "I set up some time for us maÃ±ana to break this MVC down and document requirements. Then we can more quickly iterate through smaller design pieces! ðŸŽ¨",
      "noteable_type": "Epic",
      "author_id": 3617348,
      "created_at": "2021-10-27 18:52:38 UTC",
      "updated_at": "2021-10-27 18:52:38 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "c2b1e018373d86bfa2a51981bc58beab2133fdf6",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 716397251,
      "namespace_id": null
    },
    {
      "note": "Hey @uhlexsis, would it be possible to get an invite as well? Thanks!",
      "noteable_type": "Epic",
      "author_id": 9676400,
      "created_at": "2021-10-27 19:04:32 UTC",
      "updated_at": "2021-10-27 19:04:32 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "c2b1e018373d86bfa2a51981bc58beab2133fdf6",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 716405341,
      "namespace_id": null
    },
    {
      "note": "@pedroms Here's MVC 2 for work items.",
      "noteable_type": "Epic",
      "author_id": 4554611,
      "created_at": "2021-10-04 16:11:54 UTC",
      "updated_at": "2021-10-04 16:11:54 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": null,
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "ed2f972da6613074aef5d637454f64d8d78fceba",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 694138272,
      "namespace_id": null
    },
    {
      "note": "@mushakov Tasks will always be visible within either a modal or a separate page because references to them show up all over the place (i.e. any markdown field across the product, todo, activity feedback, ...) -- which is why they need to have a canonical dedicated route / detail view to serve as a SSoT when the Task  hasn't been / can't be updated to open in a modal within the context where it is being referenced. \n\nI do not think the information is critical when viewing within the modal on the issue the Task is a child of, but becomes critical the moment the Task is viewed within any other context outside of the issue.",
      "noteable_type": "Epic",
      "author_id": 4303289,
      "created_at": "2022-06-17 19:24:25 UTC",
      "updated_at": "2022-06-17 20:34:13 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": 4303289,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "a40c58a81faf928cff2f733a6e06b5f54fb18164",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": "2022-06-17 19:27:07 UTC",
      "internal": false,
      "id": 996036925,
      "namespace_id": null
    },
    {
      "note": "@mushakov @uhlexsis Given how events have played out with Tasks tentatively shipping in 15.1 and child widget on issues in 15.2 there will be a lot of Tasks with the \"related\" relationship type. \n\nBased on recent feedback from dogfooding tasks (https://gitlab.slack.com/archives/C72HPNV97/p1655474005087609), there is a lot of confusion over what a task belongs to. It might be worth thinking about prioritizing:\n\n1. Showing ancestor lineage on work items (think the ancestor component in an epic sidebar but integrated with the hierarchy widget) -- This will help when you drop into a work item detail view.\n2. Add \"linked work items\" widget to work items (https://gitlab.com/groups/gitlab-org/-/epics/7459) -- Given there will be lots of related tasks, just showing the ancestors on Tasks will not help in the case that the task is related to an issue instead of it being a child. \n3. Make it easy to change relationship type -- convert from related to child, from child to related, etc. \n\nI also noticed that right now with epics, I can make add a child epic as \"related\" to the parent epic as well. IMHO a work item should only ever be allowed to have a single relationship type to another work item. This might also make it a lot easier to expose something in the UI :shrug: Just some feedback. Take it or leave it :slight_smile:\n\n**Update:** We are not making tasks GA in 15.1, but I think the spirit of :point_up: still holds true.",
      "noteable_type": "Epic",
      "author_id": 4303289,
      "created_at": "2022-06-17 16:36:03 UTC",
      "updated_at": "2022-06-17 19:04:26 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": 4303289,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "a40c58a81faf928cff2f733a6e06b5f54fb18164",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": "2022-06-17 16:49:04 UTC",
      "internal": false,
      "id": 995898302,
      "namespace_id": null
    },
    {
      "note": "@gweaver You are right. This pattern only works when there's a single path to get to an item.",
      "noteable_type": "Epic",
      "author_id": 5709669,
      "created_at": "2022-06-21 20:18:12 UTC",
      "updated_at": "2022-06-21 20:18:12 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "a40c58a81faf928cff2f733a6e06b5f54fb18164",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 999885454,
      "namespace_id": null
    },
    {
      "note": "@gweaver @nickleonard @mushakov We were looking into the legacy view here but I agree having information about the parent is useful! It seems to me that there are perhaps a few things going on in that feedback:\n\n1. What type of work item am I looking at?\n1.  What is the context/history around the creation of this work item (who created it, when, was it created from another item, etc)?\n1. How do I access or share this work item (reference, id, url, path/parent)?\n\nI know y'all are already tinkering on these. It seems like `#3` is the pressing ask here and I agree that ideally we want that ancestor + child view to be better consolidated than it is currently.\n\nFor a quick iteration, would it be possible to add more context to the breadcrumbs? A quick idea based on what I _think_ is feasible:\n\n| Before | After |\n| ------ | ------ |\n| ![image](/uploads/8b8160db7cfc0749d6e4777e8f9eaa2f/image.png) | ![image](/uploads/da7fca61a7a80491c953b82473f42d68/image.png) |\n\nHere is also some [old ideation](https://gitlab.com/gitlab-org/gitlab/-/issues/343776) around giving the parent more emphasis.",
      "noteable_type": "Epic",
      "author_id": 3617348,
      "created_at": "2022-06-21 19:26:15 UTC",
      "updated_at": "2022-06-21 19:26:15 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "a40c58a81faf928cff2f733a6e06b5f54fb18164",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 999844182,
      "namespace_id": null
    },
    {
      "note": "Also @uhlexsis I think we already have the API for getting the parent of a Task, so this would theoretically be a front-end change to show the parent issue (read-only) in a Task. @jprovaznik can you confirm my assumption here about the hierarchy widget GraphQL?",
      "noteable_type": "Epic",
      "author_id": 4303289,
      "created_at": "2022-06-22 14:38:16 UTC",
      "updated_at": "2022-06-22 14:38:16 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "a40c58a81faf928cff2f733a6e06b5f54fb18164",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1001023408,
      "namespace_id": null
    },
    {
      "note": "I created [this issue](https://gitlab.com/gitlab-org/gitlab/-/issues/366211) to capture the ask. Let's continue the discussion there if we still need to hash out details.",
      "noteable_type": "Epic",
      "author_id": 5709669,
      "created_at": "2022-06-23 19:54:07 UTC",
      "updated_at": "2022-06-23 19:54:07 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "a40c58a81faf928cff2f733a6e06b5f54fb18164",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1003436414,
      "namespace_id": null
    },
    {
      "note": "@danmh That helps. Thank you! I agree with what you stated that focusing on parent/child relationships seems like a good place to start, and relationship to other work items can come later. This is similar to the iteration path we are taking with OKRs :smile_cat: . \n\n@mmacfarlane @danmh Do you think there's an opportunity to use the patterns we have and introduce a \"basic\" hierarchy experience? I do also agree that, based on my review of the research, this was a big hurdle to adoption. We can augment the experience once we have more data on the aspects that @danmh describes.",
      "noteable_type": "Epic",
      "author_id": 5709669,
      "created_at": "2023-01-27 15:22:00 UTC",
      "updated_at": "2023-01-27 19:34:10 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "9c5f4dcb7c82ffa7ee03f14b2d853f65e2c314bb",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1255685038,
      "namespace_id": null
    },
    {
      "note": "> I've placed Hierarchies as a part of Requirements Complete Maturity\n\n@mmacfarlane thanks for this! From what I remember of the customer conversations this was a big hurdle to adopting requirements management in GitLab. Do you think there is a chance it might move to be a requirement (sorry) for a viable maturity?\n\n> Are there extra features you think you'll need that are not part of what we have today?\n\n@mushakov @amandarueda @mmacfarlane as far as I can tell most of the patterns needed for a basic experience are defined already. That is, creating a child of the same type, being able to identify the parent and any children, basic management.\n\nI think some of the harder aspects are found in questions like \"How are requirements decided in an org?\" and \"Who is responsible for managing them, what does their work look like?\". I hope that being able to answer some of these will help us identify and understand any associated problems.\n\nFrom an extra feature perspective, this might mean we need different editing, managing, and reporting experiences. \n\nI'm also not confident how users expect requirements to interact with other work items. The mental modal study was inconclusive here. Do requirements exist in their own world with related/blocking/linked-type relationships to other work items or should they allow parents and children of different types? Questions to answer later :smile: \n\nHope that helps",
      "noteable_type": "Epic",
      "author_id": 10593761,
      "created_at": "2023-01-27 10:41:46 UTC",
      "updated_at": "2023-01-27 19:34:07 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "9c5f4dcb7c82ffa7ee03f14b2d853f65e2c314bb",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1255223257,
      "namespace_id": null
    },
    {
      "note": "@mmacfarlane How exciting! Are there extra features you think you'll need that are not part of what we have today?",
      "noteable_type": "Epic",
      "author_id": 5709669,
      "created_at": "2023-01-25 22:51:34 UTC",
      "updated_at": "2023-01-25 22:51:34 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "9c5f4dcb7c82ffa7ee03f14b2d853f65e2c314bb",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1253084796,
      "namespace_id": null
    },
    {
      "note": "@danmh @mushakov I've placed Hierarchies as a part of Requirements Complete Maturity. This may land us in the Q2 or Q3 timeline for potentially work on implementation. \n\n@amandarueda were you and team also thinking of tackling Hierarchies further in that time span?",
      "noteable_type": "Epic",
      "author_id": 4159863,
      "created_at": "2023-01-25 22:29:37 UTC",
      "updated_at": "2023-01-25 22:51:34 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "9c5f4dcb7c82ffa7ee03f14b2d853f65e2c314bb",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": null,
      "last_edited_at": null,
      "internal": false,
      "id": 1253073205,
      "namespace_id": null
    },
    {
      "note": "@danmh Thank you for breaking down what we can carry over from tasks and OKRs versus what's unique to Requirements. \n\n> My first guess is that we will also want the following rules: A requirement can have many children; A requirement can only have another requirement as a child; A requirement can have a single parent; A requirement can only have another requirement as a parent; Requirement parent>child relationships can nest many layers deep\n\nThese are important to include. The concept of Upstream and Downstream requirements is important to maturity and this provides that structure.\n\nThere are some more complex hierarchal situations such as the following (just jotting down my thoughts):\n\nA car company needs a new solution for a door handle. The Need (Epic) is at the top of the hierarchy, a Requirement is a child nested under that Epic, and under that Requirement are Design/Engineering requirements as well as other Issues. A test case in this situation could be linked to both the child requirements but also validating the Need at the top level.\n\n@danmh for our next step let's finalize what we want to move forward with so we don't have to second guess :smile: Here's my thought:\n\nFor the Requirement Hierarchy Viable Solution we will have the following capabilities:\n\n* Add an existing requirement as a child\n* Add a new requirement as a child\n* Remove a requirement as a child\n* Add an existing requirement as a parent\n* Add a new requirement as a parent\n* Remove a requirement as a parent\n* Change a parent (move)\n* A requirement can have many children \n* A requirement can only have another requirement as a child\n* A requirement can have a single parent\n* A requirement can only have another requirement as a parent\n* Requirement parent>child relationships can nest many layers deep\n* Add a Test Case as a child of a requirement.",
      "noteable_type": "Epic",
      "author_id": 4159863,
      "created_at": "2023-01-30 19:48:09 UTC",
      "updated_at": "2023-01-30 19:48:09 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "9c5f4dcb7c82ffa7ee03f14b2d853f65e2c314bb",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1258136422,
      "namespace_id": null
    },
    {
      "note": "@gweaver We were not planning to display information about the relationships in Tasks in %\"15.2\" . Do you still think this information is critical if Tasks open in a modal as expected instead of a separate page? \n\ncc: @uhlexsis",
      "noteable_type": "Epic",
      "author_id": 5709669,
      "created_at": "2022-06-17 19:04:26 UTC",
      "updated_at": "2022-06-17 19:04:26 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "a40c58a81faf928cff2f733a6e06b5f54fb18164",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 996021783,
      "namespace_id": null
    },
    {
      "note": "@gweaver \n\n>I do not think the information is critical when viewing within the modal on the issue the Task is a child of, but becomes critical the moment the Task is viewed within any other context outside of the issue.\n\nYes agree. We had planned to complete up to MVC 2 next milestone https://gitlab.com/groups/gitlab-org/-/epics/7448. That's what our capacity showed we could complete. We don't have designs for showing a parent item yet. Is that something your team could help with? Once we have that, we could talk through options for implementing it. \n\ncc: @johnhope since this may affect plans for %\"15.2\" and @uhlexsis for visibility",
      "noteable_type": "Epic",
      "author_id": 5709669,
      "created_at": "2022-06-17 20:38:36 UTC",
      "updated_at": "2022-06-27 12:27:26 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "a40c58a81faf928cff2f733a6e06b5f54fb18164",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 996093843,
      "namespace_id": null
    },
    {
      "note": "I would think the breadcrumb would more or less just educate the user as to how they navigated/can navigate to this work item for MVC. This could be helpful even coexisting with a child/ancestor type widget.\n\n> This pattern only works when there's a single path to get to an item.\n\n> what happens when a task is related to more than 1 issue? `issue_links` have a `many-to-many` relationship.\n\nMaybe the word `related` was confusing here @gweaver @mushakov -  what I meant is it could just read literally the word `Task` like:\n\n<img src=\"/uploads/554ebbd17a543e073c2a8477dcbdb930/image.png\" width=\"300\">\n\nI wouldn't expect we need to call out related items in this way and that isn't something we currently do to my knowledge at least. Is that a need?\n\n> The breadcrumb on the task detail view also appears to be missing the work item ID\n\nI wasn't sure that we have this which is why I generalized to `Task` rather than `#`123. Do tasks have IDs & prefixes that are differentiated from other work items such as `issues` at the moment? If not, the challenge would be differentiating what the work item types are within the breadcrumbs. This could look something like (v rough):\n\n<img src=\"/uploads/6be60dfc7211f5d2be9138133b30b163/image.png\" width=\"300\">\n\nor more simply\n\n<img src=\"/uploads/09106b1777e9fa291109529f5d839d92/image.png\" width=\"300\">\n\n-----\n\n\n\nWhat could be helpful to solidly for future iterations:\n- If tasks can be orphaned. My assumption would be that tasks should be tied to an issue and never orphaned but I think this is still being explored. \n- Where the work items \"live\", what that view is and how it is accessed. For example what would happen if the user clicked \"work items\" in the current state, or where can the user view all tasks, incidents, etc (currently everything is a type of issue in the issue list).\n- How to best differentiate between types of work items (icon, prefix, whatever).\n\n\nIs there an issue for breadcrumbs or reference/paths for Tasks? Maybe in https://gitlab.com/groups/gitlab-org/-/epics/7103 ? I think this could be MVC for @nickleonard to account for in the new work item view that would address some of the feedback. Ancestors would be another aspect of this to work on separately.",
      "noteable_type": "Epic",
      "author_id": 3617348,
      "created_at": "2022-06-21 21:45:27 UTC",
      "updated_at": "2022-06-21 21:47:00 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": 3617348,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "a40c58a81faf928cff2f733a6e06b5f54fb18164",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": "2022-06-21 21:47:00 UTC",
      "internal": false,
      "id": 999949785,
      "namespace_id": null
    },
    {
      "note": "@uhlexsis I don't think the breadcrumbs can work for this solution. Consider this scenario:\n\n1. I create a Task from an issue. \n2. I relate that task to another 3 issues. \n\nWhat do we show here in the breadcrumbs when I navigate directly to the task? There would be no way to determine this because of the `many-to-many` nature of issue relationships. \n\n![image](/uploads/e1381619bc6f776a25d9766d714231b2/image.png)\n\n> Do tasks have IDs & prefixes that are differentiated from other work items such as `issues` at the moment?\n\nNo. The only difference is that we use an issue's global ID instead of the project ID in the URL. I think we need to start displaying `type` more prominently throughout the UI. An incident, test case, issue, task, and requirement are all just types of issues that we are moving towards calling `work items` where a work item has a `type`.\n\n> If tasks can be orphaned. My assumption would be that tasks should be tied to an issue and never orphaned but I think this is still being explored.\n\nTasks cannot be orphaned. They feel orphaned because a bug is preventing them from being visible within the issue list and when you navigate to the task detail view, you have no context on what issue the task is a part of. You technically can remove the relationship between the issue and the task, but the task will still be discoverable via the list view. They may also feel orphaned because they are currently being associated as just \"related\" instead of \"child of\" to the issue they were created from. Hopefully this part will change in 15.2 :fingers_crossed: \n\n> Where the work items \"live\", what that view is and how it is accessed. For example what would happen if the user clicked \"work items\" in the current state, or where can the user view all tasks, incidents, etc (currently everything is a type of issue in the issue list).\n\nRight now, the issue list. As soon as Tasks have assignee, weight, milestone, iteration, and label they will be accessible on Boards as well. \n\n> How to best differentiate between types of work items (icon, prefix, whatever).\n\nThings like the following would likely help:\n\n- Surface more meta-data (including `type`) when rendering references in markdown (ex: https://gitlab.com/gitlab-org/gitlab/-/issues/345170#note_735051311)\n- Include `type` name and `icon` more prominently at the top of each work item (or legacy issue view)",
      "noteable_type": "Epic",
      "author_id": 4303289,
      "created_at": "2022-06-22 12:10:49 UTC",
      "updated_at": "2022-06-22 12:10:49 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "a40c58a81faf928cff2f733a6e06b5f54fb18164",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1000737187,
      "namespace_id": null
    },
    {
      "note": ">were you and team also thinking of tackling Hierarchies further in that time span?\n\nYep! I have a couple UXR validations planned for Q1 around parent/child workflows and related (linked) workflows. Basically I want to understand what people are doing when accessing them and whether we could create a single relationship management widget for it all. I'd love to collaborate @mmacfarlane and don't mind either burning down a shared vision with both dev teams, or handing it over if it's something you're passionate about. WDYT?",
      "noteable_type": "Epic",
      "author_id": 2890431,
      "created_at": "2023-01-25 23:04:47 UTC",
      "updated_at": "2023-01-25 23:09:59 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": 2890431,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "9c5f4dcb7c82ffa7ee03f14b2d853f65e2c314bb",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": "2023-01-25 23:09:59 UTC",
      "internal": false,
      "id": 1253091994,
      "namespace_id": null
    },
    {
      "note": "> Are there extra features you think you'll need that are not part of what we have today?\n\nI've been reading through https://gitlab.com/gitlab-org/gitlab/-/issues/381478+ and the associated [MR](https://gitlab.com/gitlab-org/gitlab-services/design.gitlab.com/-/merge_requests/3216) and Dan has covered several of the complicated scenarios we might encounter. An example includes displaying hierarchies in Lists and Grid views interchangeably. I was concerned a bit as well about how Requirements would fit into general work item hierarchies as it includes some more unique fields (created date and adjusted date for example) but Dan showed me some mocks on how we can address this.\n\nI'm certain there will be more things popping up.\n\n> I'd love to collaborate and don't mind either burning down a shared vision with both dev teams, or handing it over if it's something you're passionate about. WDYT?\n\n@amandarueda I would love to collaborate with you. If you have a couple of validations planned already would you mind if I sit in on those conversations, or provide some input on screeners/discussions?",
      "noteable_type": "Epic",
      "author_id": 4159863,
      "created_at": "2023-01-26 18:48:25 UTC",
      "updated_at": "2023-01-26 18:59:32 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "9c5f4dcb7c82ffa7ee03f14b2d853f65e2c314bb",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1254299746,
      "namespace_id": null
    },
    {
      "note": "> Do you think there is a chance it might move to be a requirement (sorry) for a viable maturity?\n\n@danmh my rationale for Viable is to include existing functionality found in the Legacy ID that is moved to the requirements as a Work Item type. Since Hierarchies currently aren't available in the Legacy requirement I excluded them, however, I see your rationale for inclusion considering hierarchies are a big hurdle to adoption.\n\nPerhaps we segment it how @mushakov has suggested. In Viable we have basic parent/child relationships for hierarchies, in Complete we have more robust hierarchies we other work items?\n\n> Do you think there's an opportunity to use the patterns we have and introduce a \"basic\" hierarchy experience?\n\nDan this question is best suited for you. Based on what I've seen in Figma it seems like we can reuse some patterns but I'll leave that conclusion in your court.\n\nActions for me from this:\n\n- Breakdown Hierarchy functionality into Viable and Complete maturity\n- Gather details from Dan on what is reusable for Hierarchies/what is the most efficient path forward alongside our FY24 Q1 OKR.",
      "noteable_type": "Epic",
      "author_id": 4159863,
      "created_at": "2023-01-27 19:35:27 UTC",
      "updated_at": "2023-01-30 10:57:44 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "9c5f4dcb7c82ffa7ee03f14b2d853f65e2c314bb",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1256024438,
      "namespace_id": null
    },
    {
      "note": "Sounds good, thank you for sharing that @mmacfarlane.\n\n> Do you think there's an opportunity to use the patterns we have and introduce a \"basic\" hierarchy experience?\n\n@mmacfarlane @mushakov My first guess is we will want the following flows:\n\n- Add an existing requirement as a child\n- Add a new requirement as a child\n- Remove a requirement as a child\n- Add an existing requirement as a parent\n- Add a new requirement as a parent\n- Remove a requirement as a parent\n- Change a parent (move)\n\nI think the flows and behaviours for these are already defined as part of existing work items work (tasks & OKRs).\n\nMy first guess is that we will also want the following rules:\n\n- A requirement can have many children\n- A requirement can only have another requirement as a child\n- A requirement can have a single parent\n- A requirement can only have another requirement as a parent\n- Requirement parent>child relationships can nest many layers deep\n\nI'm sure we'll uncover some more stuff when we look closer and start to prototype out these experiences.",
      "noteable_type": "Epic",
      "author_id": 10593761,
      "created_at": "2023-01-30 11:03:07 UTC",
      "updated_at": "2023-01-30 21:04:35 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": 10593761,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "9c5f4dcb7c82ffa7ee03f14b2d853f65e2c314bb",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": "2023-01-30 11:05:38 UTC",
      "internal": false,
      "id": 1257272749,
      "namespace_id": null
    },
    {
      "note": "@mmacfarlane good stuff!\n\n> A car company needs a new solution for a door handle. The Need (Epic) is at the top of the hierarchy, a Requirement is a child nested under that Epic, and under that Requirement are Design/Engineering requirements as well as other Issues. A test case in this situation could be linked to both the child requirements but also validating the Need at the top level.\n\nThis is a really useful example, thank you for sharing it.\n\nSomething that I thought was interesting about the Work Items Mental Model study is participants didn't consistently position requirements in their mental models. I have low confidence that requirements exist in the same structure as planning & development items â€”Â but I can't articulate it in text fully yet. Lets chat about it in our 1:1. \n\nTo expand on your example, perhaps the door handle only exists because of a high level requirements like `Exits and entrances must close securely`, `Exits and entrances shouldn't open accidentally`, and `People must be able to enter and exit the vehicle comfortably`.\n\n> For the Requirement Hierarchy Viable Solution we will have the following capabilities:\n>\n> * Add an existing requirement as a child\n> * Add a new requirement as a child\n> * Remove a requirement as a child\n> * Add an existing requirement as a parent\n> * Add a new requirement as a parent\n> * Remove a requirement as a parent\n> * Change a parent (move)\n\nAgreed ðŸ™Œ for viable I think it would be ok for this to be scoped within a project if that makes it easier to deliver. Longer term I'd expect these to not want to be constrained by groups & projects.\n\n> For the Requirement Hierarchy Viable Solution we will have the following capabilities:\n> \n> * A requirement can have many children\n> * A requirement can only have another requirement as a child\n> * A requirement can have a single parent\n> * A requirement can only have another requirement as a parent\n> * Requirement parent>child relationships can nest many layers deep\n> * ~~Add a Test Case as a child of a requirement.~~\n\nI propose we don't make test cases a child of a requirement for the viable solution. Right now my guess is they have a strong relationship, but not a hierarchical one. Perhaps we could pick up what test cases are, and what they can do as part of getting quality management to viable?",
      "noteable_type": "Epic",
      "author_id": 10593761,
      "created_at": "2023-01-31 10:24:00 UTC",
      "updated_at": "2023-01-31 10:24:00 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "9c5f4dcb7c82ffa7ee03f14b2d853f65e2c314bb",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1258943914,
      "namespace_id": null
    },
    {
      "note": "I really like the direction here @danmh and @mmacfarlane !",
      "noteable_type": "Epic",
      "author_id": 5709669,
      "created_at": "2023-01-31 22:11:30 UTC",
      "updated_at": "2023-01-31 23:03:17 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "9c5f4dcb7c82ffa7ee03f14b2d853f65e2c314bb",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1260117154,
      "namespace_id": null
    },
    {
      "note": "> Something that I thought was interesting about the Work Items Mental Model study is participants didn't consistently position requirements in their mental models. I have low confidence that requirements exist in the same structure as planning & development items â€”Â but I can't articulate it in text fully yet. Lets chat about it in our 1:1.\n\nHappy to chat about this. Added to our 1:1 doc.\n\n> To expand on your example, perhaps the door handle only exists because of a high level requirements like `Exits and entrances must close securely`, `Exits and entrances shouldn't open accidentally`, and `People must be able to enter and exit the vehicle comfortably`.\n\nA potential solution to this is defining the Requirement Priority level. I outlined this as a potential Complete feature. Priority levels would allow users to indicate if a requirement is tied to an initiative that is concerning safety, or whatever parameters they want. Dare I say we could also solve this with Labels ;)\n\n> I propose we don't make test cases a child of a requirement for the viable solution. Right now my guess is they have a strong relationship, but not a hierarchical one. Perhaps we could pick up what test cases are, and what they can do as part of getting quality management to viable?\n\nThat works for me. I appreciate your consideration as I tossed it in there.\n\n@danmh Let's move forward with the following then for Viable (I've adjusted this [Epic](https://gitlab.com/groups/gitlab-org/-/epics/4668) to reflect this):\n\n* A requirement can have many children\n* A requirement can only have another requirement as a child\n* A requirement can have a single parent\n* A requirement can only have another requirement as a parent\n* Requirement parent>child relationships can nest many layers deep\n\nDoes this give you the appropriate direction for Visualization? It sounds like there might not be too much new design here considering :fingers_crossed:",
      "noteable_type": "Epic",
      "author_id": 4159863,
      "created_at": "2023-01-31 23:03:10 UTC",
      "updated_at": "2023-02-01 10:31:15 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": 4159863,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "9c5f4dcb7c82ffa7ee03f14b2d853f65e2c314bb",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": "2023-01-31 23:04:40 UTC",
      "internal": false,
      "id": 1260155769,
      "namespace_id": null
    },
    {
      "note": "@mushakov @gweaver @akotte @darbyfrey @nickbrandt @esybrant  Hey team, can you please look at the [allowable relationships section](https://gitlab.com/groups/gitlab-org/-/epics/6286#allowable-relationships) above and lmk if these assumptions match your thinking?",
      "noteable_type": "Epic",
      "author_id": 2890431,
      "created_at": "2023-07-31 20:28:36 UTC",
      "updated_at": "2023-08-01 09:16:38 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": 2890431,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": null,
      "last_edited_at": "2023-07-31 20:31:53 UTC",
      "internal": false,
      "id": 1494371140,
      "namespace_id": null
    },
    {
      "note": "@amandarueda IMHO any work item type should be linkable to any other work item type. That's just establishing a relationship. I also think it's fine if that means any work item type can block/blocks another work item type. It dramatically simplifies the logic. \n\nRegarding the defaults for the parent/child relationships:\n\n- Requirements should be recursive (ex: `requirement` > `requirement`)\n- Tasks should be not a child of Requirements because Tasks are things you do (short-lived planning object) and Requirements encapsulate long-lived system behavior. \n\nFor the parent/child relationships, I think we should de-emphasize hardcoding the \"correct\" logic for parent/child relationships and instead focus our efforts on https://gitlab.com/groups/gitlab-org/-/epics/7876+, which has a number of related issues scattered about:\n\n- https://gitlab.com/gitlab-org/gitlab/-/issues/383331+ (this is the table that determines which parent/child relationships are allowed and is what we want customers to eventually be able to configure)\n- https://gitlab.com/groups/gitlab-org/-/epics/7160+ (this feels functionally the same as https://gitlab.com/groups/gitlab-org/-/epics/7876+\n\nNothing has been finalized, but Alexis did some early design explorations:\n\n- https://gitlab.com/gitlab-org/gitlab/-/issues/346017#note_737144860\n- https://gitlab.com/gitlab-org/gitlab/-/issues/340844\n\nWe know that as we migrate epics to work items, we'll need to support the existing behavior of epics and issues today, which means recursive parent/child relationships (so `epic` > `epic` ...) should be an option within the configuration/relationship rules.\n\nAs a side note, fibery.io has a pretty slick way of managing relationships (in Fibery's world, a database is equivalent to a work item type):\n\n![Screenshot_2023-08-04_at_9.59.07_AM](/uploads/280567a06d4840a82b3b82738a438dc5/Screenshot_2023-08-04_at_9.59.07_AM.png)\n\nThey also have a global \"workspace map\" that lets you see all relationships across all objects, which is pretty helpful:\n\n![Screenshot_2023-08-04_at_10.02.52_AM](/uploads/2915d156b26b4c7185327cc2f12d608e/Screenshot_2023-08-04_at_10.02.52_AM.png)\n\nLastly, I think this table highlights that there are lots of valid arguments for multi-parenting. An issue could technically implement a requirement (child of requirement) while it is also a child of an epic (planning roadmap), but this is a separate discussion :smile:",
      "noteable_type": "Epic",
      "author_id": 4303289,
      "created_at": "2023-08-04 14:09:32 UTC",
      "updated_at": "2023-08-14 12:55:02 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1500876910,
      "namespace_id": null
    },
    {
      "note": ">One question, do we plan to offer linking of **related** MRs? If so, do we need to add that to [this table](https://gitlab.com/groups/gitlab-org/-/epics/6286#linked-related)? Or is this only focused solely on `work item` <> `work item` relationships?\n\n@nickbrandt this focus is on work items <> work item relationships. However with the introduction of `development` relationship type, we should explore adding linked MRs to the main linked component.",
      "noteable_type": "Epic",
      "author_id": 2890431,
      "created_at": "2023-08-03 22:11:40 UTC",
      "updated_at": "2023-08-03 22:11:40 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1499832988,
      "namespace_id": null
    },
    {
      "note": "@gweaver when you have time (not urgent), can you check my logic on the rules for relationships with `Test Case`, `Ticket`, `Incident`, and `Requirement`?\n\n@kbychu would you mind specifically checking my logic on the rules for relationships with  `Ticket` and `Incident`?",
      "noteable_type": "Epic",
      "author_id": 2890431,
      "created_at": "2023-08-03 22:56:35 UTC",
      "updated_at": "2023-08-03 22:56:35 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1499856802,
      "namespace_id": null
    },
    {
      "note": "Thanks a bunch @gweaver!\n\n>Maybe consider including `Test Case`, `Ticket`, `Incident`, and `Requirement` in the table as they all are or will be work items in the future.\n\nYes, definitely, I'll add them to the table.\n\n**Re: non-work item relationships**, IMO we should allow the relationships and include them in the main linked item widget if the user workflow supports that. What I mean is some of the related items mentioned on https://gitlab.com/groups/gitlab-org/-/epics/7105 may have a specific flow, separate from the natural flow of referencing linked records on a work item and perhaps they would need their own widget or callout. I would want to see research about how those records are referenced and what they are used for before making that call.\n\n**Re: `implemented by` type of relationships**:\n\n- **MRs**: For me, this is rather straight-forward when it comes to MRs and makes sense as a relationship type other than `related`, `blocking` and `blocked by`. There is great upside in creating this new relationship for reporting and delivery management. I wouldn't mind this being another section in the `linked items widget` but I believe UX is leaning towards visually separating this into its own widget on the detail page.\n- **OKRs**: I don't think OKRs is as straight forward. OKRs actually shouldn't be \"implemented\" or \"satisfied\" by epics and issues (work streams). Instead, they should be \"satisfied\" by the achieved goal (eg. reduce churn by x%). \n     - The work streams that affect the goal IMO are `related` or potentially `blocking` since the needle on the goal may not be moved as much as desired if the work stream is stalled. This distinction is often confused (even here at GitLab) with folks wanting the work stream to directly impact the Objective progress. \n     - Since I'm not the DRI for OKRs, /cc @akotte & @darbyfrey to weigh-in on whether OKRs should be linked (related, blocking, blocked by) to work items or `implemented by` work items.",
      "noteable_type": "Epic",
      "author_id": 2890431,
      "created_at": "2023-08-03 22:25:13 UTC",
      "updated_at": "2023-08-04 14:10:56 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1499842565,
      "namespace_id": null
    },
    {
      "note": "@francoisrose\n\n> To _not break_ existing relationships to Epics when we [migrate Service Desk `Issues` to `Tickets`](https://gitlab.com/gitlab-org/gitlab/-/issues/414353 \"Migrate existing service desk issues to tickets\")\n\nThis is a great point. Are there other work item types that you would envision Tickets being children of?'\n\n(Amanda is OOO and I am filling in for her, so please tag me in this discussion for now :smile_cat: )",
      "noteable_type": "Epic",
      "author_id": 5709669,
      "created_at": "2023-08-14 14:14:41 UTC",
      "updated_at": "2023-08-14 14:15:36 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": 5709669,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": "2023-08-14 14:15:36 UTC",
      "internal": false,
      "id": 1512427279,
      "namespace_id": null
    },
    {
      "note": "Adding some data:\n- Approx 1-2% of Service Desk Issues on GitLab.com have an Epic assigned, trending up\n  - Source: https://app.periscopedata.com/app/gitlab/1147376/Service-Desk---Widget-Interactions?widget=17075289&udv=0\n- Approx 7% of _all_ Issues have Epics in recent quarters\n  - Source: I temporarily removed `WHERE author_id = 1257257` from the same dashboard\n\nSo the usage of Epics in Service Desk is definitely not negligible IMO.\n\n---\n\n@mushakov Thank you for jumping in! Apart from Epics, I think Tickets could be children of other Tickets. I think all other parent types wouldn't apply.",
      "noteable_type": "Epic",
      "author_id": 13143755,
      "created_at": "2023-08-14 14:41:07 UTC",
      "updated_at": "2023-08-14 14:41:07 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1512481162,
      "namespace_id": null
    },
    {
      "note": "@francoisrose  @kbychu  Any thoughts on how many levels deep you'd want tickets to nest under other tickets? For other nesting work item types, the limit is 9.",
      "noteable_type": "Epic",
      "author_id": 5709669,
      "created_at": "2023-08-14 14:58:05 UTC",
      "updated_at": "2023-08-14 14:58:05 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1512526182,
      "namespace_id": null
    },
    {
      "note": "@mushakov I imagine 2 levels of Tickets would be typical (when nesting is needed), maybe slightly more in some elaborate cases. 9 seems like plenty.\n\n<details><summary>Click for example Ticket/Task hierarchy</summary>\n\n> 1. (Ticket) Onboarding for FranÃ§ois RosÃ©, joining 2023-08-14 as CEO\n>    1. (Ticket) IT Onboarding\n>       1. (Task) Provide laptop\n>       1. (Task) Create email account\n>    1. (Ticket) HR onboarding\n>       1. (Task) Add to Workday\n>       1. (Task) Setup payroll\n>    1. (Ticket) Self-onboarding\n>       1. (Task) Complete these 500 checkboxes\n>       1. (Task) Meet the exec group\n\n</details>",
      "noteable_type": "Epic",
      "author_id": 13143755,
      "created_at": "2023-08-14 15:10:04 UTC",
      "updated_at": "2023-08-14 15:39:30 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1512554003,
      "namespace_id": null
    },
    {
      "note": "Sure @amandarueda ! Thanks for asking.\n\n1. I think both tickets and incidents can be a child of an epic. For example An incident is created and we discover a fundamental problem that requires a large effort. Everything is included in the epic, including the original incident. Or a large customer created several tickets on related issue they're experiencing, it makes sense to group them together under an epic, which may include development effort that is committed to the customer.\n2. I think both ticket and incident can potentially have recursive relationship with itself. For example, for a SaaS app, there might be a general incident, but sub-incident impacting specific important customers. For tickets, let's take the example of onboarding, there is a main ticket and sub tickets that are completed by different teams. It could potentially also be tasks under tickets as a good enough replacement...but I prefer not limiting the recursive relationship.\n3. I think it's possible for tickets to be blocked by tickets.\n4. Tickets/incidents might be related to test cases and potentially requirements.\n\ncc @francoisrose @syasonik in case they have some thoughts.",
      "noteable_type": "Epic",
      "author_id": 5213298,
      "created_at": "2023-08-04 02:23:16 UTC",
      "updated_at": "2023-08-10 18:14:23 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1499946962,
      "namespace_id": null
    },
    {
      "note": "@ck3g see Melissa's message above. It seems that having Tickets as children of Epics is fine. However, linking _legacy_ Epics to work items is not planned to be supported, because it would be costly to implement. That means https://gitlab.com/gitlab-org/gitlab/-/issues/420862+ will be blocked by https://gitlab.com/groups/gitlab-org/-/epics/9290+.\n\nThat epic seems in progress now, but we're still blocked. Options are:\n1. Wait until Epics migrate to Work Items, stay blocked\n2. Same as 1. but also contribute to migrating Epic to Work Items, assuming that speeds up the work\n3. Add exception to the logic that prevents non-Issues to be assigned to Epics (see [comment](https://gitlab.com/gitlab-org/gitlab/-/issues/414353#note_1512065085)), assuming that is actually doable. It probably isn't, otherwise it wouldn't be so costly to support it?\n4. ...something else...?\n\n@kushalpandya any thoughts / ideas? We basically have parallel Work Item migrations taking place here, maybe there are some creative workarounds I'm missing.",
      "noteable_type": "Epic",
      "author_id": 13143755,
      "created_at": "2023-08-14 17:42:43 UTC",
      "updated_at": "2023-08-14 17:42:43 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1512749963,
      "namespace_id": null
    },
    {
      "note": "> As I recently notice, we cannot covert issues assigned to an epic due to failing validation. We can consider \"force\" convert by bypassing validation, but it seems to me not he best approach.\n\n@ck3g Validation happens on both creation and updating of work item type? We primarily want to prevent work items from being added as children from epics. Maybe we can switch the validation to check if an `issue` is a work item and prevent it from being added as a child if it is.\n\n> As I understand, the mentioned toggle should work per user and not per work item. Thus we're not going to convert issue type back and forth. The idea is to be able to toggle between old and new interface while we're working in adding features into the new one.\n\nThat might still work. It can be treated as a feature that is not yet added to the new work item view, and users that need that information would have to use the old view.\n\n> Would you be able to associate a ticket to an epic from this view?\n\n@mushakov It depends on how we handle the validation mentioned above. If needed we can probably allow it.",
      "noteable_type": "Epic",
      "author_id": 3507264,
      "created_at": "2023-08-21 14:58:30 UTC",
      "updated_at": "2023-08-21 16:07:34 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1521370545,
      "namespace_id": null
    },
    {
      "note": "@francoisrose @ck3g \n\n> Tickets as children of Epics is fine.\n\nTo clarify this further, we currently don't support having legacy epics as parents of work items either and were not planning to implement it. We were essentially trying to avoid having epic to work item relationships since we are close to migrating epics to work items (target is early next year). \n\ncc: @kushalpandya",
      "noteable_type": "Epic",
      "author_id": 5709669,
      "created_at": "2023-08-14 20:35:11 UTC",
      "updated_at": "2023-08-14 20:35:11 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1512905112,
      "namespace_id": null
    },
    {
      "note": "@mushakov thank you, yes, that's what I meant as well!\n\nWhen I say \"Tickets as children of Epics is fine\", I mean that it's fine to have that parent:child relationship (semantically speaking). @amandarueda had raised that `Epic:Ticket` was not desired, but from our conversation here I gather that it will be acceptable. Please correct me if that's wrong!\n\n> we are close to migrating epics to work items (target is early next year)\n\nThis is the part that worries me, since that would mean we're blocked on introducing Service Desk Tickets until that work is complete. Hence looking for solutions to work around that dependency. I certainly don't want to go down a path that requires months of work to enable `legacy Epics:Work items` either.",
      "noteable_type": "Epic",
      "author_id": 13143755,
      "created_at": "2023-08-15 06:59:24 UTC",
      "updated_at": "2023-08-15 06:59:24 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1513329762,
      "namespace_id": null
    },
    {
      "note": "@francoisrose Technically, legacy issues and tickets can coexist simultaneously, as we're currently planning. However, the new ticket-only features will not be accessible for legacy issues. For instance, if we were to add a ticket-specific widget to a ticket page, that might not be the optimal solution.\n\nOn the other hand, we are planning the introduction of a view toggle that allows users to switch between the legacy issue view and the ticket view. As long as this feature is available, having two different views could be acceptable for a certain period.",
      "noteable_type": "Epic",
      "author_id": 3714742,
      "created_at": "2023-08-15 08:12:01 UTC",
      "updated_at": "2023-08-15 08:12:01 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1513419068,
      "namespace_id": null
    },
    {
      "note": "FYI I updated the table to show that a ticket can be a child of an epic of another ticket :thumbsup:",
      "noteable_type": "Epic",
      "author_id": 5709669,
      "created_at": "2023-08-15 15:30:04 UTC",
      "updated_at": "2023-08-16 16:09:08 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1514127480,
      "namespace_id": null
    },
    {
      "note": "@donaldcook @johnhope including you here too to see if you have any creative solutions/ideas :sweat_smile: . Essentially, the Respond team is working on making service desk created issues be a new work item type named Tickets. Tickets need to be children of Epics. We do not have the ability to set work items as children of epics and do not plan to implement it. I'm wondering if because the data for Tickets would be in the Issues table, there is a way to achieve this without building capabilities to relate Tickets to Legacy Epics.\n\ncc: @kushalpandya",
      "noteable_type": "Epic",
      "author_id": 5709669,
      "created_at": "2023-08-17 16:59:31 UTC",
      "updated_at": "2023-08-17 16:59:31 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1517541160,
      "namespace_id": null
    },
    {
      "note": "@ck3g Do we have the migration plan from service desk issues to work item tickets documented? From what I'm gathering, we just don't want to lose the current epic -> ticket relationship in the migration. If we just update the work item type of the issue in the issues table, the relationship to the epic should persist (we may have to add another exception to what you mentioned in https://gitlab.com/gitlab-org/gitlab/-/issues/414353#note_1512065085, cc @egrieff).\n\n> we are planning the introduction of a view toggle that allows users to switch between the legacy issue view and the ticket view\n\nI agree with @kushalpandya that creating a separate widget/feature to associate with legacy epics is an inefficient use of time. If we're adding a toggle, I would recommend we just don't show the related epic in the work item view until epics are also work items (possibly with a note explaining that it is coming to work items in the future).\n\n/cc @mushakov @francoisrose",
      "noteable_type": "Epic",
      "author_id": 3507264,
      "created_at": "2023-08-17 17:43:38 UTC",
      "updated_at": "2023-08-18 11:37:43 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1517596690,
      "namespace_id": null
    },
    {
      "note": "> If we're adding a toggle, I would recommend we just don't show the related epic in the work item view until epics are also work items (possibly with a note explaining that it is coming to work items in the future)\n\n@donaldcook I like where you are going. Would you be able to associate a ticket to an epic from this view?",
      "noteable_type": "Epic",
      "author_id": 5709669,
      "created_at": "2023-08-17 18:53:36 UTC",
      "updated_at": "2023-08-17 18:53:36 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1517667993,
      "namespace_id": null
    },
    {
      "note": "\n@donaldcook cook We were planning to create a background migration to go through issues created by support bot (that's the anchor for Service Desk issues) and convert them into work items.\n\n> If we just update the work item type of the issue in the issues table, the relationship to the epic should persist\n\nAs I recently notice, we cannot covert issues assigned to an epic due to failing validation. We can consider \"force\" convert by bypassing validation, but it seems to me not he best approach.\n\n> If we're adding a toggle, I would recommend we just don't show the related epic in the work item view until epics are also work items (possibly with a note explaining that it is coming to work items in the future).\n\nAs I understand, the mentioned toggle should work per user and not per work item. Thus we're not going to convert issue type back and forth. The idea is to be able to toggle between old and new interface while we're working in adding features into the new one. \n\nThe work item view doesn't show any epic information at the moment.",
      "noteable_type": "Epic",
      "author_id": 3714742,
      "created_at": "2023-08-21 06:42:42 UTC",
      "updated_at": "2023-08-21 06:42:42 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1520460109,
      "namespace_id": null
    },
    {
      "note": "@donaldcook \n\n> Validation happens on both creation and updating of work item type?\n\nYes, that's how it works at the moment",
      "noteable_type": "Epic",
      "author_id": 3714742,
      "created_at": "2023-08-22 06:25:39 UTC",
      "updated_at": "2023-08-22 06:25:39 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1522239616,
      "namespace_id": null
    },
    {
      "note": "@donaldcook @ck3g `work_item_type` change is not allowed for legacy issues, they can only be changed to be an incident or a test case, the legacy types. These used to be called `issue_type` until recently which made it easier to understand IMO. This MR has more context: https://gitlab.com/gitlab-org/gitlab/-/merge_requests/107010.\n\n> If we just update the work item type of the issue in the issues table, the relationship to the epic should persist \n\nI agree, if using the work item view for the legacy issue is not a problem, the type can be converted using the `WorkItem` model where the validation is not present. This can be done using a GQL mutation or a quick action:\n\n```graphql\nmutation convertWorkItem {\n  workItemConvert(input:{id: \"gid://gitlab/WorkItem/<legacy_issue_ID>\", workItemTypeId:\"gid://gitlab/WorkItems::Type/<type_id>\"}) {\n    errors\n    workItem {\n      workItemType {\n        name\n      }\n    }\n  }\n}\n```\n\n```\n/type ticket\n```\n\nAlthough this is not working at the moment because we are missing the ability name for tickets, we need to add `rule { can?(:create_issue) }.enable :create_ticket` to [`ProjectPolicy`](https://gitlab.com/gitlab-org/gitlab/-/blob/master/app/policies/project_policy.rb) to fix it.",
      "noteable_type": "Epic",
      "author_id": 3860200,
      "created_at": "2023-08-22 15:15:53 UTC",
      "updated_at": "2023-08-22 15:17:43 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": 3860200,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": "2023-08-22 15:17:42 UTC",
      "internal": false,
      "id": 1523118385,
      "namespace_id": null
    },
    {
      "note": "Merging [this thread](https://gitlab.com/groups/gitlab-org/-/epics/11139#note_1507908378) here, where @amandarueda said:\n\n> Once Epics are migrated to work items, you will be able to **[link](https://gitlab.com/gitlab-org/gitlab/-/issues/387899)** (related, blocked by, blocking) work items to epics, however we will **not** allow a `Epic (parent):Ticket (child)` relationship. Please lmk if there is a strong use case you'd like to share for allowing this relationship.\n\n@amandarueda these are the main reasons to support `Epic (parent):Ticket (child)`:\n- To group Tickets that come from the same large customer on a related issue they're experiencing. The epic may include development effort that is committed to the customer. _(Paraphrasing @kbychu's [comment](https://gitlab.com/groups/gitlab-org/-/epics/6286#note_1499946962) above)_\n- To _not break_ existing relationships to Epics when we [migrate Service Desk `Issues` to `Tickets`](https://gitlab.com/gitlab-org/gitlab/-/issues/414353).\n  - If we do break this, would we need to wait until 17.0 before migrating to Tickets?\n\nCan you share the arguments to disallow `Epic (parent):Ticket (child)`?\n\nNote: we are almost ready to migrate Issues>Tickets, so this decision will block our work soon.\n\ncc @kbychu",
      "noteable_type": "Epic",
      "author_id": 13143755,
      "created_at": "2023-08-14 14:10:11 UTC",
      "updated_at": "2023-08-22 18:49:13 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1512419543,
      "namespace_id": null
    },
    {
      "note": "Thanks for the info @francoisrose . I'll update the table above. One thing to consider is that y'all will likely need to wait for epics to be migrated to work items. We don't currently have plans to implement relationships of work items to legacy epics. Our research showed that it's considerable effort to do so https://gitlab.com/groups/gitlab-org/-/epics/7459#note_1489295354 . \n\ncc: @kbychu for visibility\n\ncc: @kushalpandya to verify the estimate is appropriate and answer technical questions",
      "noteable_type": "Epic",
      "author_id": 5709669,
      "created_at": "2023-08-14 15:51:14 UTC",
      "updated_at": "2023-08-22 18:49:33 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1512632423,
      "namespace_id": null
    },
    {
      "note": "@francoisrose Sorry for late response here!\n\n> It seems that having Tickets as children of Epics is fine. However, linking *legacy* Epics to work items is not planned to be supported, because it would be costly to implement.\n\n> Add exception to the logic that prevents non-Issues to be assigned to Epics (see [comment](https://gitlab.com/gitlab-org/gitlab/-/issues/414353#note_1512065085)), assuming that is actually doable. It probably isn't, otherwise it wouldn't be so costly to support it?\n\nLet's call tickets as `issues` :sweat_smile:, yes, linking legacy epics to work items is not only very challenging but also a wasted effort as that would eventually be possible once both issues and epics are migrated. Reason being issues and epics both have different db tables. :slight_smile:\n\nAlso, we have https://gitlab.com/groups/gitlab-org/-/epics/10851+ coming up soon which will allow relating legacy issues to work items so even if legacy issues are pending migration, it wouldn't prevent _migrated_ epics to relate to _legacy_ issues.",
      "noteable_type": "Epic",
      "author_id": 411701,
      "created_at": "2023-08-17 09:00:30 UTC",
      "updated_at": "2023-08-24 09:39:41 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": "DiscussionNote",
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "370b15c94ea6a6f246b73af4efbd80d503539c34",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": false,
      "last_edited_at": null,
      "internal": false,
      "id": 1516680460,
      "namespace_id": null
    },
    {
      "note": "@kushalpandya I think the tables above are now complete if you'd like to add them to documentation. Lmk once complete and I will deprecate the use of the table in the epic and redirect folks to the documentation link. :thankyou:",
      "noteable_type": "Epic",
      "author_id": 2890431,
      "created_at": "2023-09-12 17:02:02 UTC",
      "updated_at": "2023-09-13 19:18:09 UTC",
      "project_id": null,
      "attachment": null,
      "line_code": null,
      "commit_id": null,
      "noteable_id": 302007,
      "st_diff": null,
      "system": false,
      "updated_by_id": null,
      "type": null,
      "position": null,
      "original_position": null,
      "resolved_at": null,
      "resolved_by_id": null,
      "discussion_id": "f8ab03adc0d66acb1ad114c3b2450fbcc52a76c6",
      "change_position": null,
      "resolved_by_push": null,
      "review_id": null,
      "confidential": null,
      "last_edited_at": null,
      "internal": false,
      "id": 1555545820,
      "namespace_id": null
    }
  ],
  "note_authors": [
    {
      "id": 3714742,
      "username": "ck3g",
      "name": "Vitali Tatarintev"
    },
    {
      "id": 5709669,
      "username": "mushakov",
      "name": "Melissa Ushakov"
    },
    {
      "id": 4303289,
      "username": "gweaver",
      "name": "Gabe Weaver"
    },
    {
      "id": 4303289,
      "username": "gweaver",
      "name": "Gabe Weaver"
    },
    {
      "id": 4669960,
      "username": "cdybenko",
      "name": "Christen Dybenko"
    },
    {
      "id": 3617348,
      "username": "uhlexsis",
      "name": "Alexis Ginsberg"
    },
    {
      "id": 3617348,
      "username": "uhlexsis",
      "name": "Alexis Ginsberg"
    },
    {
      "id": 5041243,
      "username": "nickbrandt",
      "name": "Nick Brandt"
    },
    {
      "id": 4303289,
      "username": "gweaver",
      "name": "Gabe Weaver"
    },
    {
      "id": 1642716,
      "username": "jprovaznik",
      "name": "Jan Provaznik"
    },
    {
      "id": 3617348,
      "username": "uhlexsis",
      "name": "Alexis Ginsberg"
    },
    {
      "id": 9676400,
      "username": "badnewsblair",
      "name": "Blair Christopher"
    },
    {
      "id": 4554611,
      "username": "hollyreynolds",
      "name": "Holly Reynolds"
    },
    {
      "id": 4303289,
      "username": "gweaver",
      "name": "Gabe Weaver"
    },
    {
      "id": 4303289,
      "username": "gweaver",
      "name": "Gabe Weaver"
    },
    {
      "id": 5709669,
      "username": "mushakov",
      "name": "Melissa Ushakov"
    },
    {
      "id": 3617348,
      "username": "uhlexsis",
      "name": "Alexis Ginsberg"
    },
    {
      "id": 4303289,
      "username": "gweaver",
      "name": "Gabe Weaver"
    },
    {
      "id": 5709669,
      "username": "mushakov",
      "name": "Melissa Ushakov"
    },
    {
      "id": 5709669,
      "username": "mushakov",
      "name": "Melissa Ushakov"
    },
    {
      "id": 10593761,
      "username": "danmh",
      "name": "Dan Mizzi-Harris"
    },
    {
      "id": 5709669,
      "username": "mushakov",
      "name": "Melissa Ushakov"
    },
    {
      "id": 4159863,
      "username": "mmacfarlane",
      "name": "Matthew Macfarlane"
    },
    {
      "id": 4159863,
      "username": "mmacfarlane",
      "name": "Matthew Macfarlane"
    },
    {
      "id": 5709669,
      "username": "mushakov",
      "name": "Melissa Ushakov"
    },
    {
      "id": 5709669,
      "username": "mushakov",
      "name": "Melissa Ushakov"
    },
    {
      "id": 3617348,
      "username": "uhlexsis",
      "name": "Alexis Ginsberg"
    },
    {
      "id": 4303289,
      "username": "gweaver",
      "name": "Gabe Weaver"
    },
    {
      "id": 2890431,
      "username": "amandarueda",
      "name": "Amanda Rueda"
    },
    {
      "id": 4159863,
      "username": "mmacfarlane",
      "name": "Matthew Macfarlane"
    },
    {
      "id": 4159863,
      "username": "mmacfarlane",
      "name": "Matthew Macfarlane"
    },
    {
      "id": 10593761,
      "username": "danmh",
      "name": "Dan Mizzi-Harris"
    },
    {
      "id": 10593761,
      "username": "danmh",
      "name": "Dan Mizzi-Harris"
    },
    {
      "id": 5709669,
      "username": "mushakov",
      "name": "Melissa Ushakov"
    },
    {
      "id": 4159863,
      "username": "mmacfarlane",
      "name": "Matthew Macfarlane"
    },
    {
      "id": 2890431,
      "username": "amandarueda",
      "name": "Amanda Rueda"
    },
    {
      "id": 4303289,
      "username": "gweaver",
      "name": "Gabe Weaver"
    },
    {
      "id": 2890431,
      "username": "amandarueda",
      "name": "Amanda Rueda"
    },
    {
      "id": 2890431,
      "username": "amandarueda",
      "name": "Amanda Rueda"
    },
    {
      "id": 2890431,
      "username": "amandarueda",
      "name": "Amanda Rueda"
    },
    {
      "id": 5709669,
      "username": "mushakov",
      "name": "Melissa Ushakov"
    },
    {
      "id": 13143755,
      "username": "francoisrose",
      "name": "FranÃ§ois RosÃ©"
    },
    {
      "id": 5709669,
      "username": "mushakov",
      "name": "Melissa Ushakov"
    },
    {
      "id": 13143755,
      "username": "francoisrose",
      "name": "FranÃ§ois RosÃ©"
    },
    {
      "id": 5213298,
      "username": "kbychu",
      "name": "Kevin Chu"
    },
    {
      "id": 13143755,
      "username": "francoisrose",
      "name": "FranÃ§ois RosÃ©"
    },
    {
      "id": 3507264,
      "username": "donaldcook",
      "name": "Donald Cook"
    },
    {
      "id": 5709669,
      "username": "mushakov",
      "name": "Melissa Ushakov"
    },
    {
      "id": 13143755,
      "username": "francoisrose",
      "name": "FranÃ§ois RosÃ©"
    },
    {
      "id": 3714742,
      "username": "ck3g",
      "name": "Vitali Tatarintev"
    },
    {
      "id": 5709669,
      "username": "mushakov",
      "name": "Melissa Ushakov"
    },
    {
      "id": 5709669,
      "username": "mushakov",
      "name": "Melissa Ushakov"
    },
    {
      "id": 3507264,
      "username": "donaldcook",
      "name": "Donald Cook"
    },
    {
      "id": 5709669,
      "username": "mushakov",
      "name": "Melissa Ushakov"
    },
    {
      "id": 3714742,
      "username": "ck3g",
      "name": "Vitali Tatarintev"
    },
    {
      "id": 3714742,
      "username": "ck3g",
      "name": "Vitali Tatarintev"
    },
    {
      "id": 3860200,
      "username": "egrieff",
      "name": "Eugenia Grieff"
    },
    {
      "id": 13143755,
      "username": "francoisrose",
      "name": "FranÃ§ois RosÃ©"
    },
    {
      "id": 5709669,
      "username": "mushakov",
      "name": "Melissa Ushakov"
    },
    {
      "id": 411701,
      "username": "kushalpandya",
      "name": "Kushal Pandya"
    },
    {
      "id": 2890431,
      "username": "amandarueda",
      "name": "Amanda Rueda"
    }
  ],
  "namespace_hierarchy": [
    {
      "id": 9970,
      "name": "GitLab.org",
      "path": "gitlab-org",
      "type": "Group"
    }
  ]
}
