import { sprintf, __, n__, s__ } from '~/locale';
import { toNounSeriesText } from '~/lib/utils/grammar';
import {
  SEVERITY_LEVELS,
  SEVERITY_LEVELS_KEYS,
  REPORT_TYPES_DEFAULT,
  REPORT_TYPES_DEFAULT_KEYS,
} from 'ee/security_dashboard/constants';

const humanizeScanners = (scanners) => {
  if (!scanners.length || scanners.length === REPORT_TYPES_DEFAULT_KEYS.length) {
    return s__('SecurityOrchestration|All scanners');
  }

  return toNounSeriesText(scanners.map((key) => REPORT_TYPES_DEFAULT[key]));
};

const humanizeSeverities = (severityLevels) => {
  if (!severityLevels.length || severityLevels.length === SEVERITY_LEVELS_KEYS.length) {
    return __('all');
  }

  return toNounSeriesText(severityLevels.map((key) => SEVERITY_LEVELS[key]));
};

const humanizeRule = (rule) => {
  const scanners = humanizeScanners(rule.scanners);
  const severities = humanizeSeverities(rule.severity_levels);

  return sprintf(
    n__(
      'SecurityOrchestration|%{scanners} of %{severities} severity level',
      'SecurityOrchestration|%{scanners} of %{severities} severity levels',
      rule.severity_levels.length,
    ),
    { scanners, severities },
  );
};

/**
 * Convert yaml rules to humanly readable text
 * @param rules
 * @returns {String[]}
 */
export const humanizeRules = (rules = []) => rules.map(humanizeRule);
