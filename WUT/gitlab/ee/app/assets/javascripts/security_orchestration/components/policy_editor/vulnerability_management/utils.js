import { uniqueId } from 'lodash';
import { POLICY_TYPE_COMPONENT_OPTIONS } from 'ee/security_orchestration/components/constants';
import { fromYaml } from 'ee/security_orchestration/components/utils';
import { hasInvalidKey } from 'ee/security_orchestration/components/policy_editor/utils';
import { NO_LONGER_DETECTED_RULE_TYPE } from './constants';

/**
 * Validate policy actions and rules keys
 * @param policy
 * @returns {Object} errors object. If empty, policy is valid.
 */
export const validatePolicy = (policy) => {
  const error = {};
  const rulesKeys = ['type', 'scanners', 'severity_levels'];
  const actionsKeys = ['type'];
  const actionTypes = ['auto_resolve'];

  const hasInvalidActionTypes = (items) => items?.some((item) => !actionTypes.includes(item.type));

  const hasInvalidItems = (items, keys) =>
    items?.some((item) => hasInvalidKey(item, [...keys, 'id']));

  if (hasInvalidItems(policy.actions, actionsKeys) || hasInvalidActionTypes(policy.actions)) {
    error.actions = true;
  }

  if (hasInvalidItems(policy.rules, rulesKeys)) {
    error.rules = true;
  }

  return error;
};

/**
 * Converts a security policy from yaml to an object
 * @param {String} manifest a security policy in yaml form
 * @returns {Object} security policy object and any errors
 */
export const createPolicyObject = (manifest) => {
  const policy = fromYaml({
    manifest,
    type: POLICY_TYPE_COMPONENT_OPTIONS.vulnerabilityManagement.urlParameter,
  });
  const parsingError = validatePolicy(policy);
  return { policy, parsingError };
};

/*
  Returns a new default rule of the no longer detected type.
*/
export const buildDefaultNoLongerDetectedRule = () => {
  return {
    id: uniqueId('rule_'),
    type: NO_LONGER_DETECTED_RULE_TYPE,
    scanners: [],
    severity_levels: [],
  };
};
