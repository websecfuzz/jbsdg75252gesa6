# frozen_string_literal: true

class VulnerabilityPolicy < BasePolicy
  delegate(:project) { @subject.project }

  # Only users who can read vulnerability can comment.
  # It would not be safe to prevent :create_note in project policy,
  # since note permissions are shared, and this can have ripple effect on other parts.
  rule { ~can?(:read_security_resource) }.prevent :create_note
  rule { can?(:read_security_resource) }.enable :read_vulnerability

  # Authorize access to Explain Vulnerability
  condition(:explain_vulnerability_with_ai_authorized) do
    ::Gitlab::Llm::Chain::Utils::ChatAuthorizer.resource(
      resource: subject,
      user: @user
    ).allowed?
  end

  # Authorize access to the Explain Vulnerability Cloud Connector Service
  condition(:explain_vulnerability_cloud_connector_authorized) do
    @user.allowed_to_use?(:explain_vulnerability)
  end

  rule do
    can?(:read_security_resource) &
      explain_vulnerability_with_ai_authorized &
      explain_vulnerability_cloud_connector_authorized
  end.enable(:explain_vulnerability_with_ai)

  rule { can?(:admin_vulnerability) }.enable :create_external_issue_link
  rule { project.security_dashboard_enabled & can?(:developer_access) }.enable :create_external_issue_link

  rule { can?(:read_vulnerability) }.policy do
    enable :read_vulnerability_representation_information
  end
end
