# frozen_string_literal: true

module Mutations
  module Security
    module Finding
      class CreateVulnerability < BaseMutation
        graphql_name 'SecurityFindingCreateVulnerability'

        authorize :admin_vulnerability

        field :vulnerability,
          Types::VulnerabilityType,
          null: true,
          description: 'Vulnerability created after mutation.'

        argument :uuid,
          GraphQL::Types::String,
          required: true,
          description: 'UUID of the security finding to be used to create a vulnerability.'

        def resolve(uuid:)
          finding = authorized_find!(uuid: uuid)

          service = ::Vulnerabilities::FindOrCreateFromSecurityFindingService
                      .new(project: finding.project, current_user: current_user, params: {
                        security_finding_uuid: uuid
                      }, state: 'detected', present_on_default_branch: false)

          prepare_response_for(service.execute)
        end

        private

        def find_object(uuid:)
          ::Security::Finding.find_by_uuid(uuid).tap do |finding|
            raise_resource_not_available_error! if finding.blank?

            authorize!(finding.project)
          end
        end

        def prepare_response_for(result)
          return { errors: result.errors } if result.error?

          {
            errors: [],
            vulnerability: result.payload[:vulnerability]
          }
        end
      end
    end
  end
end
