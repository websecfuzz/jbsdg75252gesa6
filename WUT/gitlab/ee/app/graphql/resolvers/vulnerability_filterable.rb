# frozen_string_literal: true

module Resolvers
  module VulnerabilityFilterable
    extend ActiveSupport::Concern
    include ::Security::GroupIdentifierSearch
    include Gitlab::Utils::StrongMemoize

    private

    ADVANCED_FILTERS = [:owasp_top_10_2021, :identifier_name, :reachability].freeze

    def validate_filters(filters)
      # identifier_name is also supported on postgres
      validate_advanced_filters if (ADVANCED_FILTERS - [:identifier_name]).any? { |f| filters[f].present? }

      validate_owasp_top_ten(filters[:owasp_top_10], "owasp_top_ten") if filters[:owasp_top_10].present?
      validate_owasp_top_ten(filters[:owasp_top_10_2021], "owasp_top_ten_2021") if filters[:owasp_top_10_2021].present?

      validate_reachability!(vulnerable) if filters[:reachability].present?

      # Identifier validation should only run for
      # 1. GitLab .com and Dedicated if ES is not available
      # 2. GitLab Self-managed
      # Validation returns false if Group has more than 20K vulnerabilities
      if filters[:identifier_name].present? && !advanced_filtering_available? # rubocop:disable Style/GuardClause -- This is more readable.
        search_by_identifier_allowed_on_db!(vulnerable: object)
      end
    end

    def validate_owasp_top_ten(owasp_top_ten, argument_name)
      includes_filter_none = owasp_top_ten.include?(::Security::VulnerabilityReadsFinder::FILTER_NONE)

      return if owasp_top_ten.size <= 1

      return unless includes_filter_none

      raise ::Gitlab::Graphql::Errors::ArgumentError,
        "Incompatible argument: #{argument_name}. 'NONE' wildcard cannot be combined with other OWASP top 10 values."
    end

    def validate_advanced_filters
      if object.is_a?(::InstanceSecurityDashboard)
        raise ::Gitlab::Graphql::Errors::ArgumentError,
          "Feature is not supported for InstanceSecurityDashboard"
      elsif !advanced_filtering_available?
        raise ::Gitlab::Graphql::Errors::ArgumentError,
          "Feature is supported only on Gitlab.com and Dedicated with ES"
      end
    end

    def advanced_filtering_available?
      current_user.can?(:access_advanced_vulnerability_management, object)
    end
    strong_memoize_attr :advanced_filtering_available?

    def use_elasticsearch?(filters)
      ADVANCED_FILTERS.any? { |filter| filters[filter].present? } &&
        advanced_filtering_available?
    end

    def validate_reachability!(vulnerable)
      group = if vulnerable.is_a?(Project)
                vulnerable.group
              elsif vulnerable.is_a?(Group)
                vulnerable
              end

      return unless group

      return if Feature.enabled?(:reachability_es_filter,
        group) && ::Elastic::DataMigrationService.migration_has_finished?(:add_rechability_field_to_vulnerability)

      raise ::Gitlab::Graphql::Errors::ArgumentError,
        'The \'reachability\' argument is not currently supported. ' \
          'This feature is planned a future release at both project and group levels.'
    end
  end
end
