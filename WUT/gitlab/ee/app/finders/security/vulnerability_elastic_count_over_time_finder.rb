# frozen_string_literal: true

# Security::VulnerabilityElasticCountOverTimeFinder
#
# Used to filter Vulnerability records for Vulnerabilities API from vulnerabilities elasticsearch index
#
# Arguments:
#   see in ee/app/finders/security/vulnerability_elastic_base_finder.rb

module Security
  class VulnerabilityElasticCountOverTimeFinder < VulnerabilityElasticBaseFinder # rubocop:disable Search/NamespacedClass -- Keeping this in the Security namespace as it is used specifically by security classes
    def execute
      options = search_params.merge({ vulnerabilities_over_time: true })

      query = ::Search::Elastic::VulnerabilityQueryBuilder.build(query: nil, options: options)
      Gitlab::Search::Client.execute_search(query: query, options: es_search_options) do |es_response|
        aggregations = ::Search::Elastic::ResponseMapper.new(es_response).aggregations
        parsed_aggregations = Gitlab::Search::AggregationParser.call(aggregations).first

        count_over_time(parsed_aggregations)
      end
    end

    private

    def count_over_time(parsed_aggregations)
      severity_mapping = ::Vulnerabilities::Read.severities.invert
      report_types_mapping = ::Vulnerabilities::Read.report_types.invert

      parsed_aggregations.buckets.map do |bucket|
        node = { "date" => bucket[:key] }

        bucket[:buckets]&.each do |grouping_key, grouping_data|
          grouped_data = grouping_data.map do |item|
            case grouping_key
            when :by_severity
              {
                "count" => item[:count],
                "severity" => severity_mapping[item[:key]].upcase
              }
            when :by_report_type
              {
                "count" => item[:count],
                "report_type" => report_types_mapping[item[:key]].upcase
              }
            end
          end

          node[grouping_key] = grouped_data
        end

        node
      end
    end
  end
end
