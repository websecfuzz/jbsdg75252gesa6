# frozen_string_literal: true

# This class is only here for the methods to be inherited in the child classes
module Security
  class VulnerabilityBaseFinder
    include Gitlab::Utils::StrongMemoize

    private

    def severities
      if backward_sorting?
        severities_for_backward_sorting
      else
        severities_for_forward_sorting
      end
    end
    strong_memoize_attr :severities

    def backward_sorting?
      return false unless params[:sort]

      params[:sort].ends_with?('desc')
    end

    def severities_for_backward_sorting
      if after_severity_value
        selected_severities.reject { |severity| severity > after_severity_value }
      elsif before_severity_value
        selected_severities.reject { |severity| severity < before_severity_value }
      else
        selected_severities
      end
    end

    def severities_for_forward_sorting
      if after_severity_value
        selected_severities.reject { |severity| severity < after_severity_value }
      elsif before_severity_value
        selected_severities.reject { |severity| severity > before_severity_value }
      else
        selected_severities
      end
    end

    def after_severity_value
      @after_severity_value ||= Vulnerabilities::Read.severities[params[:after_severity]]
    end

    def before_severity_value
      @before_severity_value ||= Vulnerabilities::Read.severities[params[:before_severity]]
    end

    # Returns corresponding integer values for selected severities.
    def selected_severities
      return Vulnerability.severities.values if vulnerable_is_a_group? && params[:severity].blank?

      Vulnerability.severities.slice(*params[:severity]).values
    end

    def vulnerable_is_a_group?
      vulnerable.is_a?(Group)
    end
    strong_memoize_attr :vulnerable_is_a_group?
  end
end
