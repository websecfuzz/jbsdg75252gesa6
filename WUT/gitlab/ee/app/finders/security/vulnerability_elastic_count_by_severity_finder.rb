# frozen_string_literal: true

# Security::VulnerabilityElasticCountBySeverityFinder
#
# Used to filter Vulnerability records for Vulnerabilities API from vulnerabilities elasticsearch index
#
# Arguments:
#   see in ee/app/finders/security/vulnerability_elastic_base_finder.rb

module Security
  class VulnerabilityElasticCountBySeverityFinder < VulnerabilityElasticBaseFinder # rubocop:disable Search/NamespacedClass -- Keeping this in the Security namespace as it is used specifically by security classes
    def execute
      options = search_params.merge({ count_by_severity: true })

      query = ::Search::Elastic::VulnerabilityQueryBuilder.build(query: nil, options: options)
      Gitlab::Search::Client.execute_search(query: query, options: es_search_options) do |es_response|
        aggregations = ::Search::Elastic::ResponseMapper.new(es_response).aggregations
        parsed_aggregations = Gitlab::Search::AggregationParser.call(aggregations).first

        severity_counts(parsed_aggregations)
      end
    end

    private

    def severity_counts(parsed_aggregations)
      severities = {}
      severity_hash = ::Vulnerabilities::Read.severities.invert
      parsed_aggregations.buckets.each do |bucket|
        key = severity_hash[bucket[:key]]
        value = bucket[:count]

        severities[key] = value
      end

      severities
    end
  end
end
