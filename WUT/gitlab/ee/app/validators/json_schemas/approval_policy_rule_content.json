{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "description": "Approval rule actions",
  "type": "object",
  "properties": {
    "type": {
      "enum": [
        "scan_finding",
        "license_finding",
        "any_merge_request"
      ],
      "type": "string",
      "description": "Specified a type of the policy rule. `scan_finding`/`license_finding`/`any_merge_request` rule enforces the defined actions based on the provided information."
    },
    "branches": {
      "type": "array",
      "description": "Specifies a list of protected branches that should be considered to enforce this policy.",
      "additionalItems": false,
      "items": {
        "minLength": 1,
        "type": "string"
      }
    },
    "branch_type": {
      "type": "string",
      "description": "Which types of branches to scan.",
      "enum": [
        "default",
        "protected"
      ]
    },
    "branch_exceptions": {
      "type": "array",
      "minItems": 1,
      "uniqueItems": true,
      "items": {
        "oneOf": [
          {
            "type": "string",
            "minLength": 1
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "minLength": 1
              },
              "full_path": {
                "type": "string",
                "minLength": 1
              }
            },
            "required": [
              "name",
              "full_path"
            ]
          }
        ]
      }
    },
    "scanners": {
      "description": "Specifies a list of scanners that should be considered to enforce this policy. Possible values: `sast`, `secret_detection`, `dependency_scanning`, `container_scanning`, `dast`, `coverage_fuzzing`, `api_fuzzing`.",
      "type": "array",
      "additionalItems": false,
      "items": {
        "minLength": 1,
        "type": "string"
      }
    },
    "vulnerabilities_allowed": {
      "description": "Specifies a number of vulnerabilities allowed before this rule is enforced.",
      "type": "integer",
      "minimum": 0,
      "maximum": 32767
    },
    "severity_levels": {
      "description": "Specifies a list of vulnerability security levels that should be concidered to enforce this policy. Possible values: `info`, `unknown`, `low`, `medium`, `high`, `critical`.",
      "type": "array",
      "additionalItems": false,
      "items": {
        "type": "string",
        "enum": [
          "critical",
          "high",
          "medium",
          "low",
          "info",
          "unknown"
        ]
      }
    },
    "vulnerability_states": {
      "type": "array",
      "description": "Specifies a list of vulnerability states that should be considered to enforce this policy. The `newly_detected` state considers all newly detected vulnerabilities regardless of their status or dismissal. The other states consider findings that match the selected state and already exist in the default branch.",
      "additionalItems": false,
      "items": {
        "type": "string",
        "enum": [
          "detected",
          "confirmed",
          "resolved",
          "dismissed",
          "new_needs_triage",
          "new_dismissed"
        ]
      }
    },
    "vulnerability_attributes": {
      "type": "object",
      "properties": {
        "false_positive": {
          "type": "boolean"
        },
        "fix_available": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "vulnerability_age": {
      "type": "object",
      "properties": {
        "operator": {
          "enum": [
            "greater_than",
            "less_than"
          ],
          "type": "string",
          "description": "Specify the operator to which the age value is compared to"
        },
        "value": {
          "description": "Specifies an age number",
          "type": "integer"
        },
        "interval": {
          "enum": [
            "day",
            "week",
            "month",
            "year"
          ],
          "type": "string",
          "description": "Specify the interval to which the age value is compared to"
        }
      },
      "required": [
        "operator",
        "value",
        "interval"
      ],
      "additionalProperties": false
    },
    "match_on_inclusion_license": {
      "type": "boolean",
      "description": "Specifies whether to match licenses on inclusion or exclusion."
    },
    "license_types": {
      "type": "array",
      "description": "Specifies the licenses to match.",
      "minItems": 1,
      "maxItems": 1000,
      "uniqueItems": true,
      "additionalItems": false,
      "items": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255
      }
    },
    "license_states": {
      "type": "array",
      "minItems": 1,
      "uniqueItems": true,
      "additionalItems": false,
      "description": "States which license finding states to match on.",
      "items": {
        "type": "string",
        "enum": [
          "newly_detected",
          "detected"
        ]
      }
    },
    "licenses": {
      "type": "object",
      "additionalProperties": false,
      "description": "Specifies the licenses to match including the package exceptions.",
      "properties": {
        "denied": {
          "$ref": "#/$defs/licenses_with_package_exclusions"
        },
        "allowed": {
          "$ref": "#/$defs/licenses_with_package_exclusions"
        }
      },
      "oneOf": [
        {
          "required": [
            "denied"
          ]
        },
        {
          "required": [
            "allowed"
          ]
        }
      ]
    },
    "commits": {
      "type": "string",
      "description": "Specifies the commits to match.",
      "enum": [
        "any",
        "unsigned"
      ]
    }
  },
  "oneOf": [
    {
      "required": [
        "branches"
      ]
    },
    {
      "required": [
        "branch_type"
      ]
    }
  ],
  "allOf": [
    {
      "if": {
        "properties": {
          "type": {
            "const": "scan_finding"
          }
        }
      },
      "then": {
        "required": [
          "type",
          "scanners",
          "vulnerabilities_allowed",
          "severity_levels",
          "vulnerability_states"
        ]
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "license_finding"
          }
        }
      },
      "then": {
        "oneOf": [
          {
            "required": [
              "type",
              "match_on_inclusion_license",
              "license_types",
              "license_states"
            ]
          },
          {
            "required": [
              "type",
              "license_states",
              "licenses"
            ]
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "any_merge_request"
          }
        }
      },
      "then": {
        "required": [
          "type",
          "commits"
        ]
      }
    }
  ],
  "additionalProperties": false,
  "$defs": {
    "licenses_with_package_exclusions": {
      "type": "array",
      "minItems": 1,
      "maxItems": 1000,
      "uniqueItems": true,
      "additionalItems": false,
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "packages": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "excluding": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "purls": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "additionalItems": false,
                    "items": {
                      "minLength": 1,
                      "maxLength": 1024,
                      "type": "string",
                      "format": "uri"
                    }
                  }
                },
                "required": [
                  "purls"
                ]
              }
            },
            "required": [
              "excluding"
            ]
          }
        },
        "required": [
          "name"
        ]
      }
    }
  }
}
