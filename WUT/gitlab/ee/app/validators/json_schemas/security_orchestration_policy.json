{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "GitLab Security Policies Configuration",
  "description": "Policies in GitLab provide security teams a way to require scans of their choice to be run whenever a project pipeline runs according to the configuration specified. It is configured by supplying a file in `.gitlab/security-policies/policy.yml`, which will list applicable security policies. A full list of all options can be found at https://docs.gitlab.com/ee/user/application_security/policies/.",
  "type": "object",
  "anyOf": [
    {
      "required": [
        "scan_execution_policy"
      ]
    },
    {
      "required": [
        "approval_policy"
      ]
    },
    {
      "required": [
        "pipeline_execution_policy"
      ]
    },
    {
      "required": [
        "pipeline_execution_schedule_policy"
      ]
    },
    {
      "required": [
        "ci_component_publishing_policy"
      ]
    },
    {
      "required": [
        "vulnerability_management_policy"
      ]
    }
  ],
  "properties": {
    "experiments": {
      "type": "object",
      "description": "Contains experimental feature configurations",
      "patternProperties": {
        "^[a-z][a-z0-9_]*$": {
          "type": "object",
          "required": [
            "enabled"
          ],
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Whether the experimental feature is enabled"
            },
            "configuration": {
              "type": "object",
              "description": "Optional configuration options for the experimental feature",
              "additionalProperties": true
            }
          }
        }
      },
      "additionalProperties": false
    },
    "vulnerability_management_policy": {
      "type": "array",
      "description": "Declares auto-resolve or auto-dismiss configuration for a policy.",
      "additionalItems": false,
      "items": {
        "required": [
          "name",
          "enabled",
          "rules",
          "actions"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name for the policy.",
            "minLength": 1,
            "maxLength": 255,
            "type": "string"
          },
          "description": {
            "description": "Specifies the longer description of the policy.",
            "type": "string"
          },
          "enabled": {
            "description": "Whether to enforce this policy or not.",
            "type": "boolean"
          },
          "rules": {
            "description": "Specifies conditions when this policy should be applied.",
            "type": "array",
            "maxItems": 5,
            "additionalItems": false,
            "items": {
              "type": "object",
              "required": [
                "type",
                "scanners",
                "severity_levels"
              ],
              "properties": {
                "type": {
                  "enum": [
                    "no_longer_detected"
                  ],
                  "type": "string",
                  "description": "Specifies a type of the policy rule."
                },
                "scanners": {
                  "description": "Specifies a list of scanners that should be considered to enforce this policy. Possible values: `sast`, `secret_detection`, `dependency_scanning`, `container_scanning`, `dast`, `coverage_fuzzing`, `api_fuzzing`.",
                  "type": "array",
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                    "enum": [
                      "sast",
                      "secret_detection",
                      "dependency_scanning",
                      "container_scanning",
                      "dast",
                      "coverage_fuzzing",
                      "api_fuzzing"
                    ]
                  }
                },
                "severity_levels": {
                  "description": "Specifies a list of vulnerability security levels that should be considered to enforce this policy. Possible values: `info`, `unknown`, `low`, `medium`, `high`, `critical`.",
                  "type": "array",
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                    "enum": [
                      "critical",
                      "high",
                      "medium",
                      "low",
                      "info",
                      "unknown"
                    ]
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "actions": {
            "type": "array",
            "description": "Specificies what actions should be performed on the matched vulnerabilities.",
            "additionalItems": false,
            "maxItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "description": "The type of action that should be taken. Available: `auto_resolve`.",
                  "enum": [
                    "auto_resolve"
                  ],
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "policy_scope": {
            "$ref": "#/$defs/policy_scope"
          }
        }
      }
    },
    "ci_component_publishing_policy": {
      "type": "array",
      "description": "Allows the publishing of components from specific sources to the catalog.",
      "additionalItems": false,
      "maxItems": 5,
      "items": {
        "required": [
          "name",
          "enabled",
          "allowed_sources",
          "policy_scope"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the policy.",
            "minLength": 1,
            "maxLength": 255,
            "type": "string"
          },
          "description": {
            "description": "Specifies the longer description of the policy.",
            "type": "string"
          },
          "allowed_sources": {
            "description": "Specifies the projects or groups that can publish components.",
            "type": "object",
            "properties": {
              "projects": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "path"
                  ],
                  "additionalProperties": false
                }
              },
              "namespaces": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "path"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "policy_scope": {
            "$ref": "#/$defs/policy_scope"
          },
          "metadata": {
            "$ref": "#/$defs/metadata"
          },
          "enabled": {
            "description": "Whether to enforce this policy or not.",
            "type": "boolean"
          }
        }
      }
    },
    "pipeline_execution_policy": {
      "type": "array",
      "description": "Declares custom pipeline configuration for a policy.",
      "additionalItems": false,
      "items": {
        "required": [
          "name",
          "enabled",
          "content",
          "pipeline_config_strategy"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name for the policy.",
            "minLength": 1,
            "maxLength": 255,
            "type": "string"
          },
          "description": {
            "description": "Specifies the longer description of the policy.",
            "type": "string"
          },
          "content": {
            "$ref": "#/$defs/pipeline_execution_content"
          },
          "pipeline_config_strategy": {
            "description": "Defines the method for merging the policy configuration with the project pipeline. `inject_ci` preserves the project CI configuration and injects additional jobs from the policy. Having multiple policies enabled injects all jobs additively. `inject_policy` behaves like `inject_ci`, but allows custom policy stages to be injected too. `override_project_ci` replaces the project CI configuration and keeps only the policy jobs in the pipeline.",
            "type": "string",
            "enum": [
              "inject_ci",
              "inject_policy",
              "override_project_ci"
            ]
          },
          "suffix": {
            "description": "Defines the method for policy job naming. `on_conflict` (default) applies a unique suffix when a job with the same name is detected in the pipeline. A job called `policy-job` will be added into the pipeline as `policy-job:policy-<security-policy-project-id>-<policy-index>`. `never` is a strict mode which results in a pipeline failure if job names are not unique.",
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "never",
                  "on_conflict"
                ]
              },
              {
                "type": "null"
              }
            ]
          },
          "skip_ci": {
            "description": "Defines whether it should be allowed to use skip_ci directive when policy is enforced.",
            "type": "object",
            "properties": {
              "allowed": {
                "type": "boolean"
              },
              "allowlist": {
                "type": "object",
                "description": "A list of user IDs that are allowed to use skip_ci if it is generally not allowed.",
                "properties": {
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "id"
                      ]
                    }
                  }
                }
              }
            },
            "required": [
              "allowed"
            ]
          },
          "variables_override": {
            "description": "Defines whether variables can be overridden and the exceptions.",
            "type": "object",
            "properties": {
              "allowed": {
                "type": "boolean"
              },
              "exceptions": {
                "type": "array",
                "description": "A list of variables that are excepted from the enforcement.",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "allowed"
            ]
          },
          "policy_scope": {
            "$ref": "#/$defs/policy_scope"
          },
          "metadata": {
            "$ref": "#/$defs/metadata"
          },
          "enabled": {
            "description": "Whether to enforce this policy or not.",
            "type": "boolean"
          }
        }
      }
    },
    "pipeline_execution_schedule_policy": {
      "type": "array",
      "description": "Starts pipelines on a schedule with custom pipeline configuration.",
      "additionalItems": false,
      "maxItems": 1,
      "items": {
        "required": [
          "name",
          "enabled",
          "content",
          "schedules"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name for the policy.",
            "minLength": 1,
            "maxLength": 255,
            "type": "string"
          },
          "description": {
            "description": "Specifies the longer description of the policy.",
            "type": "string"
          },
          "content": {
            "$ref": "#/$defs/pipeline_execution_content"
          },
          "schedules": {
            "type": "array",
            "minItems": 1,
            "maxItems": 1,
            "uniqueItems": true,
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "daily"
                      ]
                    },
                    "branches": {
                      "$ref": "#/$defs/schedule_branches"
                    },
                    "start_time": {
                      "type": "string",
                      "description": "HH:mm format",
                      "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$"
                    },
                    "time_window": {
                      "type": "object",
                      "description": "Specifies the time window on which scheduled runs can be distributed. The actual time window might be shorter based on the schedule frequency.",
                      "properties": {
                        "value": {
                          "type": "integer",
                          "minimum": 600,
                          "maximum": 2629746
                        },
                        "distribution": {
                          "type": "string",
                          "enum": [
                            "random"
                          ]
                        }
                      },
                      "required": [
                        "value",
                        "distribution"
                      ],
                      "additionalProperties": false
                    },
                    "timezone": {
                      "type": "string",
                      "description": "IANA timezone identifier",
                      "default": "UTC"
                    },
                    "snooze": {
                      "type": "object",
                      "description": "Stop this schedule until a certain time.",
                      "properties": {
                        "until": {
                          "type": "string",
                          "description": "Time until the execution should be paused. Format: 2025-6-13T20:20:00+00:00.",
                          "format": "date-time"
                        },
                        "reason": {
                          "type": "string",
                          "description": "Document a reason for snoozing the schedule."
                        }
                      },
                      "required": [
                        "until"
                      ]
                    }
                  },
                  "required": [
                    "type",
                    "start_time",
                    "time_window"
                  ],
                  "additionalProperties": false
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "weekly"
                      ]
                    },
                    "branches": {
                      "$ref": "#/$defs/schedule_branches"
                    },
                    "days": {
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "type": "string",
                        "enum": [
                          "Monday",
                          "Tuesday",
                          "Wednesday",
                          "Thursday",
                          "Friday",
                          "Saturday",
                          "Sunday"
                        ]
                      },
                      "description": "List of days. For example: ['Monday', 'Friday']"
                    },
                    "start_time": {
                      "type": "string",
                      "description": "HH:mm format",
                      "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$"
                    },
                    "time_window": {
                      "type": "object",
                      "description": "Specifies the time window on which scheduled runs can be distributed. The actual time window might be shorter based on the schedule frequency.",
                      "properties": {
                        "value": {
                          "type": "integer",
                          "minimum": 600,
                          "maximum": 2629746
                        },
                        "distribution": {
                          "type": "string",
                          "enum": [
                            "random"
                          ]
                        }
                      },
                      "required": [
                        "value",
                        "distribution"
                      ],
                      "additionalProperties": false
                    },
                    "timezone": {
                      "type": "string",
                      "description": "IANA timezone identifier",
                      "default": "UTC"
                    },
                    "snooze": {
                      "type": "object",
                      "description": "Stop this schedule until a certain time.",
                      "properties": {
                        "until": {
                          "type": "string",
                          "description": "Time until the execution should be paused. Format: 2025-6-13T20:20:00+00:00.",
                          "format": "date-time"
                        },
                        "reason": {
                          "type": "string",
                          "description": "Document a reason for snoozing the schedule."
                        }
                      },
                      "required": [
                        "until"
                      ]
                    }
                  },
                  "required": [
                    "type",
                    "days",
                    "start_time",
                    "time_window"
                  ],
                  "additionalProperties": false
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "monthly"
                      ]
                    },
                    "branches": {
                      "$ref": "#/$defs/schedule_branches"
                    },
                    "days_of_month": {
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 31
                      },
                      "description": "Dates within the month. For example: [3, 10, 17]"
                    },
                    "start_time": {
                      "type": "string",
                      "description": "HH:mm format",
                      "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$"
                    },
                    "time_window": {
                      "type": "object",
                      "description": "Specifies the time window on which scheduled runs can be distributed. The actual time window might be shorter based on the schedule frequency.",
                      "properties": {
                        "value": {
                          "type": "integer",
                          "minimum": 600,
                          "maximum": 2629746
                        },
                        "distribution": {
                          "type": "string",
                          "enum": [
                            "random"
                          ]
                        }
                      },
                      "required": [
                        "value",
                        "distribution"
                      ],
                      "additionalProperties": false
                    },
                    "timezone": {
                      "type": "string",
                      "description": "IANA timezone identifier",
                      "default": "UTC"
                    },
                    "snooze": {
                      "type": "object",
                      "description": "Stop this schedule until a certain time.",
                      "properties": {
                        "until": {
                          "type": "string",
                          "description": "Time until the execution should be paused. Format: 2025-6-13T20:20:00+00:00.",
                          "format": "date-time"
                        },
                        "reason": {
                          "type": "string",
                          "description": "Document a reason for snoozing the schedule."
                        }
                      },
                      "required": [
                        "until"
                      ]
                    }
                  },
                  "required": [
                    "type",
                    "days_of_month",
                    "start_time",
                    "time_window"
                  ],
                  "additionalProperties": false
                }
              ]
            }
          },
          "policy_scope": {
            "$ref": "#/$defs/policy_scope"
          },
          "metadata": {
            "$ref": "#/$defs/metadata"
          },
          "enabled": {
            "description": "Whether to enforce this policy or not.",
            "type": "boolean"
          }
        }
      }
    },
    "scan_execution_policy": {
      "type": "array",
      "description": "Declares required security scans to be run on a specified schedule or with the project pipeline.",
      "additionalItems": false,
      "items": {
        "required": [
          "name",
          "enabled",
          "rules",
          "actions"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name for the policy.",
            "minLength": 1,
            "maxLength": 255,
            "type": "string"
          },
          "description": {
            "description": "Specifies the longer description of the policy.",
            "type": "string"
          },
          "policy_scope": {
            "$ref": "#/$defs/policy_scope"
          },
          "metadata": {
            "$ref": "#/$defs/metadata"
          },
          "enabled": {
            "description": "Whether to enforce this policy or not.",
            "type": "boolean"
          },
          "rules": {
            "description": "Specifies conditions when this policy should be applied.",
            "type": "array",
            "additionalItems": false,
            "items": {
              "type": "object",
              "oneOf": [
                {
                  "required": [
                    "branches"
                  ]
                },
                {
                  "required": [
                    "branch_type"
                  ]
                },
                {
                  "required": [
                    "agents"
                  ]
                }
              ],
              "required": [
                "type"
              ],
              "properties": {
                "type": {
                  "description": "Specifies when this policy should be enforced. `pipeline` indicates that given policy should be enforced for the pipeline started for the branch matching one of the defined in `branches` field. `schedule` indicates that given policy should execute defined `actions` on specified `cadence`.",
                  "enum": [
                    "pipeline",
                    "schedule"
                  ],
                  "type": "string"
                },
                "branches": {
                  "type": "array",
                  "additionalItems": false,
                  "description": "Used to specify a list of branches that should enforce this policy. Supports wildcard (ie. `*` or `release-*`). Supported only when `type` is set to `pipeline`.",
                  "items": {
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "branch_type": {
                  "type": "string",
                  "description": "Which types of branches to scan.",
                  "enum": [
                    "default",
                    "protected",
                    "all",
                    "target_default",
                    "target_protected"
                  ]
                },
                "branch_exceptions": {
                  "type": "array",
                  "minItems": 1,
                  "uniqueItems": true,
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "minLength": 1
                      },
                      {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "minLength": 1
                          },
                          "full_path": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "required": [
                          "name",
                          "full_path"
                        ]
                      }
                    ]
                  }
                },
                "cadence": {
                  "description": "Specifies when this policy should schedule a new pipeline with enforced `actions`. Uses cron expression as a format (ie. `0 22 * * 1-5`). Supported only when `type` is set to `schedule`.",
                  "type": "string",
                  "pattern": "(@(yearly|annually|monthly|weekly|daily|midnight|noon|hourly))|(((\\*|(\\-?\\d+\\,?)+)(\\/\\d+)?|last|L|(sun|mon|tue|wed|thu|fri|sat|SUN|MON|TUE|WED|THU|FRI|SAT\\-|\\,)+|(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC|\\-|\\,)+)\\s?){5,6}"
                },
                "timezone": {
                  "type": "string",
                  "description": "Time zone to apply to the cadence. Value must be an IANA Time Zone Database identifier, for example: `America/New_York`."
                },
                "time_window": {
                  "description": "Specifies for how long the scheduled scans are allowed to run",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "distribution": {
                      "description": "Specifies how the scheduled scans should be distributed.",
                      "type": "string",
                      "enum": [
                        "random"
                      ]
                    },
                    "value": {
                      "description": "Specifies the time window in seconds. Min: 1 hours, Max: 24 hours",
                      "type": "integer",
                      "minimum": 3600,
                      "maximum": 86400
                    }
                  },
                  "required": [
                    "distribution",
                    "value"
                  ]
                },
                "agents": {
                  "type": "object",
                  "description": "Specifies names of the GitLab agents where cluster image scanning will run.",
                  "minProperties": 1,
                  "maxProperties": 1,
                  "additionalProperties": false,
                  "patternProperties": {
                    "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$": {
                      "type": "object",
                      "description": "Specifies the name of the Kubernetes cluster configured for your project in GitLab.",
                      "additionalProperties": false,
                      "properties": {
                        "namespaces": {
                          "type": "array",
                          "description": "Specifies Kubernetes namespaces where resources will be scanned.",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "pipeline_sources": {
                  "type": "object",
                  "description": "Specifies which pipeline sources this policy should be applied to (only for pipeline type).",
                  "properties": {
                    "including": {
                      "type": "array",
                      "description": "Which pipeline source to apply scan to (only for pipeline type).",
                      "items": {
                        "type": "string",
                        "emum": [
                          "unknown",
                          "push",
                          "web",
                          "trigger",
                          "schedule",
                          "api",
                          "external",
                          "pipeline",
                          "chat",
                          "merge_request_event",
                          "external_pull_request_event"
                        ]
                      }
                    }
                  }
                }
              },
              "if": {
                "properties": {
                  "type": {
                    "const": "schedule"
                  }
                }
              },
              "then": {
                "required": [
                  "cadence"
                ]
              },
              "additionalProperties": false
            }
          },
          "actions": {
            "type": "array",
            "description": "Specifies a list of scans that should be enforced in this policy.",
            "additionalItems": false,
            "items": {
              "type": "object",
              "properties": {
                "scan": {
                  "description": "The type of scan that should be enforced to run. Available: `sast`, `sast_iac`, `dast`, `secret_detection`, `container_scanning`, `dependency_scanning`.",
                  "enum": [
                    "dast",
                    "secret_detection",
                    "container_scanning",
                    "cluster_image_scanning",
                    "sast",
                    "dependency_scanning",
                    "sast_iac"
                  ],
                  "type": "string"
                },
                "scanner_profile": {
                  "description": "A name of the DAST Scanner Profile to be used to execute DAST scan. Supported only when `scan` is set to `dast`.",
                  "type": "string"
                },
                "site_profile": {
                  "description": "A name of the DAST Site Profile to be used to execute DAST scan. Supported only when `scan` is set to `dast`.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "variables": {
                  "type": "object",
                  "description": "Defines environment variables for specific security jobs. Job level property overrides global variables.",
                  "additionalProperties": false,
                  "patternProperties": {
                    "^[a-zA-Z_][a-zA-Z0-9_]*$": {
                      "type": "string"
                    }
                  }
                },
                "tags": {
                  "type": "array",
                  "additionalItems": false,
                  "description": "Defines the runner tags to which the security jobs has to execute.",
                  "items": {
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "template": {
                  "description": "The type of the CI template that should be used to enforce the scan. Available: `default` and `latest`.",
                  "enum": [
                    "default",
                    "latest"
                  ],
                  "type": "string"
                },
                "scan_settings": {
                  "description": "The customizable options for enforced scan.",
                  "type": "object",
                  "properties": {
                    "ignore_default_before_after_script": {
                      "description": "Specifies whether to preserve default before_script and after_script values.",
                      "type": "boolean"
                    }
                  }
                }
              },
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "scan": {
                        "const": "dast"
                      }
                    }
                  },
                  "then": {
                    "required": [
                      "site_profile"
                    ],
                    "maxProperties": 7
                  }
                },
                {
                  "if": {
                    "properties": {
                      "scan": {
                        "const": "secret_detection"
                      }
                    }
                  },
                  "then": {
                    "maxProperties": 5
                  }
                },
                {
                  "if": {
                    "properties": {
                      "scan": {
                        "const": "cluster_image_scanning"
                      }
                    }
                  },
                  "then": {
                    "maxProperties": 5
                  }
                },
                {
                  "if": {
                    "properties": {
                      "scan": {
                        "const": "container_scanning"
                      }
                    }
                  },
                  "then": {
                    "maxProperties": 5
                  }
                },
                {
                  "if": {
                    "properties": {
                      "scan": {
                        "const": "sast"
                      }
                    }
                  },
                  "then": {
                    "maxProperties": 5
                  }
                }
              ],
              "additionalProperties": false
            }
          },
          "skip_ci": {
            "description": "Defines whether it should be allowed to use skip_ci directive when policy is enforced.",
            "type": "object",
            "properties": {
              "allowed": {
                "type": "boolean"
              },
              "allowlist": {
                "type": "object",
                "description": "A list of user IDs that are allowed to use skip_ci if it is generally not allowed.",
                "properties": {
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "id"
                      ]
                    }
                  }
                }
              }
            },
            "required": [
              "allowed"
            ]
          }
        }
      }
    },
    "approval_policy": {
      "type": "array",
      "description": "Declares actions to be enforced based on scan results.",
      "additionalItems": false,
      "items": {
        "anyOf": [
          {
            "required": [
              "name",
              "enabled",
              "rules",
              "actions"
            ]
          },
          {
            "required": [
              "name",
              "enabled",
              "rules",
              "approval_settings"
            ]
          }
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name for the policy.",
            "minLength": 1,
            "maxLength": 255,
            "type": "string",
            "pattern": "^(?!License-Check$|Coverage-Check$)"
          },
          "description": {
            "description": "Specifies the longer description of the policy.",
            "type": "string"
          },
          "enabled": {
            "description": "Whether to enforce this policy or not.",
            "type": "boolean"
          },
          "fallback_behavior": {
            "type": "object",
            "properties": {
              "fail": {
                "type": "string",
                "enum": [
                  "open",
                  "closed"
                ]
              }
            }
          },
          "policy_tuning": {
            "type": "object",
            "properties": {
              "unblock_rules_using_execution_policies": {
                "type": "boolean",
                "description": "Experimental: Unblock policy approval rules with missing scans of scanners which are enforced by Scan execution policies. If scan does not produce artifacts because it is not applicable to the given project, approval rules are automatically unblocked and do not require approvals."
              }
            }
          },
          "policy_scope": {
            "$ref": "#/$defs/policy_scope"
          },
          "metadata": {
            "$ref": "#/$defs/metadata"
          },
          "rules": {
            "description": "Specifies conditions when a this policy should be applied.",
            "type": "array",
            "maxItems": 5,
            "additionalItems": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "enum": [
                    "scan_finding",
                    "license_finding",
                    "any_merge_request"
                  ],
                  "type": "string",
                  "description": "Specified a type of the policy rule. `scan_finding`/`license_finding`/`any_merge_request` rule enforces the defined actions based on the provided information."
                },
                "branches": {
                  "type": "array",
                  "description": "Specifies a list of protected branches that should be considered to enforce this policy.",
                  "additionalItems": false,
                  "items": {
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "branch_type": {
                  "type": "string",
                  "description": "Which types of branches to scan.",
                  "enum": [
                    "default",
                    "protected"
                  ]
                },
                "branch_exceptions": {
                  "type": "array",
                  "minItems": 1,
                  "uniqueItems": true,
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "minLength": 1
                      },
                      {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "minLength": 1
                          },
                          "full_path": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "required": [
                          "name",
                          "full_path"
                        ]
                      }
                    ]
                  }
                },
                "scanners": {
                  "description": "Specifies a list of scanners that should be considered to enforce this policy. Possible values: `sast`, `secret_detection`, `dependency_scanning`, `container_scanning`, `dast`, `coverage_fuzzing`, `api_fuzzing`.",
                  "type": "array",
                  "additionalItems": false,
                  "items": {
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "vulnerabilities_allowed": {
                  "description": "Specifies a number of vulnerabilities allowed before this rule is enforced.",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 32767
                },
                "severity_levels": {
                  "description": "Specifies a list of vulnerability security levels that should be concidered to enforce this policy. Possible values: `info`, `unknown`, `low`, `medium`, `high`, `critical`.",
                  "type": "array",
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                    "enum": [
                      "critical",
                      "high",
                      "medium",
                      "low",
                      "info",
                      "unknown"
                    ]
                  }
                },
                "vulnerability_states": {
                  "type": "array",
                  "description": "Specifies a list of vulnerability states that should be considered to enforce this policy. The `newly_detected` state considers all newly detected vulnerabilities regardless of their status or dismissal. The other states consider findings that match the selected state and already exist in the default branch.",
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                    "enum": [
                      "detected",
                      "confirmed",
                      "resolved",
                      "dismissed",
                      "new_needs_triage",
                      "new_dismissed"
                    ]
                  }
                },
                "vulnerability_attributes": {
                  "type": "object",
                  "properties": {
                    "false_positive": {
                      "type": "boolean"
                    },
                    "fix_available": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "vulnerability_age": {
                  "type": "object",
                  "properties": {
                    "operator": {
                      "enum": [
                        "greater_than",
                        "less_than"
                      ],
                      "type": "string",
                      "description": "Specify the operator to which the age value is compared to"
                    },
                    "value": {
                      "description": "Specifies an age number",
                      "type": "integer"
                    },
                    "interval": {
                      "enum": [
                        "day",
                        "week",
                        "month",
                        "year"
                      ],
                      "type": "string",
                      "description": "Specify the interval to which the age value is compared to"
                    }
                  },
                  "required": [
                    "operator",
                    "value",
                    "interval"
                  ],
                  "additionalProperties": false
                },
                "match_on_inclusion_license": {
                  "type": "boolean",
                  "description": "Specifies whether to match licenses on inclusion or exclusion."
                },
                "license_types": {
                  "type": "array",
                  "description": "Specifies the licenses to match.",
                  "minItems": 1,
                  "maxItems": 1000,
                  "uniqueItems": true,
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255
                  }
                },
                "license_states": {
                  "type": "array",
                  "minItems": 1,
                  "uniqueItems": true,
                  "additionalItems": false,
                  "description": "States which license finding states to match on.",
                  "items": {
                    "type": "string",
                    "enum": [
                      "newly_detected",
                      "detected"
                    ]
                  }
                },
                "licenses": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Specifies the licenses to match including the package exceptions.",
                  "properties": {
                    "denied": {
                      "$ref": "#/$defs/licenses_with_package_exclusions"
                    },
                    "allowed": {
                      "$ref": "#/$defs/licenses_with_package_exclusions"
                    }
                  },
                  "oneOf": [
                    {
                      "required": [
                        "denied"
                      ]
                    },
                    {
                      "required": [
                        "allowed"
                      ]
                    }
                  ]
                },
                "commits": {
                  "type": "string",
                  "description": "Specifies the commits to match.",
                  "enum": [
                    "any",
                    "unsigned"
                  ]
                }
              },
              "oneOf": [
                {
                  "required": [
                    "branches"
                  ]
                },
                {
                  "required": [
                    "branch_type"
                  ]
                }
              ],
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "type": {
                        "const": "scan_finding"
                      }
                    }
                  },
                  "then": {
                    "required": [
                      "type",
                      "scanners",
                      "vulnerabilities_allowed",
                      "severity_levels",
                      "vulnerability_states"
                    ]
                  }
                },
                {
                  "if": {
                    "properties": {
                      "type": {
                        "const": "license_finding"
                      }
                    }
                  },
                  "then": {
                    "oneOf": [
                      {
                        "required": [
                          "type",
                          "match_on_inclusion_license",
                          "license_types",
                          "license_states"
                        ]
                      },
                      {
                        "required": [
                          "type",
                          "license_states",
                          "licenses"
                        ]
                      }
                    ]
                  }
                },
                {
                  "if": {
                    "properties": {
                      "type": {
                        "const": "any_merge_request"
                      }
                    }
                  },
                  "then": {
                    "required": [
                      "type",
                      "commits"
                    ]
                  }
                }
              ],
              "additionalProperties": false
            }
          },
          "actions": {
            "description": "Specifies a list of actions that should be enforced in this policy. For `require_approval` action, at least one of `user_approvers`, `user_approvers_ids`, `group_approvers`, `group_approvers_ids`, `role_approvers` should be provided.",
            "type": "array",
            "additionalItems": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "enum": [
                    "require_approval",
                    "send_bot_message"
                  ],
                  "type": "string",
                  "description": "Specified a type of the policy action. `require_approval` action specifies required approvals (from selected groups or users) when this policy is applied. `send_bot_message` enables comments on merge requests when policy violations are detected."
                },
                "approvals_required": {
                  "description": "Specifies a number of required merge request approvals.",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 100
                },
                "user_approvers": {
                  "description": "Specifies a list of users (by usernames) required to approve affected merge request.",
                  "type": "array",
                  "minItems": 1,
                  "additionalItems": false,
                  "items": {
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "user_approvers_ids": {
                  "description": "Specifies a list of users (by IDs) required to approve affected merge request.",
                  "type": "array",
                  "minItems": 1,
                  "additionalItems": false,
                  "items": {
                    "minLength": 1,
                    "type": "integer"
                  }
                },
                "group_approvers": {
                  "type": "array",
                  "description": "Specifies a list of groups (by group path) required to approve affected merge request.",
                  "minItems": 1,
                  "additionalItems": false,
                  "items": {
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "group_approvers_ids": {
                  "type": "array",
                  "description": "Specifies a list of groups (by IDs) required to approve affected merge request.",
                  "minItems": 1,
                  "additionalItems": false,
                  "items": {
                    "minLength": 1,
                    "type": "integer"
                  }
                },
                "role_approvers": {
                  "type": "array",
                  "description": "Specifies a list of roles required to approve affected merge request.",
                  "minItems": 1,
                  "additionalItems": false,
                  "items": {
                    "minLength": 1,
                    "anyOf": [
                      {
                        "type": "string",
                        "enum": [
                          "guest",
                          "reporter",
                          "developer",
                          "maintainer",
                          "owner"
                        ]
                      },
                      {
                        "type": "integer"
                      }
                    ]
                  }
                },
                "enabled": {
                  "type": "boolean"
                }
              },
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "type": {
                        "const": "require_approval"
                      }
                    }
                  },
                  "then": {
                    "anyOf": [
                      {
                        "required": [
                          "type",
                          "approvals_required",
                          "user_approvers"
                        ]
                      },
                      {
                        "required": [
                          "type",
                          "approvals_required",
                          "user_approvers_ids"
                        ]
                      },
                      {
                        "required": [
                          "type",
                          "approvals_required",
                          "group_approvers"
                        ]
                      },
                      {
                        "required": [
                          "type",
                          "approvals_required",
                          "group_approvers_ids"
                        ]
                      },
                      {
                        "required": [
                          "type",
                          "approvals_required",
                          "role_approvers"
                        ]
                      }
                    ]
                  }
                },
                {
                  "if": {
                    "properties": {
                      "type": {
                        "const": "send_bot_message"
                      }
                    }
                  },
                  "then": {
                    "required": [
                      "enabled"
                    ]
                  }
                }
              ]
            }
          },
          "approval_settings": {
            "type": "object",
            "properties": {
              "prevent_approval_by_author": {
                "type": "boolean"
              },
              "prevent_approval_by_commit_author": {
                "type": "boolean"
              },
              "remove_approvals_with_new_commit": {
                "type": "boolean"
              },
              "require_password_to_approve": {
                "type": "boolean"
              },
              "block_branch_modification": {
                "type": "boolean"
              },
              "prevent_pushing_and_force_pushing": {
                "type": "boolean"
              },
              "block_group_branch_modification": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "enabled": {
                        "type": "boolean"
                      },
                      "exceptions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "enabled"
                    ]
                  }
                ]
              }
            }
          },
          "bypass_settings": {
            "type": "object",
            "properties": {
              "branches": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "source": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "pattern": {
                          "type": "string"
                        }
                      },
                      "oneOf": [
                        {
                          "required": [
                            "name"
                          ]
                        },
                        {
                          "required": [
                            "pattern"
                          ]
                        }
                      ]
                    },
                    "target": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "pattern": {
                          "type": "string"
                        }
                      },
                      "oneOf": [
                        {
                          "required": [
                            "name"
                          ]
                        },
                        {
                          "required": [
                            "pattern"
                          ]
                        }
                      ]
                    }
                  }
                }
              },
              "access_tokens": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              },
              "service_accounts": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          }
        },
        "additionalProperties": false
      }
    }
  },
  "additionalProperties": false,
  "$defs": {
    "policy_scope": {
      "type": "object",
      "properties": {
        "compliance_frameworks": {
          "description": "Specifies for which compliance frameworks this policy should be applied to.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              }
            }
          }
        },
        "projects": {
          "type": "object",
          "description": "Specifies for which projects this policy should be applied to.",
          "properties": {
            "including": {
              "type": "array",
              "description": "Specifies projects where this policy should be applied to.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "Specifies the ID of the project."
                  }
                }
              }
            },
            "excluding": {
              "type": "array",
              "description": "Specifies projects where this policy should not be applied to.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "Specifies the ID of the project."
                  }
                }
              }
            }
          }
        },
        "groups": {
          "type": "object",
          "description": "Specifies for which groups this policy should be applied to.",
          "properties": {
            "including": {
              "type": "array",
              "description": "Specifies groups where this policy should be applied to.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "Specifies the ID of the group."
                  }
                }
              }
            },
            "excluding": {
              "type": "array",
              "description": "Specifies groups where this policy should not be applied to.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "Specifies the ID of the group."
                  }
                }
              }
            }
          }
        }
      }
    },
    "pipeline_execution_content": {
      "description": "Specifies the content of custom configuration.",
      "type": "object",
      "properties": {
        "include": {
          "type": "array",
          "maxItems": 1,
          "minItems": 1,
          "items": {
            "type": "object",
            "properties": {
              "project": {
                "type": "string"
              },
              "file": {
                "type": "string"
              },
              "ref": {
                "type": "string"
              }
            },
            "required": [
              "project",
              "file"
            ],
            "additionalProperties": false
          }
        }
      },
      "required": [
        "include"
      ],
      "additionalProperties": false
    },
    "metadata": {
      "description": "Specifies custom annotations in a form of key-value pairs.",
      "type": "object",
      "patternProperties": {
        "^[a-zA-Z$][\\w$]*$": {
          "type": [
            "string",
            "number",
            "boolean"
          ]
        }
      },
      "additionalProperties": false
    },
    "licenses_with_package_exclusions": {
      "type": "array",
      "minItems": 1,
      "maxItems": 1000,
      "uniqueItems": true,
      "additionalItems": false,
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "packages": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "excluding": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "purls": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "additionalItems": false,
                    "items": {
                      "minLength": 1,
                      "maxLength": 1024,
                      "type": "string",
                      "format": "uri"
                    }
                  }
                },
                "required": [
                  "purls"
                ]
              }
            },
            "required": [
              "excluding"
            ]
          }
        },
        "required": [
          "name"
        ]
      }
    },
    "schedule_branches": {
      "type": "array",
      "description": "List of branches to schedule pipelines for. Maximum five branches per schedule. The policy only schedules pipelines for branches that exist in the project.",
      "maxItems": 5,
      "uniqueItems": true,
      "items": {
        "type": "string"
      }
    }
  }
}
