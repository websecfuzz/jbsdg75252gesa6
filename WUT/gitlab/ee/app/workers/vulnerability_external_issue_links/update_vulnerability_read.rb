# frozen_string_literal: true

module VulnerabilityExternalIssueLinks
  class UpdateVulnerabilityRead
    include Gitlab::EventStore::Subscriber

    data_consistency :always
    feature_category :vulnerability_management
    idempotent!

    def handle_event(event)
      vulnerability_id = event.data[:vulnerability_id]

      # rubocop:disable CodeReuse/ActiveRecord -- going through vulnerabilities makes no sense here
      Vulnerabilities::Read.find_by(vulnerability_id: vulnerability_id).try do |vulnerability_read|
        # rubocop:enable CodeReuse/ActiveRecord -- going through vulnerabilities makes no sense here
        case event
        when Vulnerabilities::LinkToExternalIssueTrackerCreated
          vulnerability_read.update(has_issues: true)
        when Vulnerabilities::LinkToExternalIssueTrackerRemoved
          vulnerability_read.update(has_issues: false)
        end
      end
    end
  end
end
