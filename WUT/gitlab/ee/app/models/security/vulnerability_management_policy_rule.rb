# frozen_string_literal: true

module Security
  class VulnerabilityManagementPolicyRule < ApplicationRecord
    include PolicyRule

    self.table_name = 'vulnerability_management_policy_rules'

    enum :type, { no_longer_detected: 0 }, prefix: true

    belongs_to :security_policy, class_name: 'Security::Policy', inverse_of: :vulnerability_management_policy_rules

    validates :typed_content, json_schema: { filename: "vulnerability_management_policy_rule_content" }

    scope :no_longer_detected, -> { where(type: :no_longer_detected) }

    def match?(vulnerability)
      scanners.include?(vulnerability.report_type) && severity_levels.include?(vulnerability.severity)
    end

    private

    def scanners
      return ::Enums::Vulnerability.report_types.keys if content['scanners'].blank?

      content['scanners']
    end

    def severity_levels
      return ::Enums::Vulnerability.severity_levels.keys if content['severity_levels'].blank?

      content['severity_levels']
    end
  end
end
