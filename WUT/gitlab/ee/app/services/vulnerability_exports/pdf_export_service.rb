# frozen_string_literal: true

require "gitlab/pdf"

# rubocop:disable Gitlab/BoundedContexts -- matching existing structure
module VulnerabilityExports
  # rubocop:enable Gitlab/BoundedContexts
  class PdfExportService
    include Gitlab::InternalEventsTracking

    def self.export(vulnerability_export)
      new(vulnerability_export).export
    end

    def initialize(vulnerability_export)
      self.vulnerability_export = vulnerability_export
    end

    def export
      vulnerability_export.start!
      generate_export_file
      vulnerability_export.finish!

      track_pdf_export(property: "success")

      vulnerability_export.send_completion_email!
    rescue StandardError
      vulnerability_export.failed!

      track_pdf_export(property: "error")

      raise
    ensure
      vulnerability_export.schedule_export_deletion
    end

    private

    attr_accessor :vulnerability_export

    delegate :exportable, to: :vulnerability_export, private: true

    def generate_export_file
      vulnerability_export.file = prawn_doc.then { File.new(filename) }
    end

    def prawn_doc
      Prawn::Document.generate(filename) do |pdf|
        # Set up global document settings such as font color and
        # margins
        pdf.stroke_color 'ff0000'

        # move down 60 pts to make room for header (which will be
        # drawn last so that the page numbering will work)
        pdf.move_down 60
        Gitlab::PDF::Security::ProjectVulnerabilitiesHistory.render(
          pdf, data: vulnerability_export.report_data.dig('project_vulnerabilities_history', 'svg'))
        Gitlab::PDF::Security::GroupVulnerabilitiesHistory.render(
          pdf, data: vulnerability_export.report_data['group_vulnerabilities_over_time'])

        is_exportable_group = exportable.is_a? Group

        if is_exportable_group
          pdf.start_new_page
          pdf.move_down 60

          grades_data = vulnerability_export.report_data['project_security_status']
          Gitlab::PDF::Security::GroupVulnerabilitiesProjectsGrades.render(pdf, data: grades_data)
        end

        # draw header (doing this last for page numbering)
        pdf.repeat(:all, dynamic: true) do
          Gitlab::PDF::Header.render(pdf, exportable&.name, page: pdf.page_number, height: 50)
        end

        # set up the index tree
        pdf.outline.define do |o|
          o.page(title: s_('Vulnerabilities Over Time'), destination: 1)
          o.page(title: s_('Project Security Status'), destination: 2) if is_exportable_group
        end
      end
    end

    def track_pdf_export(property:)
      event_name = 'export_pdf_security_dashboard'

      case exportable
      when Group
        label = "#{event_name}_group"
        namespace = exportable
        project = nil
      else
        label = "#{event_name}_project"
        namespace = exportable.namespace
        project = exportable
      end

      track_internal_event(
        event_name,
        user: vulnerability_export.author,
        namespace: namespace,
        project: project,
        additional_properties: {
          label: label,
          property: property,
          file_size: vulnerability_export.file&.size
        }
      )
    end

    def report_timestamp
      @report_timestamp ||= Time.current.utc.strftime('%FT%H%M')
    end

    def exportable_path
      @exportable_path ||= exportable.full_path.parameterize
    end

    def filename
      @filename ||= [exportable_path, '_vulnerabilities_', report_timestamp, '.pdf'].join
    end
  end
end
