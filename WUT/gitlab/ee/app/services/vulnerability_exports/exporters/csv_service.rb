# frozen_string_literal: true

module VulnerabilityExports
  module Exporters
    class CsvService
      CSV_DELIMITER = '; '
      IDENTIFIER_FORMATTER = ->(v) { v&.other_identifier_values&.to_csv(col_sep: CSV_DELIMITER, row_sep: '') }
      DISMISSAL_FORMATTER = ->(v) { v&.dismissed? ? v&.dismissal_reason&.humanize : nil }
      # to be removed with https://gitlab.com/gitlab-org/gitlab/-/issues/412114
      NIL_FORMATTER = ->(_) { nil }

      CVSS_FORMATTER = ->(v) { v&.cvss_vectors_with_vendor&.to_csv(col_sep: CSV_DELIMITER, row_sep: '') }

      attr_reader :vulnerabilities

      # the CSV service expects Vulnerabilities::Read as input
      def initialize(vulnerabilities, order_hint: Vulnerabilities::Read.arel_table[:vulnerability_id])
        @vulnerabilities = vulnerabilities
        @order_hint = order_hint
      end

      def generate(&block)
        csv_builder.render(&block)
      end

      def header
        CSV.generate_line(mapping.keys)
      end

      private

      def preloads
        [
          {
            vulnerability: [
              { project: [:route] },
              :group,
              { notes: [:updated_by, :author] },
              { findings: [:scanner, :identifiers, { finding_identifiers: :identifier }] }
            ]
          }
        ]
      end

      def csv_builder
        @csv_builder ||= CsvBuilder.new(vulnerabilities, mapping, preloads,
          replace_newlines: true, order_hint: @order_hint)
      end

      def mapping
        {
          s_('VulnerabilityExport|Group Name') => 'group_name',
          s_('VulnerabilityExport|Project Name') => 'project_name',
          s_('VulnerabilityExport|Tool') => 'report_type',
          s_('VulnerabilityExport|Scanner Name') => 'finding_scanner_name',
          s_('VulnerabilityExport|Status') => 'state',
          s_('VulnerabilityExport|Vulnerability') => 'title',
          s_('VulnerabilityExport|Details') => 'finding_description',
          s_('VulnerabilityExport|Additional Info') => NIL_FORMATTER,
          s_('VulnerabilityExport|Severity') => 'severity',
          s_('VulnerabilityExport|CVE') => 'cve_value',
          s_('VulnerabilityExport|CWE') => 'cwe_value',
          s_('VulnerabilityExport|Other Identifiers') => IDENTIFIER_FORMATTER,
          s_('VulnerabilityExport|Detected At') => 'created_at',
          s_('VulnerabilityExport|Location') => 'location',
          s_('VulnerabilityExport|Activity') => 'resolved_on_default_branch',
          s_('VulnerabilityExport|Comments') => 'notes_summary',
          s_('VulnerabilityExport|Full Path') => 'full_path',
          s_('VulnerabilityExport|CVSS Vectors') => CVSS_FORMATTER,
          s_('VulnerabilityExport|Dismissal Reason') => DISMISSAL_FORMATTER,
          s_('VulnerabilityExport|Vulnerability ID') => 'vulnerability_id'
        }
      end
    end
  end
end

VulnerabilityExports::Exporters::CsvService.prepend_mod
