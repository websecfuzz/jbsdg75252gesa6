# frozen_string_literal: true

module VulnerabilityExports
  class CreateService
    include Gitlab::Allowable
    include ::Services::ReturnServiceResponses
    include Gitlab::Utils::StrongMemoize

    attr_reader :exportable, :author, :params

    ALLOWED_PARAMS = %i[format send_email report_data].freeze

    def initialize(exportable, author, params)
      @exportable = exportable
      @author = author
      @params = params
    end

    def execute
      raise Gitlab::Access::AccessDeniedError unless can?(author, :create_vulnerability_export, exportable)

      return export_in_progress_error if export_in_progress?

      vulnerability_export = Vulnerabilities::Export.create(
        exportable: exportable,
        author: author,
        **create_params
      )

      ::VulnerabilityExports::ExportWorker.perform_async(vulnerability_export.id)

      if vulnerability_export.persisted?
        ServiceResponse.success(payload: { vulnerability_export: vulnerability_export })
      else
        ServiceResponse.error(
          message: vulnerability_export.errors.full_messages,
          reason: :unprocessable_entity
        )
      end
    end

    private

    def create_params
      params[:format] = params[:export_format]
      params.slice(*ALLOWED_PARAMS).compact
    end

    def export_in_progress_error
      ServiceResponse.error(
        message: s_('VulnerabilityExport|Export already in progress. Please retry after the current export completes.'),
        reason: :too_many_requests
      )
    end

    def export_in_progress?
      scoped_exports = Vulnerabilities::Export
                         .recent
                         .in_progress
                         .for_author(author)

      scoped_exports = case exportable
                       when Group
                         scoped_exports.for_group(exportable)
                       when Project
                         scoped_exports.for_project(exportable)
                       when InstanceSecurityDashboard
                         scoped_exports.instance
                       end

      scoped_exports.exists?
    end
    strong_memoize_attr :export_in_progress?
  end
end
