# frozen_string_literal: true

module Security
  module VulnerabilityScanning
    class FindingMap
      include Gitlab::Utils::StrongMemoize

      FINDING_ATTRIBUTES = %i[
        metadata_version
        name
        raw_metadata
        report_type
        severity
        details
        description
        message
        cve
        solution
      ].freeze

      attr_reader :pipeline, :report_finding, :purl_type
      attr_accessor :finding_id, :vulnerability_id, :new_record, :transitioned_to_detected, :identifier_ids, :scanner_id

      delegate :uuid, :severity, :evidence, :location, :report_type, to: :report_finding
      delegate :project, to: :pipeline

      def initialize(pipeline:, report_finding:, purl_type:)
        @pipeline = pipeline
        @report_finding = report_finding
        @identifier_ids = []
        @purl_type = purl_type
      end

      def identifiers
        if report_finding.identifiers.count > Vulnerabilities::Finding::MAX_NUMBER_OF_IDENTIFIERS
          Gitlab::AppJsonLogger.warn(
            message: 'Finding exceeded max number of allowed identifiers - excess identifiers ignored',
            ignored_identifiers: report_finding.identifiers.drop(Vulnerabilities::Finding::MAX_NUMBER_OF_IDENTIFIERS)
          )
        end

        report_finding.identifiers.first(Vulnerabilities::Finding::MAX_NUMBER_OF_IDENTIFIERS)
      end
      strong_memoize_attr :identifiers

      def set_identifier_ids_by(fingerprint_id_map)
        @identifier_ids = identifiers.map { |identifier| fingerprint_id_map[identifier.fingerprint] }
      end

      def identifier_data
        identifiers.map do |identifier|
          identifier.to_hash.merge(project_id: project.id)
        end
      end

      def to_hash
        report_finding.to_hash
                      .slice(*FINDING_ATTRIBUTES)
                      .merge!(
                        uuid: uuid,
                        scanner_id: scanner_id,
                        primary_identifier_id: identifier_ids.first,
                        location: report_finding.location_data,
                        location_fingerprint: report_finding.location_fingerprint,
                        project_id: project.id,
                        initial_pipeline_id: pipeline.id,
                        latest_pipeline_id: pipeline.id
                      )
      end

      def new_or_transitioned_to_detected?
        new_record || transitioned_to_detected
      end
    end
  end
end
