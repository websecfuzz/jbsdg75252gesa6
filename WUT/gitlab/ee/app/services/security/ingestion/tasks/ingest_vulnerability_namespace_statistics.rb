# frozen_string_literal: true

module Security
  module Ingestion
    module Tasks
      # Ingests the data for the `Vulnerabilities::NamespaceStatistics` model.
      class IngestVulnerabilityNamespaceStatistics < AbstractTask
        def execute
          namespace_diffs = transform_aggregated_severities_to_diff
          return unless namespace_diffs.present?

          Vulnerabilities::NamespaceStatistics::UpdateService.execute(namespace_diffs)
        end

        private

        def transform_aggregated_severities_to_diff
          aggregate_severity_counts_by_namespace.map do |namespace, severities_counts|
            formatted_traversal_ids = "{#{namespace.traversal_ids.join(', ')}}"

            diff_hash = {
              "namespace_id" => namespace.id,
              "traversal_ids" => formatted_traversal_ids
            }
            diff_hash.merge!(severities_counts)
          end
        end

        def aggregate_severity_counts_by_namespace
          severity_levels = severity_counts.values.flat_map(&:keys).uniq

          severity_counts
            .group_by { |project, _| project.namespace }
            .transform_values do |project_counts|
              project_counts
                .flat_map { |_, counts| counts.to_a }
                .group_by(&:first)
                .transform_values { |pairs| pairs.sum(&:last) }
                .tap { |result| severity_levels.each { |level| result[level] ||= 0 } }
            end
        end

        def severity_levels
          @severity_levels ||= ::Enums::Vulnerability.severity_levels.keys.map(&:to_s).prepend("total")
        end

        def severity_counts
          @severity_counts ||= finding_maps
            .select(&:new_or_transitioned_to_detected?)
            .group_by(&:project)
            .transform_values do |finding_maps|
              fill_in_zeros(finding_maps.map(&:severity).tally)
            end
        end

        def fill_in_zeros(counts)
          severity_levels.each do |key|
            counts[key] ||= 0
          end

          counts["total"] = counts.values.sum
          counts
        end
      end
    end
  end
end
