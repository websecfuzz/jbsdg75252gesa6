# frozen_string_literal: true

module QA
  RSpec.describe 'Security Risk Management', :external_api_calls, :external_ai_provider,
    only: { pipeline: %i[staging staging-canary canary production] }, product_group: :security_insights,
    quarantine: {
      issue: 'https://gitlab.com/gitlab-org/gitlab/-/issues/524041',
      type: :investigating
    } do
    describe 'Vulnerability Report' do
      let(:vuln_name) { "Relative Path Traversal" }

      let!(:sast_report) { File.join(EE::Runtime::Path.fixture('secure_premade_reports'), 'gl-sast-report.json') }

      let!(:source_file) do
        File.join(EE::Runtime::Path.fixture('source_files'), 'java-groovy-cmdi-groovyshell-taint.java')
      end

      let!(:project) do
        create(:project,
          name: 'resolve-this-vulnerability',
          description: 'To check resolve this vulnerability AI feature')
      end

      let!(:runner) do
        create(:project_runner, project: project, name: "runner-for-#{project.name}", tags: ['secure_report'])
      end

      let!(:mr_relative_path) do
        "#{project.full_path}/-/merge_requests/1"
      end

      let!(:ci_yaml) do
        <<~YAML
          sast:
            tags: [secure_report]
            only: null # Template defaults to feature branches only
            script:
              - echo "Skipped"
            artifacts:
              reports:
                sast: gl-sast-report.json
        YAML
      end

      let!(:ci_file) do
        {
          file_path: '.gitlab-ci.yml',
          content: ci_yaml
        }
      end

      let!(:sast_report_file) do
        {
          file_path: 'gl-sast-report.json',
          content: File.read(sast_report)
        }
      end

      let!(:source_file_java) do
        {
          file_path: 'java-groovy-cmdi-groovyshell-taint.java',
          content: File.read(source_file)
        }
      end

      before do
        Flow::Login.sign_in
        project.visit!
      end

      after do
        runner.remove_via_api!
      end

      it 'resolves a vulnerability using Duo', :aggregate_failures,
        testcase: 'https://gitlab.com/gitlab-org/gitlab/-/quality/test_cases/482996' do
        commit_test_sast_reports
        Flow::Pipeline.wait_for_pipeline_creation_via_api(project: project)
        expect { project.latest_pipeline[:status] }.to eventually_eq('success').within(max_duration: 90)

        resolve_this_vulnerability(vuln_name)

        QA::Support::Retrier.retry_on_exception(max_attempts: 10, sleep_interval: 1,
          message: 'Wait for MR page to appear') do
          expect(page.current_url).to include(mr_relative_path)
        end

        expect(page).to have_link('Commits')
        expect(page).to have_link('Pipelines')
        expect(page).to have_link('Changes')
        expect(page).to have_content("Resolve vulnerability: #{vuln_name}")
        expect(page).to have_content("AI GENERATED FIX")
        expect(page).to have_content("Description")
        expect(page).to have_content("Summary")
      end

      def resolve_this_vulnerability(vulnerability_name)
        Page::Project::Menu.perform(&:go_to_vulnerability_report)
        EE::Page::Project::Secure::SecurityDashboard.perform do |security_dashboard|
          security_dashboard.click_vulnerability(description: vulnerability_name)
        end
        EE::Page::Project::Secure::VulnerabilityDetails.perform(&:resolve_this_vulnerability)
      end

      def commit_test_sast_reports
        build(:commit,
          project: project,
          commit_message: 'Commit SAST report for testing') do |commit|
          commit.add_files([sast_report_file])
          commit.add_files([ci_file])
          commit.add_files([source_file_java])
        end.fabricate_via_api!
      end
    end
  end
end
