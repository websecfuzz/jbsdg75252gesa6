# frozen_string_literal: true

module QA
  RSpec.describe 'Security Risk Management', :external_api_calls, :external_ai_provider,
    product_group: :security_insights, only: { pipeline: %i[staging staging-canary canary production] } do
    describe 'Vulnerability Report' do
      let(:vuln_name) { "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" }

      let!(:sast_report) { File.join(EE::Runtime::Path.fixture('secure_premade_reports'), 'gl-sast-report.json') }

      let!(:project) do
        create(:project,
          name: 'explain-this-vulnerability',
          description: 'To check explain this vulnerability AI feature')
      end

      let!(:runner) do
        create(:project_runner, project: project, name: "runner-for-#{project.name}", tags: ['secure_report'])
      end

      let!(:ci_yaml) do
        <<~YAML
          sast:
            tags: [secure_report]
            only: null # Template defaults to feature branches only
            script:
              - echo "Skipped"
            artifacts:
              reports:
                sast: gl-sast-report.json
        YAML
      end

      let!(:ci_file) do
        {
          file_path: '.gitlab-ci.yml',
          content: ci_yaml
        }
      end

      let!(:sast_report_file) do
        {
          file_path: 'gl-sast-report.json',
          content: File.read(sast_report)
        }
      end

      before do
        Flow::Login.sign_in
        project.visit!
      end

      after do
        runner.remove_via_api!
      end

      it 'can explain a vulnerability using Duo',
        testcase: 'https://gitlab.com/gitlab-org/gitlab/-/quality/test_cases/432438' do
        commit_test_sast_reports
        explain_this_vulnerability(vuln_name)
        Support::Retrier.retry_on_exception(max_attempts: 4, sleep_interval: 1,
          message: "Retry failed AI did not return expected response") do
          QA::EE::Page::Component::DuoChat.perform do |duo_chat|
            expect(duo_chat.duo_chat_open?).to be true
          end

          EE::Page::Project::Secure::VulnerabilityDetails.perform do |vulnerability_details|
            aggregate_failures do
              expect(vulnerability_details.has_explain_this_vulnerability?).to be true
              expect(vulnerability_details.explain_this_vulnerability_text).not_to be_empty
            end
          end
        end
      end

      def explain_this_vulnerability(vulnerability_name)
        Page::Project::Menu.perform(&:go_to_vulnerability_report)
        EE::Page::Project::Secure::SecurityDashboard.perform do |security_dashboard|
          security_dashboard.wait_for_vuln_report_to_load
          security_dashboard.click_vulnerability(description: vulnerability_name)
        end

        EE::Page::Project::Secure::VulnerabilityDetails.perform(&:explain_this_vulnerability)
      end

      def commit_test_sast_reports
        build(:commit,
          project: project,
          commit_message: 'Commit SAST report for testing') do |commit|
          commit.add_files([sast_report_file])
          commit.add_files([ci_file])
        end.fabricate_via_api!
      end
    end
  end
end
