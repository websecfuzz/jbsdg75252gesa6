# frozen_string_literal: true

module QA
  RSpec.describe 'Create', product_group: :code_review do
    describe 'Generate merge commit message' do
      let(:project) { create(:project, :with_readme, name: 'mr-gen-commit-project') }

      let(:merge_request) do
        create(:merge_request, :no_preparation, project: project, title: 'Adding a greeting function',
          source_branch: 'feature', target_new_branch: false)
      end

      before do
        create(:commit,
          project: project,
          branch: 'feature',
          start_branch: project.default_branch,
          commit_message: 'foo', actions: [
            { action: 'create', file_path: 'greeting.rb', content: "def greeting(name)\n  \"Hello, \#{name}!\"\nend\n" }
          ])

        Flow::Login.sign_in
        merge_request.visit!
      end

      context 'as a maintainer' do
        it 'can be generated using Duo', :external_ai_provider, only:
          { pipeline: %i[staging staging-canary canary production] },
          testcase: 'https://gitlab.com/gitlab-org/gitlab/-/quality/test_cases/495408' do
          Page::MergeRequest::Show.perform do |merge_request|
            merge_request.edit_commit_message
            merge_request.generate_commit

            expect { merge_request.ai_commit_message }
              .to eventually_include('Commit message generated by GitLab Duo').within(max_duration: 90),
                'Expected commit message to be generated.'

            merge_request.insert_commit
            merge_request.merge!
            expect(merge_request).to be_merged
          end
        end
      end
    end
  end
end
