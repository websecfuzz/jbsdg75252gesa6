# frozen_string_literal: true

module QA
  RSpec.describe 'Security Risk Management', :skip_live_env, product_group: :security_insights do
    describe 'Vulnerability report in a project' do
      let!(:project) do
        create(:project,
          :with_readme,
          name: 'project-export-vulnerability-report',
          description: 'Project to check export vulnerability report feature')
      end

      let(:vuln_severity) { :HIGH }
      let(:download_dir) { QA::Runtime::Env.chrome_default_download_path }
      let(:vulnerability_name) { vulnerabilities.keys.last }
      let(:vulnerability_description) { vulnerabilities.values.last }
      let(:vulnerabilities) do
        { "Elves vulnerability": "Pale skin and pointy ears",
          "Dwarves vulnerability": "Short, but stern and tough",
          "Men vulnerability": "Good and bad, greedy and selfless",
          "Orcs vulnerability": "Faithful to the dark lord",
          "CVE-2017-18269 in glibc": "Vulnerability for #{project.name}" }
      end

      before do
        vulnerabilities.each do |name, description|
          QA::EE::Resource::VulnerabilityItem.fabricate_via_api! do |vulnerability|
            vulnerability.id = project.id
            vulnerability.severity = vuln_severity
            vulnerability.name = name
            vulnerability.description = description
          end
        end

        Flow::Login.sign_in
        project.visit!
      end

      it 'can export vulnerability report to csv',
        testcase: 'https://gitlab.com/gitlab-org/gitlab/-/quality/test_cases/384370' do
        Page::Project::Menu.perform(&:go_to_vulnerability_report)

        EE::Page::Project::Secure::SecurityDashboard.perform do |security_dashboard|
          expect(security_dashboard).to have_vulnerability(description: vulnerability_name)
          security_dashboard.export_vulnerabilities_to_csv
          expect(security_dashboard).to have_sent_via_email_alert
        end
      end
    end
  end
end
